<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hadoop常用端口号</title>
    <url>/2020/04/14/81.hadoop%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3%E5%8F%B7/</url>
    <content><![CDATA[<p>本博文用于默认的hadoop端口快速查询</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>组件</th>
<th>节点</th>
<th>默认端口</th>
<th>配置</th>
<th>用途说明</th>
</tr>
</thead>
<tbody><tr>
<td>HDFS</td>
<td>DateNode</td>
<td>50010</td>
<td>dfs.datanode.address</td>
<td>datanode服务端口，用于数据传输</td>
</tr>
<tr>
<td>HDFS</td>
<td>DateNode</td>
<td>50075</td>
<td>dfs.datanode.http.address</td>
<td>http服务的端口</td>
</tr>
<tr>
<td>HDFS</td>
<td>DateNode</td>
<td>50475</td>
<td>dfs.datanode.https.address</td>
<td>http服务的端口</td>
</tr>
<tr>
<td>HDFS</td>
<td>DateNode</td>
<td>50020</td>
<td>dfs.datanode.ipc.address</td>
<td>ipc服务的端口</td>
</tr>
<tr>
<td>HDFS</td>
<td>NameNode</td>
<td>50070</td>
<td>dfs.namenode.http-address</td>
<td>http服务的端口</td>
</tr>
<tr>
<td>HDFS</td>
<td>NameNode</td>
<td>50470</td>
<td>dfs.namenode.https-address</td>
<td>https服务的端口</td>
</tr>
<tr>
<td>HDFS</td>
<td>NameNode</td>
<td>8020</td>
<td>fs.defaultFS</td>
<td>接收Client连接的RPC端口，用于获取文件系统metadata信息。</td>
</tr>
<tr>
<td>HDFS</td>
<td>journalnode</td>
<td>8485</td>
<td>dfs.journalnode.rpc-address</td>
<td>RPC服务</td>
</tr>
<tr>
<td>HDFS</td>
<td>journalnode</td>
<td>8480</td>
<td>dfs.journalnode.http-address</td>
<td>HTTP服务</td>
</tr>
<tr>
<td>HDFS</td>
<td>ZKFC</td>
<td>8019</td>
<td>dfs.ha.zkfc.port</td>
<td>ZooKeeper FailoverController，用于NN HA</td>
</tr>
<tr>
<td>YARN</td>
<td>ResourceManage</td>
<td>8032</td>
<td>yarn.resourcemanager.address</td>
<td>RM的applications manager(ASM)端口</td>
</tr>
<tr>
<td>YARN</td>
<td>ResourceManage</td>
<td>8030</td>
<td>yarn.resourcemanager.scheduler.address</td>
<td>scheduler组件的IPC端口</td>
</tr>
<tr>
<td>YARN</td>
<td>ResourceManage</td>
<td>8031</td>
<td>yarn.resourcemanager.resource-tracker.address</td>
<td>IPC</td>
</tr>
<tr>
<td>YARN</td>
<td>ResourceManage</td>
<td>8033</td>
<td>yarn.resourcemanager.admin.address</td>
<td>IPC</td>
</tr>
<tr>
<td>YARN</td>
<td>ResourceManage</td>
<td>8088</td>
<td>yarn.resourcemanager.webapp.address</td>
<td>http服务端口</td>
</tr>
<tr>
<td>YARN</td>
<td>NodeManager</td>
<td>8040</td>
<td>yarn.nodemanager.localizer.address</td>
<td>localizer IPC</td>
</tr>
<tr>
<td>YARN</td>
<td>NodeManager</td>
<td>8042</td>
<td>yarn.nodemanager.webapp.address</td>
<td>http服务端口</td>
</tr>
<tr>
<td>YARN</td>
<td>NodeManager</td>
<td>8041</td>
<td>yarn.nodemanager.address</td>
<td>NM中container manager的端口</td>
</tr>
<tr>
<td>YARN</td>
<td>JobHistory Server</td>
<td>10020</td>
<td>mapreduce.jobhistory.address</td>
<td>IPC</td>
</tr>
<tr>
<td>YARN</td>
<td>JobHistory Server</td>
<td>19888</td>
<td>mapreduce.jobhistory.webapp.address</td>
<td>http服务端口</td>
</tr>
<tr>
<td>HBase</td>
<td>Master</td>
<td>60000</td>
<td>hbase.master.port</td>
<td>IPC</td>
</tr>
<tr>
<td>HBase</td>
<td>Master</td>
<td>60010</td>
<td>hbase.master.info.port</td>
<td>http服务端口</td>
</tr>
<tr>
<td>HBase</td>
<td>RegionServer</td>
<td>60020</td>
<td>hbase.regionserver.port</td>
<td>IPC</td>
</tr>
<tr>
<td>HBase</td>
<td>RegionServer</td>
<td>60030</td>
<td>hbase.regionserver.info.port</td>
<td>http服务端口</td>
</tr>
<tr>
<td>HBase</td>
<td>HQuorumPeer</td>
<td>2181</td>
<td>hbase.zookeeper.property.clientPort</td>
<td>HBase-managed ZK mode，使用独立的ZooKeeper集群则不会启用该端口。</td>
</tr>
<tr>
<td>HBase</td>
<td>HQuorumPeer</td>
<td>2888</td>
<td>hbase.zookeeper.peerport</td>
<td>HBase-managed ZK mode，使用独立的ZooKeeper集群则不会启用该端口。</td>
</tr>
<tr>
<td>HBase</td>
<td>HQuorumPeer</td>
<td>3888</td>
<td>hbase.zookeeper.leaderport</td>
<td>HBase-managed ZK mode，使用独立的ZooKeeper集群则不会启用该端口。</td>
</tr>
<tr>
<td>Hive</td>
<td>Metastore</td>
<td>9085</td>
<td>/etc/default/hive-metastore中export PORT=<port>来更新默认端口</td>
<td></td>
</tr>
<tr>
<td>Hive</td>
<td>HiveServer</td>
<td>10000</td>
<td>/etc/hive/conf/hive-env.sh中export HIVE_SERVER2_THRIFT_PORT=<port>来更新默认端口</td>
<td></td>
</tr>
<tr>
<td>ZooKeeper</td>
<td>Server</td>
<td>2181</td>
<td>/etc/zookeeper/conf/zoo.cfg中clientPort=<port></td>
<td>对客户端提供服务的端口</td>
</tr>
<tr>
<td>ZooKeeper</td>
<td>Server</td>
<td>2888</td>
<td>/etc/zookeeper/conf/zoo.cfg中server.x=[hostname]:nnnnn[:nnnnn]，标蓝部分</td>
<td>follower用来连接到leader，只在leader上监听该端口</td>
</tr>
<tr>
<td>ZooKeeper</td>
<td>Server</td>
<td>3888</td>
<td>/etc/zookeeper/conf/zoo.cfg中server.x=[hostname]:nnnnn[:nnnnn]，标蓝部分</td>
<td>用于leader选举的。只在electionAlg是1,2或3(默认)时需要</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>win10中IDEA导入hive源码并实现远程连接服务器元数据</title>
    <url>/2020/04/12/80.win10%E4%B8%ADIDEA%E5%AF%BC%E5%85%A5hive%E6%BA%90%E7%A0%81%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%83%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>windows下坑很多，比linux和mac都要麻烦，本篇文章能实现得感谢red哥的分享</p>
<a id="more"></a>

<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol>
<li><p>下载Hive源码</p>
<p>本次案例，我们使用CDH版本，版本为：hive-1.1.0-cdh5.16.2-src.tar.gz</p>
<p>下载链接：<a href="http://archive.cloudera.com/cdh5/cdh/5/hive-1.1.0-cdh5.16.2-src.tar.gz" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/cdh/5/hive-1.1.0-cdh5.16.2-src.tar.gz</a></p>
</li>
<li><p>编译Hive源码</p>
<p>使用<code>git-bash</code>编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package -DskipTests&#x3D;true -Phadoop-2</span><br><span class="line"></span><br><span class="line">## 经过漫长的等待，出现如下界面时，表示编译成功</span><br><span class="line">[INFO] Reactor Summary:</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] Hive 1.1.0-cdh5.16.2 ............................... SUCCESS [  3.119 s]</span><br><span class="line">[INFO] Hive Classifications ............................... SUCCESS [  2.406 s]</span><br><span class="line">[INFO] Hive Shims Common .................................. SUCCESS [  3.327 s]</span><br><span class="line">[INFO] Hive Shims 0.23 .................................... SUCCESS [  3.494 s]</span><br><span class="line">[INFO] Hive Shims Scheduler ............................... SUCCESS [  2.423 s]</span><br><span class="line">[INFO] Hive Shims ......................................... SUCCESS [  1.463 s]</span><br><span class="line">[INFO] Hive Common ........................................ SUCCESS [  8.382 s]</span><br><span class="line">[INFO] Hive Serde ......................................... SUCCESS [  8.001 s]</span><br><span class="line">[INFO] Hive Metastore ..................................... SUCCESS [ 28.285 s]</span><br><span class="line">[INFO] Hive Ant Utilities ................................. SUCCESS [  1.668 s]</span><br><span class="line">[INFO] Spark Remote Client ................................ SUCCESS [  4.915 s]</span><br><span class="line">[INFO] Hive Query Language ................................ SUCCESS [01:36 min]</span><br><span class="line">[INFO] Hive Service ....................................... SUCCESS [ 22.921 s]</span><br><span class="line">[INFO] Hive Accumulo Handler .............................. SUCCESS [  5.496 s]</span><br><span class="line">[INFO] Hive JDBC .......................................... SUCCESS [  5.797 s]</span><br><span class="line">[INFO] Hive Beeline ....................................... SUCCESS [  3.957 s]</span><br><span class="line">[INFO] Hive CLI ........................................... SUCCESS [  4.060 s]</span><br><span class="line">[INFO] Hive Contrib ....................................... SUCCESS [  4.321 s]</span><br><span class="line">[INFO] Hive HBase Handler ................................. SUCCESS [  5.518 s]</span><br><span class="line">[INFO] Hive HCatalog ...................................... SUCCESS [  1.399 s]</span><br><span class="line">[INFO] Hive HCatalog Core ................................. SUCCESS [  5.933 s]</span><br><span class="line">[INFO] Hive HCatalog Pig Adapter .......................... SUCCESS [  4.632 s]</span><br><span class="line">[INFO] Hive HCatalog Server Extensions .................... SUCCESS [  4.477 s]</span><br><span class="line">[INFO] Hive HCatalog Webhcat Java Client .................. SUCCESS [  4.903 s]</span><br><span class="line">[INFO] Hive HCatalog Webhcat .............................. SUCCESS [  7.452 s]</span><br><span class="line">[INFO] Hive HCatalog Streaming ............................ SUCCESS [  4.306 s]</span><br><span class="line">[INFO] Hive HWI ........................................... SUCCESS [  3.461 s]</span><br><span class="line">[INFO] Hive ODBC .......................................... SUCCESS [  3.061 s]</span><br><span class="line">[INFO] Hive Shims Aggregator .............................. SUCCESS [  0.840 s]</span><br><span class="line">[INFO] Hive TestUtils ..................................... SUCCESS [  1.077 s]</span><br><span class="line">[INFO] Hive Packaging 1.1.0-cdh5.16.2 ..................... SUCCESS [  4.194 s]</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 04:22 min</span><br><span class="line">[INFO] Finished at: 2020-04-12T18:50:46+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
</li>
<li><p>将源码导入IDEA </p>
<p>源码以Maven方式，导入IDEA后，等待依赖加载完成，点击<code>Build Project</code>编译</p>
</li>
</ol>
<h2 id="二、修改源码"><a href="#二、修改源码" class="headerlink" title="二、修改源码"></a>二、修改源码</h2><ol>
<li><p>找到<code>hive-cli</code>模块，在<code>src</code>下，新建<code>resources</code>目录，并标记为资源目录</p>
</li>
<li><p>拷贝集群上如下配置文件到<code>resources</code>目录中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">core-site.xml</span><br><span class="line">hdfs-site.xml</span><br><span class="line">mapred-site.xml</span><br><span class="line">yarn-site.xml</span><br><span class="line">hive-site.xml</span><br><span class="line"></span><br><span class="line">[注]</span><br><span class="line">1. hive-site.xml 需添加 metastore 信息</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hive.metastore.uris&lt;&#x2F;name&gt;</span><br><span class="line">		&lt;value&gt;thrift:&#x2F;&#x2F;192.168.0.50:9083&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hive.metastore.warehouse.dir&lt;&#x2F;name&gt;</span><br><span class="line">		&lt;value&gt;&#x2F;usr&#x2F;hive&#x2F;warehouse&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">2. 服务器需启动 metastore 服务</span><br><span class="line">hive --service metastore -p 9083 &amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>CliDriver</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">控制台输出如下信息</span><br><span class="line"></span><br><span class="line">WARNING: Hive CLI is deprecated and migration to Beeline is recommended.</span><br><span class="line">hive (default)&gt; show databases;</span><br><span class="line"></span><br><span class="line">但我们发现输入sql语句后，回车，控制台没有响应，无任何输出</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>DEBUG</code> 源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. step1</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">String dbSpaces &#x3D; spacesForString(curDB);</span><br><span class="line"></span><br><span class="line">while ((line &#x3D; reader.readLine(curPrompt + &quot;&gt; &quot;)) !&#x3D; null) &#123;</span><br><span class="line">	&#x2F;&#x2F; .....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">2. class ConsoleReader &#123;</span><br><span class="line">	.....</span><br><span class="line">	public readLine(...) &#123;</span><br><span class="line">		&#x2F;&#x2F; .....</span><br><span class="line">	&#125;</span><br><span class="line">	.....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DEBUG 源码到 while 循环时，我们发现，控制台输入sql后，并没有进入循环体，</span><br><span class="line">我们进入 readLine 方法后发现，类名为 ConsoleReader ，查看该类发现，使用的是JLine来处理控制台输入，进一步推测 ConsoleReader 仅适用于 UNIX&#x2F;MAC 系统的控制台输入，不适用于Windows 的控制台输入</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改源码</p>
<p>我们知道Hive选择的是JLine来处理控制台输入，因此，我们选择修改控制台输入方式为 Scanner<br>我们对源码做如下修改</p>
<ul>
<li>变更前</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while ((line &#x3D; reader.readLine(curPrompt + &quot;&gt; &quot;)) !&#x3D; null) &#123;</span><br><span class="line">	&#x2F;&#x2F; ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>变更后</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scanner scanner &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">while (true) &#123;</span><br><span class="line">	System.out.println(curPrompt + &quot;&gt; &quot;);</span><br><span class="line">	line &#x3D; scanner.nextLine();</span><br><span class="line">	if (null &#x3D;&#x3D; line) &#123;</span><br><span class="line">    	break;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>6.不通过修改源码解决问题</p>
<p>-Djline.WindowsTerminal.directConsole=false</p>
<p>7.hdfs-site.xml中添加一个参数(debug四小时……)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.client.use.datanode.hostname&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;true&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>





<h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><ol>
<li><p>启动<code>CliDriver</code></p>
</li>
<li><p>控制台输入 <code>show databases</code></p>
</li>
<li><p>输入如下日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; </span><br><span class="line">show databases;</span><br><span class="line">OK</span><br><span class="line">database_name</span><br><span class="line">default</span><br><span class="line">Time taken: 0.267 seconds, Fetched: 7 row(s)</span><br></pre></td></tr></table></figure>
</li>
<li><p>证明我们修改成功了，也证实了我们前面的推测   </p>
</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>rdd转df的两种方式</title>
    <url>/2020/04/11/79.rdd%E8%BD%ACdf%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>分为编程方式和反射方式两种</p>
<a id="more"></a>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用编程方式</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">programmatically</span></span>(spark: <span class="type">SparkSession</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// RDD=&gt;DF时需要的隐式转换</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="comment">// 创建RDD</span></span><br><span class="line">    <span class="keyword">val</span> rdd = spark.sparkContext.textFile(<span class="string">"ruozedata-spark-sql/data/info.txt"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// STEP1: RDD[String] ==&gt; RDD[Row]</span></span><br><span class="line">    <span class="keyword">val</span> infoRDD: <span class="type">RDD</span>[<span class="type">Row</span>] = rdd.map(x =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> splits = x.split(<span class="string">","</span>)</span><br><span class="line">      <span class="keyword">val</span> id = splits(<span class="number">0</span>).trim.toInt</span><br><span class="line">      <span class="keyword">val</span> name = splits(<span class="number">1</span>).trim</span><br><span class="line">      <span class="keyword">val</span> age = splits(<span class="number">2</span>).trim.toInt</span><br><span class="line">      <span class="type">Row</span>(id, name, age)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// STEP2: schema</span></span><br><span class="line">    <span class="keyword">val</span> schema = <span class="type">StructType</span>(</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"id"</span>, <span class="type">IntegerType</span>, <span class="literal">true</span>) ::</span><br><span class="line">        <span class="type">StructField</span>(<span class="string">"name"</span>, <span class="type">StringType</span>, <span class="literal">false</span>) ::</span><br><span class="line">        <span class="type">StructField</span>(<span class="string">"age"</span>, <span class="type">IntegerType</span>, <span class="literal">false</span>) :: <span class="type">Nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// STEP3: createDataFrame</span></span><br><span class="line">    <span class="keyword">val</span> df = spark.createDataFrame(infoRDD, schema)</span><br><span class="line">    df.printSchema()</span><br><span class="line">    df.show()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用反射方式将RDD转成DF</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">reflection</span></span>(spark: <span class="type">SparkSession</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// RDD=&gt;DF时需要的隐式转换</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建RDD</span></span><br><span class="line">    <span class="keyword">val</span> rdd = spark.sparkContext.textFile(<span class="string">"ruozedata-spark-sql/data/info.txt"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RDD[String] ==&gt; case class</span></span><br><span class="line">    <span class="keyword">val</span> infoDF = rdd.map(x =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> splits = x.split(<span class="string">","</span>)</span><br><span class="line">      <span class="keyword">val</span> id = splits(<span class="number">0</span>).trim.toInt</span><br><span class="line">      <span class="keyword">val</span> name = splits(<span class="number">1</span>).trim</span><br><span class="line">      <span class="keyword">val</span> age = splits(<span class="number">2</span>).trim.toInt</span><br><span class="line">      <span class="type">Info</span>(id, name, age)</span><br><span class="line">    &#125;).toDF() <span class="comment">// 最终转成DF</span></span><br><span class="line"></span><br><span class="line">    infoDF.printSchema()</span><br><span class="line">    infoDF.show()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span>(<span class="params">id: <span class="type">Int</span>, name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
        <tag>rdd</tag>
        <tag>dataframe</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop-lzo</title>
    <url>/2020/04/10/78.hadoop-lzo/</url>
    <content><![CDATA[<h1 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h1><p>1.安装好hadoop</p>
<p>2.安装好jdk和maven(maven提前配置阿里云连接，不然慢死！)</p>
<p>3.安装前置库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install  lzo-devel  zlib-devel  gcc autoconf automake libtool</span><br></pre></td></tr></table></figure>

<a id="more"></a>



<h1 id="lzo使用流程"><a href="#lzo使用流程" class="headerlink" title="lzo使用流程"></a>lzo使用流程</h1><h2 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载</span><br><span class="line">wget http:&#x2F;&#x2F;www.oberhumer.com&#x2F;opensource&#x2F;lzo&#x2F;download&#x2F;lzo-2.10.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar -zxvf lzo-2.10.tar.gz</span><br><span class="line">cd lzo-2.10</span><br><span class="line"></span><br><span class="line"># 配置前缀</span><br><span class="line">.&#x2F;configure -prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;lzo&#x2F;</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>



<h2 id="编译hadoop-lzo源码"><a href="#编译hadoop-lzo源码" class="headerlink" title="编译hadoop-lzo源码"></a>编译hadoop-lzo源码</h2><p>下载hadoop-lzo的源码，下载地址：<a href="https://github.com/twitter/hadoop-lzo/archive/master.zip" target="_blank" rel="noopener">https://github.com/twitter/hadoop-lzo/archive/master.zip</a><br>解压之后，修改pom.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;hadoop.current.version&gt;2.6.0-cdh5.16.2&lt;&#x2F;hadoop.current.version&gt;</span><br></pre></td></tr></table></figure>

<p>注意！cdh版本需要配置加下面的仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;repository&gt;</span><br><span class="line">      &lt;id&gt;cloudera&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;repository.cloudera.com&#x2F;artifactory&#x2F;cloudera-repos&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;repository&gt;</span><br><span class="line"></span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">      &lt;id&gt;aliyun&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;repository&gt;</span><br></pre></td></tr></table></figure>



<p>声明两个临时环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export C_INCLUDE_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;lzo&#x2F;include</span><br><span class="line">export LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;lzo&#x2F;lib</span><br></pre></td></tr></table></figure>



<p>进入hadoop-lzo-master，执行maven编译命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn package -Dmaven.test.skip&#x3D;true</span><br></pre></td></tr></table></figure>


<p>进入target，hadoop-lzo-0.4.21-SNAPSHOT.jar 即编译成功的hadoop-lzo组件</p>
<p><strong>编译好的文件改名hadoop-lzo-0.4.20.jar 放入到 $HADOOP_HOME/share/hadoop/common/下面然后进行分发</strong></p>
<h2 id="hadoop配置文件"><a href="#hadoop配置文件" class="headerlink" title="hadoop配置文件"></a>hadoop配置文件</h2><p>添加下面内容</p>
<p>core-site.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;io.compression.codecs&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">org.apache.hadoop.io.compress.GzipCodec,</span><br><span class="line">org.apache.hadoop.io.compress.DefaultCodec,</span><br><span class="line">org.apache.hadoop.io.compress.BZip2Codec,</span><br><span class="line">org.apache.hadoop.io.compress.SnappyCodec,</span><br><span class="line">com.hadoop.compression.lzo.LzoCodec,</span><br><span class="line">com.hadoop.compression.lzo.LzopCodec</span><br><span class="line">&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;io.compression.codec.lzo.class&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;com.hadoop.compression.lzo.LzoCodec&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>



<p>mapred-site.mxl</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.map.output.compress&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;true&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.map.output.compress.codec&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;com.hadoop.compression.lzo.LzoCodec&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<p><strong>之后记得重启集群</strong></p>
<h1 id="测试lzo"><a href="#测试lzo" class="headerlink" title="测试lzo"></a>测试lzo</h1><p>本测试提前下载了lzop，提前将文件进行了压缩，再传到hdfs上的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install lzop</span><br></pre></td></tr></table></figure>



<p>通过python3生成测试数据(测试功能为wc)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'test.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000000</span>):</span><br><span class="line">        file_object.write(str(random.randint(<span class="number">1</span>, <span class="number">100000</span>))+<span class="string">"\t"</span>+str(random.randint(<span class="number">1</span>, <span class="number">5</span>))+<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure>



<p>上传压缩完成的lzo数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lzop test.txt</span><br><span class="line">hadoop fs -put test.txt.lzo &#x2F;wc&#x2F;text.txt.lzo</span><br></pre></td></tr></table></figure>



<h2 id="无索引测试"><a href="#无索引测试" class="headerlink" title="无索引测试"></a>无索引测试</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hadoop</span> jar hadoop-mapreduce-examples-<span class="number">2</span>.<span class="number">6</span>.<span class="number">0</span>-cdh5.<span class="number">16</span>.<span class="number">2</span>.jar wordcount \</span><br><span class="line">	-Dmapreduce.map.output.compress=<span class="literal">true</span> \</span><br><span class="line">	-Dmapreduce.map.output.compress.codec=com.hadoop.compression.lzo.LzopCodec \</span><br><span class="line">	-Dmapreduce.output.fileoutputformat.compress=<span class="literal">true</span> \</span><br><span class="line">	-Dmapreduce.output.fileoutputformat.compress.codec=com.hadoop.compression.lzo.LzopCodec \</span><br><span class="line">	/wc/test.txt.lzo /wc/out</span><br><span class="line">	</span><br><span class="line"><span class="number">20</span>/<span class="number">04</span>/<span class="number">10</span> <span class="number">17</span>:<span class="number">39</span>:<span class="number">51</span> INFO mapreduce.JobSubmitter: number of splits:<span class="number">1</span></span><br></pre></td></tr></table></figure>



<h2 id="有索引测试"><a href="#有索引测试" class="headerlink" title="有索引测试"></a>有索引测试</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hadoop</span> jar hadoop-lzo-<span class="number">0</span>.<span class="number">4</span>.<span class="number">21</span>-SNAPSHOT.jar com.hadoop.compression.lzo.LzoIndexer /wc/test.txt.lzo</span><br><span class="line"></span><br><span class="line">hadoop jar hadoop-mapreduce-examples-<span class="number">2</span>.<span class="number">6</span>.<span class="number">0</span>-cdh5.<span class="number">16</span>.<span class="number">2</span>.jar wordcount \</span><br><span class="line">	-Dmapreduce.job.inputformat.class=com.hadoop.mapreduce.LzoTextInputFormat \</span><br><span class="line">	-Dmapreduce.map.output.compress=<span class="literal">true</span> \</span><br><span class="line">	-Dmapreduce.map.output.compress.codec=com.hadoop.compression.lzo.LzopCodec \</span><br><span class="line">	-Dmapreduce.output.fileoutputformat.compress=<span class="literal">true</span> \</span><br><span class="line">	-Dmapreduce.output.fileoutputformat.compress.codec=com.hadoop.compression.lzo.LzopCodec \</span><br><span class="line">	/wc/test.txt.lzo /wc/out</span><br><span class="line">	</span><br><span class="line"><span class="number">20</span>/<span class="number">04</span>/<span class="number">10</span> <span class="number">18</span>:<span class="number">18</span>:<span class="number">46</span> INFO input.FileInputFormat: Total input paths to process : <span class="number">1</span></span><br><span class="line"><span class="number">20</span>/<span class="number">04</span>/<span class="number">10</span> <span class="number">18</span>:<span class="number">18</span>:<span class="number">46</span> INFO mapreduce.JobSubmitter: number of splits:<span class="number">4</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>lzo</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop之har</title>
    <url>/2020/04/08/77.hadoop%E4%B9%8Bhar/</url>
    <content><![CDATA[<p>官方文档：<a href="https://hadoop.apache.org/docs/current/hadoop-archives/HadoopArchives.html" target="_blank" rel="noopener">https://hadoop.apache.org/docs/current/hadoop-archives/HadoopArchives.html</a></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>hadoop Archive是一个高效地将小文件放入HDFS块中的文件存档文件格式，它能够将多个小文件打包成一个后缀为.har文件，这样减少namenode内存使用的同时，仍然允许对文件进行透明的访问。</p>
<p>Hadoop存档是特殊格式的存档。 Hadoop归档文件映射到文件系统目录。 Hadoop归档文件始终具有* .har扩展名。 Hadoop存档目录包含元数据（以_index和_masterindex的形式）和数据（part- *）文件。 _index文件包含作为归档文件一部分的文件名以及这些文件内的位置。</p>
<a id="more"></a>

<h1 id="如何创建归档？"><a href="#如何创建归档？" class="headerlink" title="如何创建归档？"></a>如何创建归档？</h1><p>用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop archive -archiveName name -p &lt;parent&gt; [-r &lt;replication factor&gt;] &lt;src&gt;* &lt;dest&gt;</span><br></pre></td></tr></table></figure>

<p>-archiveName是您要创建的档案的名称,例如foo.har。名称应带有* .har扩展名。 </p>
<p>parent参数用于指定文件应归档到的相对路径。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-p &#x2F;foo&#x2F;bar a&#x2F;b&#x2F;c e&#x2F;f&#x2F;g</span><br></pre></td></tr></table></figure>

<p>/foo/bar是父路径，而a/b/c,e/f/g是父路径的相对路径。</p>
<p>-r表示所需的复制因子；如果未指定此可选参数，则将使用3的复制因子</p>
<p>如果您只想归档一个目录/foo/bar，则可以使用以下例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop archive -archiveName zoo.har -p &#x2F;foo&#x2F;bar -r 3 &#x2F;outputdir</span><br></pre></td></tr></table></figure>

<p>如果您指定在加密区域中的源文件，它们将被解密并写入存档。 如果har文件不在加密区域中，则它们将以明文（解密）形式存储。 如果har文件位于加密区域中，它们将以加密形式存储。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>har</tag>
      </tags>
  </entry>
  <entry>
    <title>scala实现break和continue</title>
    <url>/2020/04/07/76.scala%E5%AE%9E%E7%8E%B0break%E5%92%8Ccontinue/</url>
    <content><![CDATA[<p>需要util.control.Breaks._类的辅助</p>
<p>实现break与continue功能，都需要util.control.Breaks._类的辅助。不同的是，将整个循环的逻辑放在breakable方法中，在需要真正跳出循环的时候使用break方法，这样达到了跳出整个循环的目的。而continue功能是将breakable放在循环内，这样可以实现结束本次循环的目的而不是结束整个循环。</p>
<a id="more"></a>

<h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">breaktest</span></span>() = &#123;</span><br><span class="line">    <span class="keyword">val</span> arr = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    breakable &#123;</span><br><span class="line">      arr.foreach &#123; x =&gt;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">3</span>) <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span> println(x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continuetest</span></span>() = &#123;</span><br><span class="line">    <span class="keyword">val</span> arr = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    arr.foreach &#123;</span><br><span class="line">      x =&gt; breakable &#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">4</span>) <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span> println(x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>scala</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop压缩工具对比</title>
    <url>/2020/04/07/75.hadoop%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>文件压缩主要有两个好处，一是减少了存储文件所占空间，另一个就是为数据传输提速。在hadoop大数据的背景下，这两点尤为重要，那么我现在就先来了解下hadoop中的文件压缩。</p>
<a id="more"></a>

<p>hadoop里支持很多种压缩格式，我们看一个表格：</p>
<p><img src="/images/75/1.png" alt="1"></p>
<p>DEFLATE是同时使用了LZ77算法与哈夫曼编码（Huffman Coding）的一个无损数据压缩算法，源代码可以在zlib库中找到。gzip是以DEFLATE算法为基础扩展出来的一种算法。</p>
<p>gzip在时间和空间上的取舍比较折中，bzip2压缩比gzip更有效，但是速度更慢。bzip2的解压速度比它的压缩速度要快。但是和其他压缩格式比又是最慢的，但是压缩效果明显是最好的。snappy和lz4的解压速度比lzo好很多。</p>
<p> splittable表示压缩格式是否可以被分割，也就是说是否支持随即读。压缩数据是否能被mapreduce使用，压缩数据是否能被分割就很关键了。</p>
<p>举个例子，一个未压缩的文件有1GB大小，hdfs默认的block大小是64MB,那么这个文件就会被分为16个block作为mapreduce的输入，每一个单独使用一个map任务。如果这个文件是已经使用gzip压缩的呢，如果分成16个块，每个块做成一个输入，显然是不合适的，因为gzip压缩流的随即读是不可能的。实际上，当mapreduce处理压缩格式的文件的时候它会认识到这是一个gzip的压缩文件，而gzip又不支持随即读，它就会把16个块分给一个map去处理，这里就会有很多非本地处理的map任务，整个过程耗费的时间就会相当长。</p>
<p>lzo压缩格式也会是同样的问题，但是通过使用hadoop lzo库的索引工具以后，lzo就可以支持splittable。bzip2也是支持splittable的。</p>
<p>那么如何选择压缩格式呢？这取决于文件的大小，你使用的压缩工具，下面是几条选择建议，效率由高到低排序：</p>
<p>1.用一些包含了压缩并且支持splittable的文件格式，比如Sequence File，RCFile或者Avro文件，这些文件格式我们之后都会讲到。如果为了快速压缩可以使用lzo，lz4或者snappy压缩格式。</p>
<p>2.使用提供splittable的压缩格式，比如，bzip2和索引后可以支持splittable的lzo。</p>
<p>3.提前把文件分成几个块，每个块单独压缩，这样就无需考虑splittable的问题了</p>
<p>4.不要压缩文件</p>
<p>提示：以不支持splittable的压缩格式存储一个很大的数据文件是不合适的，非本地处理效率会非常之低。</p>
<h2 id="四种常用压缩工具介绍"><a href="#四种常用压缩工具介绍" class="headerlink" title="四种常用压缩工具介绍"></a>四种常用压缩工具介绍</h2><p>1 gzip压缩</p>
<p>优点：压缩率比较高，而且压缩/解压速度也比较快；hadoop本身支持，在应用中处理gzip格式的文件就和直接处理文本一样；有hadoop native库；大部分linux系统都自带gzip命令，使用方便。</p>
<p>缺点：不支持split。</p>
<p>应用场景：当每个文件压缩之后在130M以内的（1个块大小内），都可以考虑用gzip压缩格式。譬如说一天或者一个小时的日志压缩成一个gzip文件，运行mapreduce程序的时候通过多个gzip文件达到并发。hive程序，streaming程序，和java写的mapreduce程序完全和文本处理一样，压缩之后原来的程序不需要做任何修改。</p>
<p>2 lzo压缩</p>
<p>优点：压缩/解压速度也比较快，合理的压缩率；支持split，是hadoop中最流行的压缩格式；支持hadoop native库；可以在linux系统下安装lzop命令，使用方便。</p>
<p>缺点：压缩率比gzip要低一些；hadoop本身不支持，需要安装；在应用中对lzo格式的文件需要做一些特殊处理（为了支持split需要建索引，还需要指定inputformat为lzo格式）。</p>
<p>应用场景：一个很大的文本文件，压缩之后还大于200M以上的可以考虑，而且单个文件越大，lzo优点越明显。</p>
<p>3 snappy压缩</p>
<p>优点：高速压缩速度和合理的压缩率；支持hadoop native库。</p>
<p>缺点：不支持split；压缩率比gzip要低；hadoop本身不支持，需要安装；linux系统下没有对应的命令。</p>
<p>应用场景：当mapreduce作业的map输出的数据比较大的时候，作为map到reduce的中间数据的压缩格式；或者作为一个mapreduce作业的输出和另外一个mapreduce作业的输入。</p>
<p>4 bzip2压缩</p>
<p>优点：支持split；具有很高的压缩率，比gzip压缩率都高；hadoop本身支持，但不支持native；在linux系统下自带bzip2命令，使用方便。</p>
<p>缺点：压缩/解压速度慢；不支持native。</p>
<p>应用场景：适合对速度要求不高，但需要较高的压缩率的时候，可以作为mapreduce作业的输出格式；或者输出之后的数据比较大，处理之后的数据需要压缩存档减少磁盘空间并且以后数据用得比较少的情况；或者对单个很大的文本文件想压缩减少存储空间，同时又需要支持split，而且兼容之前的应用程序（即应用程序不需要修改）的情况。</p>
<p>最后用一个表格比较上述4种压缩格式的特征（优缺点）：</p>
<p><strong>4种压缩格式的特征的比较</strong></p>
<table>
<thead>
<tr>
<th>压缩格式</th>
<th>split</th>
<th>native</th>
<th>压缩率</th>
<th>速度</th>
<th>是否hadoop自带</th>
<th>linux命令</th>
<th>换成压缩格式后，原来的应用程序是否要修改</th>
</tr>
</thead>
<tbody><tr>
<td>gzip</td>
<td>否</td>
<td>是</td>
<td>很高</td>
<td>比较快</td>
<td>是，直接使用</td>
<td>有</td>
<td>和文本处理一样，不需要修改</td>
</tr>
<tr>
<td>lzo</td>
<td>是</td>
<td>是</td>
<td>比较高</td>
<td>很快</td>
<td>否，需要安装</td>
<td>有</td>
<td>需要建索引，还需要指定输入格式</td>
</tr>
<tr>
<td>snappy</td>
<td>否</td>
<td>是</td>
<td>比较高</td>
<td>很快</td>
<td>否，需要安装</td>
<td>没有</td>
<td>和文本处理一样，不需要修改</td>
</tr>
<tr>
<td>bzip2</td>
<td>是</td>
<td>否</td>
<td>最高</td>
<td>慢</td>
<td>是，直接使用</td>
<td>有</td>
<td>和文本处理一样，不需要修改</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hive文件存储格式及数据压缩</title>
    <url>/2020/04/07/74.hive%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h2 id="一、存储格式行存储和列存储"><a href="#一、存储格式行存储和列存储" class="headerlink" title="一、存储格式行存储和列存储"></a>一、存储格式行存储和列存储</h2><ol>
<li>行存储可以理解为一条记录存储一行，通过条件能够查询一整行数据。</li>
<li>列存储，以字段聚集存储，可以理解为相同的字段存储在一起。</li>
</ol>
<a id="more"></a>

<h2 id="二、Hive文件存储格式"><a href="#二、Hive文件存储格式" class="headerlink" title="二、Hive文件存储格式"></a>二、Hive文件存储格式</h2><ol>
<li>TEXTFILE</li>
</ol>
<ul>
<li>Hive数据表的默认格式，存储方式：行存储。</li>
<li>可以使用Gzip压缩算法，但压缩后的文件不支持split</li>
<li>在反序列化过程中，必须逐个字符判断是不是分隔符和行结束符，因此反序列化开销会比SequenceFile高几十倍。</li>
</ul>
<ol>
<li>SEQUENCEFILE</li>
</ol>
<ul>
<li>压缩数据文件可以节省磁盘空间，但Hadoop中有些原生压缩文件的缺点之一就是不支持分割。支持分割的文件可以并行的有多个mapper程序处理大数据文件，大多数文件不支持可分割是因为这些文件只能从头开始读。Sequence File是可分割的文件格式，支持Hadoop的block级压缩。</li>
<li>Hadoop API提供的一种二进制文件，以key-value的形式序列化到文件中。存储方式：行存储。</li>
<li>sequencefile支持三种压缩选择：NONE，RECORD，BLOCK。Record压缩率低，RECORD是默认选项，通常BLOCK会带来较RECORD更好的压缩性能。</li>
<li>优势是文件和hadoop api中的MapFile是相互兼容的</li>
</ul>
<ol>
<li>RCFILE<br>存储方式：数据按行分块，每块按列存储。结合了行存储和列存储的优点：</li>
</ol>
<ul>
<li>RCFile 保证同一行的数据位于同一节点，因此元组重构的开销很低</li>
<li>像列存储一样，RCFile 能够利用列维度的数据压缩，并且能跳过不必要的列读取</li>
<li>数据追加：RCFile不支持任意方式的数据写操作，仅提供一种追加接口，这是因为底层的 HDFS当前仅仅支持数据追加写文件尾部。</li>
<li>行组大小：行组变大有助于提高数据压缩的效率，但是可能会损害数据的读取性能，因为这样增加了 Lazy 解压性能的消耗。而且行组变大会占用更多的内存，这会影响并发执行的其他MR作业。 考虑到存储空间和查询效率两个方面，Facebook 选择 4MB 作为默认的行组大小，当然也允许用户自行选择参数进行配置。</li>
</ul>
<ol>
<li>ORCFILE<br>存储方式：数据按行分块，每块按照列存储。<br>压缩快，快速列存取。效率比rcfile高，是rcfile的改良版本。</li>
</ol>
<h2 id="三、创建语句和压缩"><a href="#三、创建语句和压缩" class="headerlink" title="三、创建语句和压缩"></a>三、创建语句和压缩</h2><h3 id="3-1、压缩工具的对比"><a href="#3-1、压缩工具的对比" class="headerlink" title="3.1、压缩工具的对比:"></a>3.1、压缩工具的对比:</h3><p><img src="/images/74/1.png" alt="1"></p>
<p>Hadoop编码/解码器方式，如下表所示</p>
<table>
<thead>
<tr>
<th>压缩格式</th>
<th>对应的编码/解码</th>
</tr>
</thead>
<tbody><tr>
<td>DEFAULT</td>
<td>org.apache.hadoop.io.compress.DefaultCodec</td>
</tr>
<tr>
<td>Gzip</td>
<td>org.apache.hadoop.io.compress.GzipCodec</td>
</tr>
<tr>
<td>Bzip</td>
<td>org.apache.hadoop.io.compress.BzipCodec</td>
</tr>
<tr>
<td>Snappy</td>
<td>org.apache.hadoop.io.compress.SnappyCodec</td>
</tr>
<tr>
<td>Lzo</td>
<td>org.apache.hadoop.io.compress.LzopCodec</td>
</tr>
</tbody></table>
<h3 id="3-2、压缩设置"><a href="#3-2、压缩设置" class="headerlink" title="3.2、压缩设置"></a>3.2、压缩设置</h3><p>HiveQL语句最终都将转换成为hadoop中的MapReduce job,而MapReduce job可以有对处理的数据进行压缩。</p>
<p><strong>Hive中间数据压缩</strong></p>
<p>hive.exec.compress.intermediate：默认为false，设置true为激活中间数据压缩功能，就是MapReduce的shuffle阶段对mapper产生中间压缩，在这个阶段，优先选择一个低CPU开销：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set hive.exec.compress.intermediate&#x3D;true</span><br><span class="line">set mapred.map.output.compression.codec&#x3D; org.apache.hadoop.io.compress.SnappyCodec</span><br><span class="line">set mapred.map.output.compression.codec&#x3D;com.hadoop.compression.lzo.LzoCodec</span><br></pre></td></tr></table></figure>

<p><strong>最终输出结果压缩</strong><br>hive.exec.compress.output：用户可以对最终生成的Hive表的数据通常也需要压缩。该参数控制这一功能的激活与禁用，设置为true来声明将结果文件进行压缩。</p>
<p>mapred.output.compression.codec：将hive.exec.compress.output参数设置成true后，然后选择一个合适的编解码器，如选择SnappyCodec。设置如下（两种压缩的编写方式是一样的）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set hive.exec.compress.output&#x3D;true </span><br><span class="line">set mapred.output.compression.codec&#x3D;org.apache.hadoop.io.compress.SnappyCodec</span><br><span class="line">或者</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">set mapred.output.compress&#x3D;true</span><br><span class="line">set mapred.output.compression.codec&#x3D;org.apache.hadoop.io.compress.LzopCodec</span><br></pre></td></tr></table></figure>

<h3 id="3-3、-四种格式的存储和压缩设置-客户端设置压缩格式"><a href="#3-3、-四种格式的存储和压缩设置-客户端设置压缩格式" class="headerlink" title="3.3、 四种格式的存储和压缩设置(客户端设置压缩格式)"></a>3.3、 四种格式的存储和压缩设置(客户端设置压缩格式)</h3><p><strong>1. TEXTFILE</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table if not exists textfile_table(</span><br><span class="line">site string,</span><br><span class="line">url  string,</span><br><span class="line">pv   bigint,</span><br><span class="line">label string)</span><br><span class="line">row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;</span><br><span class="line">stored as textfile;</span><br><span class="line">插入数据操作：</span><br><span class="line">set hive.exec.compress.output&#x3D;true; &#x2F;&#x2F;输出结果压缩开启  </span><br><span class="line">set mapred.output.compress&#x3D;true;  </span><br><span class="line">set mapred.output.compression.codec&#x3D;org.apache.hadoop.io.compress.GzipCodec;  </span><br><span class="line">set io.compression.codecs&#x3D;org.apache.hadoop.io.compress.GzipCodec;  &#x2F;&#x2F;压缩和解压缩编码类列表，用逗号分隔，将所用到解压和压缩码设置其中</span><br><span class="line">insert overwrite table textfile_table select * from testfile_table;</span><br></pre></td></tr></table></figure>

<p><strong>2. SEQUENCEFILE</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table if not exists seqfile_table(</span><br><span class="line">site string,</span><br><span class="line">url  string,</span><br><span class="line">pv   bigint,</span><br><span class="line">label string)</span><br><span class="line">row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;</span><br><span class="line">stored as sequencefile;</span><br><span class="line">插入数据操作：</span><br><span class="line">set hive.exec.compress.output&#x3D;true;  </span><br><span class="line">set mapred.output.compress&#x3D;true;  </span><br><span class="line">set mapred.output.compression.codec&#x3D;org.apache.hadoop.io.compress.GzipCodec;  </span><br><span class="line">set io.compression.codecs&#x3D;org.apache.hadoop.io.compress.GzipCodec;  </span><br><span class="line">SET mapred.output.compression.type&#x3D;BLOCK;</span><br><span class="line">insert overwrite table seqfile_table select * from testfile_table;</span><br></pre></td></tr></table></figure>

<p><strong>3. RCFILE</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table if not exists rcfile_table(</span><br><span class="line">site string,</span><br><span class="line">url  string,</span><br><span class="line">pv   bigint,</span><br><span class="line">label string)</span><br><span class="line">row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;</span><br><span class="line">stored as rcfile;</span><br><span class="line">插入数据操作：</span><br><span class="line">set hive.exec.compress.output&#x3D;true;  </span><br><span class="line">set mapred.output.compress&#x3D;true;  </span><br><span class="line">set mapred.output.compression.codec&#x3D;org.apache.hadoop.io.compress.GzipCodec;  </span><br><span class="line">set io.compression.codecs&#x3D;org.apache.hadoop.io.compress.GzipCodec;  </span><br><span class="line">insert overwrite table rcfile_table select * from testfile_table;</span><br></pre></td></tr></table></figure>

<p><strong>4. ORCFILE</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table if not exists orcfile_table(</span><br><span class="line">site string,</span><br><span class="line">url  string,</span><br><span class="line">pv   bigint,</span><br><span class="line">label string)</span><br><span class="line">row format delimited</span><br><span class="line">fields terminated by &#39;\t&#39;</span><br><span class="line">stored as orc;</span><br><span class="line">插入数据操作：</span><br><span class="line">set hive.exec.compress.output&#x3D;true;  </span><br><span class="line">set mapred.output.compress&#x3D;true;  </span><br><span class="line">set mapred.output.compression.codec&#x3D;org.apache.hadoop.io.compress.GzipCodec;  </span><br><span class="line">set io.compression.codecs&#x3D;org.apache.hadoop.io.compress.GzipCodec;  </span><br><span class="line">insert overwrite table orcfile_table select * from testfile_table;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>TextFile默认格式，加载速度最快，可以采用Gzip进行压缩，压缩后的文件无法split，无法并行处理了。</li>
<li>SequenceFile压缩率最低，查询速度一般，将数据存放到sequenceFile格式的hive表中，这时数据就会压缩存储。三种压缩格式NONE，RECORD，BLOCK。是可分割的文件格式。</li>
<li>RCfile压缩率最高，查询速度最快，数据加载最慢。</li>
<li>相比TEXTFILE和SEQUENCEFILE，RCFILE由于列式存储方式，数据加载时性能消耗较大，但是具有较好的压缩比和查询响应。数据仓库的特点是一次写入、多次读取，因此，整体来看，RCFILE相比其余两种格式具有较明显的优势。</li>
<li>在hive中使用压缩需要灵活的方式，如果是数据源的话，采用RCFile+bz或RCFile+gz的方式，这样可以很大程度上节省磁盘空间；而在计算的过程中，为了不影响执行的速度，可以浪费一点磁盘空间，建议采用RCFile+snappy的方式，这样可以整体提升hive的执行速度。至于lzo的方式，也可以在计算过程中使用，只不过综合考虑（速度和压缩比）还是考虑snappy适宜。</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>azkaban调度spark</title>
    <url>/2020/04/06/73.azkaban%E8%B0%83%E5%BA%A6spark/</url>
    <content><![CDATA[<p>源码配置：<a href="https://github.com/azkaban/azkaban/blob/master/az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/SparkJobArg.java" target="_blank" rel="noopener">https://github.com/azkaban/azkaban/blob/master/az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/SparkJobArg.java</a></p>
<p>google和官方文档都没有说明spark的调度方法，因此这个需要自己从源码处自己研究怎么写</p>
<a id="more"></a>

<h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><p>1.plugins/jobtypes下几个文件</p>
<p>commonprivate.properties和common.properties内的hadoop.home和spark.home配置自己对应的根目录</p>
<p>spark文件夹内的2个配置文件</p>
<p>plugin.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">queue&#x3D;default</span><br></pre></td></tr></table></figure>

<p>private.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jobtype.class&#x3D;azkaban.jobtype.HadoopSparkJob</span><br><span class="line">jobtype.classpath&#x3D;hadoop.classpath:&#123;spark.home&#125;&#x2F;conf:$&#123;spark.home&#125;&#x2F;lib&#x2F;*</span><br></pre></td></tr></table></figure>



<p>2.conf/azkaban.properties增加一个配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">azkaban.webserver.url&#x3D;https:&#x2F;&#x2F;hadoop000:8666</span><br></pre></td></tr></table></figure>



<h2 id="zip压缩包内容"><a href="#zip压缩包内容" class="headerlink" title="zip压缩包内容"></a>zip压缩包内容</h2><p>basic.flow</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config:</span><br><span class="line">    user.to.proxy: pearfl</span><br><span class="line">nodes:</span><br><span class="line">  - name: sparkwc</span><br><span class="line">    type: spark</span><br><span class="line">    config:</span><br><span class="line">      class: com.data.spark.wc.SparkWC</span><br><span class="line">      master: yarn</span><br><span class="line">      deploy-mode: client</span><br><span class="line">      executor-memory: 512M</span><br><span class="line">      driver-memory: 512M</span><br><span class="line">      conf.spark.testing.memory: 471859200</span><br><span class="line">      execution-jar: data-spark-utils-1.0.jar</span><br><span class="line">      jars: data-spark-core-1.0.jar</span><br><span class="line">      params: hdfs:&#x2F;&#x2F;hadoop000:8020&#x2F;wc&#x2F;test.txt hdfs:&#x2F;&#x2F;hadoop000:8020&#x2F;wc&#x2F;out</span><br></pre></td></tr></table></figure>



<p>flow20.project</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">azkaban-flow-version: 2.0</span><br></pre></td></tr></table></figure>



<p>data-spark-core-1.0.jar和data-spark-utils-1.0.jar</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
        <tag>azkaban</tag>
      </tags>
  </entry>
  <entry>
    <title>spark序列化</title>
    <url>/2020/04/06/72.spark%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>官方文档：<a href="https://spark.apache.org/docs/latest/tuning.html" target="_blank" rel="noopener">https://spark.apache.org/docs/latest/tuning.html</a></p>
<p>序列化在分布式应用的性能中扮演着重要的角色。格式化对象缓慢，或者消耗大量的字节格式化，会大大降低计算性能。通常这是在spark应用中第一件需要优化的事情。Spark的目标是在便利与性能中取得平衡，所以提供2种序列化的选择。</p>
<a id="more"></a>

<h2 id="Java-serialization"><a href="#Java-serialization" class="headerlink" title="Java serialization"></a>Java serialization</h2><p>在默认情况下，Spark会使用Java的ObjectOutputStream框架对对象进行序列化，并且可以与任何实现java.io.Serializable的类一起工作。您还可以通过扩展java.io.Externalizable来更紧密地控制序列化的性能。Java序列化是灵活的，但通常相当慢，并且会导致许多类的大型序列化格式。</p>
<h2 id="Kryo-serialization"><a href="#Kryo-serialization" class="headerlink" title="Kryo serialization"></a>Kryo serialization</h2><p>Spark还可以使用Kryo库（版本4）来更快地序列化对象。Kryo比Java串行化（通常多达10倍）要快得多，也更紧凑，但是不支持所有可串行化类型，并且要求您提前注册您将在程序中使用的类，以获得最佳性能。</p>
<p>您可以通过使用SparkConf初始化作业并调用conf.set（“ spark.serializer”，“ org.apache.spark.serializer.KryoSerializer”）来切换为使用Kryo。</p>
<p>要向Kryo注册您自己的自定义类，请使用registerKryoClasses方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val conf &#x3D; new SparkConf().setMaster(...).setAppName(...)</span><br><span class="line">conf.registerKryoClasses(Array(classOf[MyClass1], classOf[MyClass2]))</span><br><span class="line">val sc &#x3D; new SparkContext(conf)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop本地运行的坑</title>
    <url>/2020/04/06/71.hadoop%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>1.解决org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String;I)Z</p>
<p>winutils.exe和hadoop.dll匹配对应的版本，放入bin下即可，不需要放c盘系统位置，反而会导致失败……</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hive行列转换</title>
    <url>/2020/04/05/70.hive%E8%A1%8C%E5%88%97%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="hive-行列转换"><a href="#hive-行列转换" class="headerlink" title="hive 行列转换"></a>hive 行列转换</h1><h2 id="列转行"><a href="#列转行" class="headerlink" title="列转行"></a>列转行</h2><p>使用函数：lateral view explode(split(column, ‘,’)) num</p>
<p>eg: 如表：t_row_to_column_tmp 数据如下，对tag列进行拆分</p>
<p><img src="/images/70/1.png" alt="1"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL代码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,tag,tag_new</span><br><span class="line"><span class="keyword">from</span> t_row_to_column_tmp</span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(<span class="keyword">split</span>(tag, <span class="string">','</span>)) <span class="keyword">num</span> <span class="keyword">as</span> tag_new</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">212022894</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/images/70/2.png" alt="2"></p>
<h2 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h2><p>使用函数：concat_ws(‘,’,collect_set(column))  </p>
<p>说明：collect_list 不去重，collect_set 去重。 column 的数据类型要求是 string</p>
<p>eg：如表：t_column_to_row ，根据id，对tag_new 进行合并</p>
<p><img src="/images/70/3.png" alt="3"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL代码1：</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,</span><br><span class="line"><span class="keyword">concat_ws</span>(<span class="string">','</span>,collect_set(tag_new)) <span class="keyword">as</span> tag_col</span><br><span class="line"><span class="keyword">from</span> t_column_to_row</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/images/70/4.png" alt="4"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL代码2：</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,</span><br><span class="line"><span class="keyword">concat_ws</span>(<span class="string">','</span>,collect_list(tag_new)) <span class="keyword">as</span> tag_col</span><br><span class="line"><span class="keyword">from</span> t_column_to_row</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/images/70/5.png" alt="5"></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>spark调优总结图</title>
    <url>/2020/04/05/69.spark%E8%B0%83%E4%BC%98%E6%80%BB%E7%BB%93%E5%9B%BE/</url>
    <content><![CDATA[<p>spark调优总结图</p>
<a id="more"></a>



<p><img src="/images/69/1.png" alt="1"></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>spark各个版本特性</title>
    <url>/2020/04/03/68.spark%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="各个版本特性（官方文档）"><a href="#各个版本特性（官方文档）" class="headerlink" title="各个版本特性（官方文档）"></a>各个版本特性（官方文档）</h1><p><a href="https://spark.apache.org/releases/" target="_blank" rel="noopener">https://spark.apache.org/releases/</a><br><a href="https://spark.apache.org/news/index.html" target="_blank" rel="noopener">https://spark.apache.org/news/index.html</a></p>
<a id="more"></a>

<h2 id="Spark-0-6-x"><a href="#Spark-0-6-x" class="headerlink" title="Spark 0.6.x"></a>Spark 0.6.x</h2><ul>
<li>Standalone部署模式进行了简化</li>
</ul>
<h2 id="Spark-0-7"><a href="#Spark-0-7" class="headerlink" title="Spark 0.7"></a>Spark 0.7</h2><ul>
<li>Python API</li>
<li>增加Spark Streaming</li>
<li>支持maven build</li>
</ul>
<h2 id="Spark-0-8"><a href="#Spark-0-8" class="headerlink" title="Spark 0.8"></a>Spark 0.8</h2><ul>
<li>支持MLlib库</li>
<li>hadoop yarn正式支持</li>
</ul>
<h2 id="Spark-0-9"><a href="#Spark-0-9" class="headerlink" title="Spark 0.9"></a>Spark 0.9</h2><ul>
<li><p>用SparkConf类来配置SparkContext</p>
</li>
<li><p>spark streaming正式版发布</p>
</li>
<li><p>GraphX的测试版出现</p>
</li>
<li><p>mllib库升级，支持python</p>
</li>
<li><p>core升级</p>
</li>
</ul>
<h2 id="Spark-1-0"><a href="#Spark-1-0" class="headerlink" title="Spark 1.0"></a>Spark 1.0</h2><ul>
<li>提出spark-submit脚本和history-server</li>
<li>yarn安全模式整合</li>
<li>spark sql被提出</li>
<li>java8的支持</li>
</ul>
<h2 id="Spark-1-1"><a href="#Spark-1-1" class="headerlink" title="Spark 1.1"></a>Spark 1.1</h2><ul>
<li>spark增强了磁盘（非内存）的排序的速率</li>
</ul>
<h2 id="Spark-1-2"><a href="#Spark-1-2" class="headerlink" title="Spark 1.2"></a>Spark 1.2</h2><ul>
<li>shuffle大升级</li>
<li>Graphx正式版发布</li>
</ul>
<h2 id="Spark-1-3"><a href="#Spark-1-3" class="headerlink" title="Spark 1.3"></a>Spark 1.3</h2><ul>
<li>新增DataFrame API </li>
<li>Spark SQL正式脱离alpha版本</li>
</ul>
<h2 id="Spark-1-4"><a href="#Spark-1-4" class="headerlink" title="Spark 1.4"></a>Spark 1.4</h2><ul>
<li>正式引入SparkR</li>
<li>Spark Core为应用提供了REST API来获取各种信息</li>
</ul>
<h2 id="Spark-1-5"><a href="#Spark-1-5" class="headerlink" title="Spark 1.5"></a>Spark 1.5</h2><ul>
<li>Hive支持</li>
</ul>
<h2 id="Spark-1-6"><a href="#Spark-1-6" class="headerlink" title="Spark 1.6"></a>Spark 1.6</h2><ul>
<li>新增Dataset API</li>
</ul>
<h2 id="Spark-2-0"><a href="#Spark-2-0" class="headerlink" title="Spark 2.0"></a>Spark 2.0</h2><ul>
<li>用sparksession实现hivecontext和sqlcontext统一</li>
<li>合并dataframe和datasets</li>
</ul>
<h2 id="Spark-2-1"><a href="#Spark-2-1" class="headerlink" title="Spark 2.1"></a>Spark 2.1</h2><ul>
<li>提升ORC格式文件的读写性能</li>
</ul>
<h2 id="Spark-2-2"><a href="#Spark-2-2" class="headerlink" title="Spark 2.2"></a>Spark 2.2</h2><ul>
<li>Structured Streaming的生产环境支持已经就绪</li>
</ul>
<h2 id="Spark-2-3"><a href="#Spark-2-3" class="headerlink" title="Spark 2.3"></a>Spark 2.3</h2><ul>
<li>Structured Streaming 引入了低延迟的连续处理</li>
<li>支持 stream-to-stream joins</li>
</ul>
<h2 id="Spark-2-4"><a href="#Spark-2-4" class="headerlink" title="Spark 2.4"></a>Spark 2.4</h2><ul>
<li>Scala 2.12</li>
<li>添加了35个高阶函数</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA导入spark源码并编译的一大堆坑.md</title>
    <url>/2020/03/29/67.IDEA%E5%AF%BC%E5%85%A5spark%E6%BA%90%E7%A0%81%E5%B9%B6%E7%BC%96%E8%AF%91%E7%9A%84%E4%B8%80%E5%A4%A7%E5%A0%86%E5%9D%91/</url>
    <content><![CDATA[<p>IDEA：2019.3.3版本</p>
<p>spark：2.4.5</p>
<p>maven：3.6.3</p>
<p>scala：2.12.10</p>
<p>jdk：1.8</p>
<p>接下来让我们一起来进行惊险刺激的spark源码导入IDEA的冒险吧</p>
<a id="more"></a>

<h1 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h1><p>官方网站：<a href="http://spark.apache.org/" target="_blank" rel="noopener">http://spark.apache.org/</a></p>
<p>github拉取同样也可以</p>
<p>下载好后解压成文件夹，用IDEA将其导入，等待依赖下载完成</p>
<h2 id="maven的settings-xml配置问题"><a href="#maven的settings-xml配置问题" class="headerlink" title="maven的settings.xml配置问题"></a>maven的settings.xml配置问题</h2><p>一定要改源，不然会下非常久</p>
<p>这里给个样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">Licensed to the Apache Software Foundation (ASF) under one</span><br><span class="line">or more contributor license agreements.  See the NOTICE file</span><br><span class="line">distributed with this work for additional information</span><br><span class="line">regarding copyright ownership.  The ASF licenses this file</span><br><span class="line">to you under the Apache License, Version 2.0 (the</span><br><span class="line">&quot;License&quot;); you may not use this file except in compliance</span><br><span class="line">with the License.  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0</span><br><span class="line"></span><br><span class="line">Unless required by applicable law or agreed to in writing,</span><br><span class="line">software distributed under the License is distributed on an</span><br><span class="line">&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span><br><span class="line">KIND, either express or implied.  See the License for the</span><br><span class="line">specific language governing permissions and limitations</span><br><span class="line">under the License.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line"> | This is the configuration file for Maven. It can be specified at two levels:</span><br><span class="line"> |</span><br><span class="line"> |  1. User Level. This settings.xml file provides configuration for a single user,</span><br><span class="line"> |                 and is normally provided in $&#123;user.home&#125;&#x2F;.m2&#x2F;settings.xml.</span><br><span class="line"> |</span><br><span class="line"> |                 NOTE: This location can be overridden with the CLI option:</span><br><span class="line"> |</span><br><span class="line"> |                 -s &#x2F;path&#x2F;to&#x2F;user&#x2F;settings.xml</span><br><span class="line"> |</span><br><span class="line"> |  2. Global Level. This settings.xml file provides configuration for all Maven</span><br><span class="line"> |                 users on a machine (assuming they&#39;re all using the same Maven</span><br><span class="line"> |                 installation). It&#39;s normally provided in</span><br><span class="line"> |                 $&#123;maven.conf&#125;&#x2F;settings.xml.</span><br><span class="line"> |</span><br><span class="line"> |                 NOTE: This location can be overridden with the CLI option:</span><br><span class="line"> |</span><br><span class="line"> |                 -gs &#x2F;path&#x2F;to&#x2F;global&#x2F;settings.xml</span><br><span class="line"> |</span><br><span class="line"> | The sections in this sample file are intended to give you a running start at</span><br><span class="line"> | getting the most out of your Maven installation. Where appropriate, the default</span><br><span class="line"> | values (values used when the setting is not specified) are provided.</span><br><span class="line"> |</span><br><span class="line"> |--&gt;</span><br><span class="line">&lt;settings xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0&quot;</span><br><span class="line">          xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">          xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;settings-1.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;!-- localRepository</span><br><span class="line">   | The path to the local repository maven will use to store artifacts.</span><br><span class="line">   |</span><br><span class="line">   | Default: $&#123;user.home&#125;&#x2F;.m2&#x2F;repository</span><br><span class="line">  &lt;localRepository&gt;&#x2F;path&#x2F;to&#x2F;local&#x2F;repo&lt;&#x2F;localRepository&gt;</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;localRepository&gt;F:\\software\\maven_repository&lt;&#x2F;localRepository&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- interactiveMode</span><br><span class="line">   | This will determine whether maven prompts you when it needs input. If set to false,</span><br><span class="line">   | maven will use a sensible default value, perhaps based on some other setting, for</span><br><span class="line">   | the parameter in question.</span><br><span class="line">   |</span><br><span class="line">   | Default: true</span><br><span class="line">  &lt;interactiveMode&gt;true&lt;&#x2F;interactiveMode&gt;</span><br><span class="line">  --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- offline</span><br><span class="line">   | Determines whether maven should attempt to connect to the network when executing a build.</span><br><span class="line">   | This will have an effect on artifact downloads, artifact deployment, and others.</span><br><span class="line">   |</span><br><span class="line">   | Default: false</span><br><span class="line">  &lt;offline&gt;false&lt;&#x2F;offline&gt;</span><br><span class="line">  --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- pluginGroups</span><br><span class="line">   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.</span><br><span class="line">   | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers</span><br><span class="line">   | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list.</span><br><span class="line">   |--&gt;</span><br><span class="line">  &lt;pluginGroups&gt;</span><br><span class="line">    &lt;!-- pluginGroup</span><br><span class="line">     | Specifies a further group identifier to use for plugin lookup.</span><br><span class="line">    &lt;pluginGroup&gt;com.your.plugins&lt;&#x2F;pluginGroup&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">  &lt;&#x2F;pluginGroups&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- proxies</span><br><span class="line">   | This is a list of proxies which can be used on this machine to connect to the network.</span><br><span class="line">   | Unless otherwise specified (by system property or command-line switch), the first proxy</span><br><span class="line">   | specification in this list marked as active will be used.</span><br><span class="line">   |--&gt;</span><br><span class="line">  &lt;proxies&gt;</span><br><span class="line">    &lt;!-- proxy</span><br><span class="line">     | Specification for one proxy, to be used in connecting to the network.</span><br><span class="line">     |</span><br><span class="line">    &lt;proxy&gt;</span><br><span class="line">      &lt;id&gt;optional&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;active&gt;true&lt;&#x2F;active&gt;</span><br><span class="line">      &lt;protocol&gt;http&lt;&#x2F;protocol&gt;</span><br><span class="line">      &lt;username&gt;proxyuser&lt;&#x2F;username&gt;</span><br><span class="line">      &lt;password&gt;proxypass&lt;&#x2F;password&gt;</span><br><span class="line">      &lt;host&gt;proxy.host.net&lt;&#x2F;host&gt;</span><br><span class="line">      &lt;port&gt;80&lt;&#x2F;port&gt;</span><br><span class="line">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;&#x2F;nonProxyHosts&gt;</span><br><span class="line">    &lt;&#x2F;proxy&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">  &lt;&#x2F;proxies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- servers</span><br><span class="line">   | This is a list of authentication profiles, keyed by the server-id used within the system.</span><br><span class="line">   | Authentication profiles can be used whenever maven must make a connection to a remote server.</span><br><span class="line">   |--&gt;</span><br><span class="line">  &lt;servers&gt;</span><br><span class="line">    &lt;!-- server</span><br><span class="line">     | Specifies the authentication information to use when connecting to a particular server, identified by</span><br><span class="line">     | a unique name within the system (referred to by the &#39;id&#39; attribute below).</span><br><span class="line">     |</span><br><span class="line">     | NOTE: You should either specify username&#x2F;password OR privateKey&#x2F;passphrase, since these pairings are</span><br><span class="line">     |       used together.</span><br><span class="line">     |</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">      &lt;id&gt;deploymentRepo&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;username&gt;repouser&lt;&#x2F;username&gt;</span><br><span class="line">      &lt;password&gt;repopwd&lt;&#x2F;password&gt;</span><br><span class="line">    &lt;&#x2F;server&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Another sample, using keys to authenticate.</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">      &lt;id&gt;siteServer&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;privateKey&gt;&#x2F;path&#x2F;to&#x2F;private&#x2F;key&lt;&#x2F;privateKey&gt;</span><br><span class="line">      &lt;passphrase&gt;optional; leave empty if not used.&lt;&#x2F;passphrase&gt;</span><br><span class="line">    &lt;&#x2F;server&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">  &lt;&#x2F;servers&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- mirrors</span><br><span class="line">   | This is a list of mirrors to be used in downloading artifacts from remote repositories.</span><br><span class="line">   |</span><br><span class="line">   | It works like this: a POM may declare a repository to use in resolving certain artifacts.</span><br><span class="line">   | However, this repository may have problems with heavy traffic at times, so people have mirrored</span><br><span class="line">   | it to several places.</span><br><span class="line">   |</span><br><span class="line">   | That repository definition will have a unique id, so we can create a mirror reference for that</span><br><span class="line">   | repository, to be used as an alternate download site. The mirror site will be the preferred</span><br><span class="line">   | server for that repository.</span><br><span class="line">   |--&gt;</span><br><span class="line">  &lt;mirrors&gt;</span><br><span class="line">    &lt;!-- mirror</span><br><span class="line">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span><br><span class="line">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span><br><span class="line">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span><br><span class="line">     |</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;mirrorId&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;repositoryId&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;Human Readable Name for this Mirror.&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;my.repository.com&#x2F;repo&#x2F;path&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;!-- &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;central&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt; --&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;nexus-aliyun&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;nexus-aliyun&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central,!jeecg,!jee-snapshots&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;!--&lt;mirrorOf&gt;*,!jeecg,!jee-snapshots,!mapr-releases,!cloudera,!central-repo&lt;&#x2F;mirrorOf&gt;--&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;mapr-public&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;mapr-releases&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;mapr-public&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;mapr-releases&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;central-repo&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central-repo&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;central-repo&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;cloudera&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;cloudera&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;cloudera-repo&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;repository.cloudera.com&#x2F;artifactory&#x2F;cloudera-repos&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">  &lt;&#x2F;mirrors&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- profiles</span><br><span class="line">   | This is a list of profiles which can be activated in a variety of ways, and which can modify</span><br><span class="line">   | the build process. Profiles provided in the settings.xml are intended to provide local machine-</span><br><span class="line">   | specific paths and repository locations which allow the build to work in the local environment.</span><br><span class="line">   |</span><br><span class="line">   | For example, if you have an integration testing plugin - like cactus - that needs to know where</span><br><span class="line">   | your Tomcat instance is installed, you can provide a variable here such that the variable is</span><br><span class="line">   | dereferenced during the build process to configure the cactus plugin.</span><br><span class="line">   |</span><br><span class="line">   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles</span><br><span class="line">   | section of this document (settings.xml) - will be discussed later. Another way essentially</span><br><span class="line">   | relies on the detection of a system property, either matching a particular value for the property,</span><br><span class="line">   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a</span><br><span class="line">   | value of &#39;1.4&#39; might activate a profile when the build is executed on a JDK version of &#39;1.4.2_07&#39;.</span><br><span class="line">   | Finally, the list of active profiles can be specified directly from the command line.</span><br><span class="line">   |</span><br><span class="line">   | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact</span><br><span class="line">   |       repositories, plugin repositories, and free-form properties to be used as configuration</span><br><span class="line">   |       variables for plugins in the POM.</span><br><span class="line">   |</span><br><span class="line">   |--&gt;</span><br><span class="line">  &lt;profiles&gt;</span><br><span class="line">    &lt;!-- profile</span><br><span class="line">     | Specifies a set of introductions to the build process, to be activated using one or more of the</span><br><span class="line">     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles&#x2F;&gt;</span><br><span class="line">     | or the command line, profiles have to have an ID that is unique.</span><br><span class="line">     |</span><br><span class="line">     | An encouraged best practice for profile identification is to use a consistent naming convention</span><br><span class="line">     | for profiles, such as &#39;env-dev&#39;, &#39;env-test&#39;, &#39;env-production&#39;, &#39;user-jdcasey&#39;, &#39;user-brett&#39;, etc.</span><br><span class="line">     | This will make it more intuitive to understand what the set of introduced profiles is attempting</span><br><span class="line">     | to accomplish, particularly when you only have a list of profile id&#39;s for debug.</span><br><span class="line">     |</span><br><span class="line">     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">      &lt;id&gt;jdk-1.4&lt;&#x2F;id&gt;</span><br><span class="line"></span><br><span class="line">      &lt;activation&gt;</span><br><span class="line">        &lt;jdk&gt;1.4&lt;&#x2F;jdk&gt;</span><br><span class="line">      &lt;&#x2F;activation&gt;</span><br><span class="line"></span><br><span class="line">      &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">          &lt;id&gt;jdk14&lt;&#x2F;id&gt;</span><br><span class="line">          &lt;name&gt;Repository for JDK 1.4 builds&lt;&#x2F;name&gt;</span><br><span class="line">          &lt;url&gt;http:&#x2F;&#x2F;www.myhost.com&#x2F;maven&#x2F;jdk14&lt;&#x2F;url&gt;</span><br><span class="line">          &lt;layout&gt;default&lt;&#x2F;layout&gt;</span><br><span class="line">          &lt;snapshotPolicy&gt;always&lt;&#x2F;snapshotPolicy&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">      &lt;&#x2F;repositories&gt;</span><br><span class="line">    &lt;&#x2F;profile&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">     | Here is another profile, activated by the system property &#39;target-env&#39; with a value of &#39;dev&#39;,</span><br><span class="line">     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration</span><br><span class="line">     | might hypothetically look like:</span><br><span class="line">     |</span><br><span class="line">     | ...</span><br><span class="line">     | &lt;plugin&gt;</span><br><span class="line">     |   &lt;groupId&gt;org.myco.myplugins&lt;&#x2F;groupId&gt;</span><br><span class="line">     |   &lt;artifactId&gt;myplugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">     |</span><br><span class="line">     |   &lt;configuration&gt;</span><br><span class="line">     |     &lt;tomcatLocation&gt;$&#123;tomcatPath&#125;&lt;&#x2F;tomcatLocation&gt;</span><br><span class="line">     |   &lt;&#x2F;configuration&gt;</span><br><span class="line">     | &lt;&#x2F;plugin&gt;</span><br><span class="line">     | ...</span><br><span class="line">     |</span><br><span class="line">     | NOTE: If you just wanted to inject this configuration whenever someone set &#39;target-env&#39; to</span><br><span class="line">     |       anything, you could just leave off the &lt;value&#x2F;&gt; inside the activation-property.</span><br><span class="line">     |</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">      &lt;id&gt;env-dev&lt;&#x2F;id&gt;</span><br><span class="line"></span><br><span class="line">      &lt;activation&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">          &lt;name&gt;target-env&lt;&#x2F;name&gt;</span><br><span class="line">          &lt;value&gt;dev&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">      &lt;&#x2F;activation&gt;</span><br><span class="line"></span><br><span class="line">      &lt;properties&gt;</span><br><span class="line">        &lt;tomcatPath&gt;&#x2F;path&#x2F;to&#x2F;tomcat&#x2F;instance&lt;&#x2F;tomcatPath&gt;</span><br><span class="line">      &lt;&#x2F;properties&gt;</span><br><span class="line">    &lt;&#x2F;profile&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;profile&gt;</span><br><span class="line">      &lt;id&gt;central&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">          &lt;id&gt;aliyun-nexus&lt;&#x2F;id&gt;</span><br><span class="line">          &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">          &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;releases&gt;</span><br><span class="line">          &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">      &lt;&#x2F;repositories&gt;</span><br><span class="line">      &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">          &lt;id&gt;aliyun-nexus&lt;&#x2F;id&gt;</span><br><span class="line">          &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">          &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;releases&gt;</span><br><span class="line">          &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;pluginRepository&gt;</span><br><span class="line">      &lt;&#x2F;pluginRepositories&gt;</span><br><span class="line">    &lt;&#x2F;profile&gt;</span><br><span class="line"></span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">      &lt;id&gt;mapr-releases&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">          &lt;id&gt;mapr-releases&lt;&#x2F;id&gt;</span><br><span class="line">          &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;mapr-public&lt;&#x2F;url&gt;</span><br><span class="line">          &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;releases&gt;</span><br><span class="line">          &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">      &lt;&#x2F;repositories&gt;</span><br><span class="line">      &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">          &lt;id&gt;mapr-releases&lt;&#x2F;id&gt;</span><br><span class="line">          &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;mapr-public&lt;&#x2F;url&gt;</span><br><span class="line">          &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;releases&gt;</span><br><span class="line">          &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;pluginRepository&gt;</span><br><span class="line">      &lt;&#x2F;pluginRepositories&gt;</span><br><span class="line">    &lt;&#x2F;profile&gt;</span><br><span class="line"></span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">      &lt;id&gt;central-repo&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">          &lt;id&gt;central-repo&lt;&#x2F;id&gt;</span><br><span class="line">          &lt;url&gt;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">          &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;releases&gt;</span><br><span class="line">          &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">      &lt;&#x2F;repositories&gt;</span><br><span class="line">      &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">          &lt;id&gt;central-repo&lt;&#x2F;id&gt;</span><br><span class="line">          &lt;url&gt;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">          &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;releases&gt;</span><br><span class="line">          &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;pluginRepository&gt;</span><br><span class="line">      &lt;&#x2F;pluginRepositories&gt;</span><br><span class="line">    &lt;&#x2F;profile&gt;</span><br><span class="line"></span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">      &lt;id&gt;cloudera&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">          &lt;id&gt;cloudera-repo&lt;&#x2F;id&gt;</span><br><span class="line">          &lt;url&gt;https:&#x2F;&#x2F;repository.cloudera.com&#x2F;artifactory&#x2F;cloudera-repos&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">          &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;releases&gt;</span><br><span class="line">          &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">      &lt;&#x2F;repositories&gt;</span><br><span class="line">      &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">          &lt;id&gt;cloudera-repo&lt;&#x2F;id&gt;</span><br><span class="line">          &lt;url&gt;https:&#x2F;&#x2F;repository.cloudera.com&#x2F;artifactory&#x2F;cloudera-repos&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">          &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;releases&gt;</span><br><span class="line">          &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;pluginRepository&gt;</span><br><span class="line">      &lt;&#x2F;pluginRepositories&gt;</span><br><span class="line">    &lt;&#x2F;profile&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;profiles&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- activeProfiles</span><br><span class="line">   | List of profiles that are active for all builds.</span><br><span class="line">   |</span><br><span class="line">  &lt;activeProfiles&gt;</span><br><span class="line">    &lt;activeProfile&gt;alwaysActiveProfile&lt;&#x2F;activeProfile&gt;</span><br><span class="line">    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;&#x2F;activeProfile&gt;</span><br><span class="line">  &lt;&#x2F;activeProfiles&gt;</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;activeProfiles&gt;</span><br><span class="line">    &lt;activeProfile&gt;central&lt;&#x2F;activeProfile&gt;</span><br><span class="line">	&lt;!-- </span><br><span class="line">	&lt;activeProfile&gt;mapr-releases&lt;&#x2F;activeProfile&gt;</span><br><span class="line">	    &lt;activeProfile&gt;cloudera&lt;&#x2F;activeProfile&gt;</span><br><span class="line">		    &lt;activeProfile&gt;central-repo&lt;&#x2F;activeProfile&gt;</span><br><span class="line">&lt;activeProfile&gt;cloudera&lt;&#x2F;activeProfile&gt;</span><br><span class="line">	&lt;activeProfile&gt;central-repo&lt;&#x2F;activeProfile&gt;</span><br><span class="line"></span><br><span class="line">	--&gt;    </span><br><span class="line">  &lt;&#x2F;activeProfiles&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure>



<h2 id="scala2-12修改问题"><a href="#scala2-12修改问题" class="headerlink" title="scala2.12修改问题"></a>scala2.12修改问题</h2><p>由于spark2.4.5默认的pom.xml汇总，scala是2.11版本的，所以我们需要修改，我们在spark的源码文件夹下，通过git bash输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;dev&#x2F;change-scala-version.sh 2.12</span><br></pre></td></tr></table></figure>



<h2 id="主pom-xml修改问题"><a href="#主pom-xml修改问题" class="headerlink" title="主pom.xml修改问题"></a>主pom.xml修改问题</h2><p>根据你的需要修改jdk，maven和scala的版本，如果不修改后面编译的时候可能会有问题</p>
<h1 id="编译过程中的许多问题"><a href="#编译过程中的许多问题" class="headerlink" title="编译过程中的许多问题"></a>编译过程中的许多问题</h1><h2 id="SqlBaseParser报红出错"><a href="#SqlBaseParser报红出错" class="headerlink" title="SqlBaseParser报红出错"></a>SqlBaseParser报红出错</h2><p>点击右部maven的generate source and update forder按钮</p>
<p><img src="/images/67/1.png" alt="1"></p>
<h2 id="已经编译后，再想修改scala2-11变为2-12"><a href="#已经编译后，再想修改scala2-11变为2-12" class="headerlink" title="已经编译后，再想修改scala2.11变为2.12"></a>已经编译后，再想修改scala2.11变为2.12</h2><p>需要重新进行导入，不然显示无法更改</p>
<h1 id="编码测试"><a href="#编码测试" class="headerlink" title="编码测试"></a>编码测试</h1><h2 id="pom-文件添加如下-profile-并激活依赖"><a href="#pom-文件添加如下-profile-并激活依赖" class="headerlink" title="pom 文件添加如下 profile ,并激活依赖"></a>pom 文件添加如下 profile ,并激活依赖</h2><pre><code>&lt;!-- idea provide 配置 --&gt;
    &lt;profile&gt;
      &lt;id&gt;add-dependencies-for-IDEA&lt;/id&gt;

      &lt;activation&gt;
        &lt;property&gt;
          &lt;name&gt;idea.version&lt;/name&gt;
        &lt;/property&gt;
      &lt;/activation&gt;

      &lt;dependencies&gt;
        &lt;dependency&gt;
          &lt;groupId&gt;com.google.guava&lt;/groupId&gt;
          &lt;artifactId&gt;guava&lt;/artifactId&gt;
          &lt;version&gt;14.0.1&lt;/version&gt;
          &lt;scope&gt;compile&lt;/scope&gt;
        &lt;/dependency&gt;
      &lt;/dependencies&gt;
    &lt;/profile&gt;</code></pre><p><img src="/images/67/2.png" alt="2"></p>
<h2 id="源码目录需要执行命令"><a href="#源码目录需要执行命令" class="headerlink" title="源码目录需要执行命令"></a>源码目录需要执行命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;build&#x2F;spark-build-info &#x2F;d&#x2F;Projects&#x2F;IdeaProjects&#x2F;spark-2.4.5&#x2F;core&#x2F;target&#x2F;extra-resources spark-core_2.12</span><br><span class="line"></span><br><span class="line">其中 &#x2F;target&#x2F;extra-resources 必须这么写</span><br></pre></td></tr></table></figure>

<p><img src="/images/67/3.png" alt="3"></p>
<h2 id="测试的scala代码运行时记得勾选一个选项"><a href="#测试的scala代码运行时记得勾选一个选项" class="headerlink" title="测试的scala代码运行时记得勾选一个选项"></a>测试的scala代码运行时记得勾选一个选项</h2><p>勾选 include dependencies with “Provided” scope</p>
<p><img src="/images/67/4.png" alt="4"></p>
<h2 id="代码写完可能全部爆红"><a href="#代码写完可能全部爆红" class="headerlink" title="代码写完可能全部爆红"></a>代码写完可能全部爆红</h2><p>缺少监听，随便找一个其他文件拷贝监听</p>
<p><img src="/images/67/5.png" alt="5"></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>spark累加器与广播变量</title>
    <url>/2020/03/28/66.spark%E7%B4%AF%E5%8A%A0%E5%99%A8%E4%B8%8E%E5%B9%BF%E6%92%AD%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>Spark三大数据结构</p>
<ul>
<li>RDD：分布式数据集</li>
<li>广播变量：分布式只读共享变量</li>
<li>累加器：分布式只写共享变量</li>
</ul>
<p>此博文主谈广播变量与累加器</p>
<a id="more"></a>

<h2 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h2><h3 id="使用原则"><a href="#使用原则" class="headerlink" title="使用原则"></a>使用原则</h3><ul>
<li>累加器在Driver端定义赋初始值，累加器只能在Driver端读取，在Excutor端更新</li>
</ul>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p><img src="/images/66/1.png" alt="1"></p>
<p>(1) 通过sparkContext.longAccumulator()或sparkContext.doubleAccumulator()来累积long或double类型的值来创建数字累加器</p>
<pre><code>如scala方式：var accumulator=sc.longAccumulator(&quot;accumulator&quot;);</code></pre><p>(2) 在executor端通过accumulator.add(1)进行累加后并回传到driver</p>
<p>(3) 最后在driver端通过accumulator.value来聚合每个executor回传的结果</p>
<h2 id="广播变量"><a href="#广播变量" class="headerlink" title="广播变量"></a>广播变量</h2><h3 id="使用原则-1"><a href="#使用原则-1" class="headerlink" title="使用原则"></a>使用原则</h3><ul>
<li>不能将RDD用做变量广播出去，RDD是不存储数据的，可以将RDD的结果广播出去。</li>
<li>广播变量只能在Driver端定义，不能在Executor端定义，Executor端只能使用。</li>
<li>广播变量的值只能在Driver端修改，在Executor端不能修改</li>
</ul>
<h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><p><img src="/images/66/2.png" alt="2"></p>
<p>(1) 通过SparkContext.Broadcast[T] 创建一个变量v，并进行广播，广播变量以序列化形式缓存。</p>
<pre><code>如scala方式：val broadCast = sc.broadcast(T) 对T进行广播，T可以是任何能被序列化的类型</code></pre><p>(2) 通过 broadCast.value 属性访问该对象的值，而不能直接访问T</p>
<p>(3) 当要更新广播变量时候，通过broadCast.unpersist()方法清除广播变量，之后可重新广播</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1、不能将一个RDD使用广播变量广播出去，因为RDD是不存储数据的。<strong>可以将RDD的结果广播出去。</strong></p>
<p>2、 广播变量只能在Driver端定义，<strong>不能在Executor端定义。</strong></p>
<p>3、 在Driver端可以修改广播变量的值，<strong>在Executor端无法修改广播变量的值。</strong></p>
<p>4、如果executor端用到了Driver的变量，如果<strong>不使用广播变量在Executor有多少task就有多少Driver端的变量副本。</strong></p>
<p>5、如果Executor端用到了Driver的变量，如果<strong>使用广播变量在每个Executor中只有一份Driver端的变量副本。</strong></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>scala用maven打包无class问题</title>
    <url>/2020/03/27/65.scala%E7%94%A8maven%E6%89%93%E5%8C%85%E6%97%A0class%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>官方文档：<a href="https://davidb.github.io/scala-maven-plugin/index.html" target="_blank" rel="noopener">https://davidb.github.io/scala-maven-plugin/index.html</a></p>
<p>scala编译的时候，jar包里没有生成相关的class，原因是需要配置插件，详细内容都可以在官方文档中找</p>
<a id="more"></a>

<p>如果急用可以把下面代码拷进你的pom.xml中</p>
<p>主pom.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;net.alchim31.maven&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;scala-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure>

<p>子pom.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;net.alchim31.maven&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;scala-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;scala-compile&lt;&#x2F;id&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;compile&lt;&#x2F;goal&gt;</span><br><span class="line">                        &lt;&#x2F;goals&gt;</span><br><span class="line">                        &lt;configuration&gt;</span><br><span class="line">                            &lt;!--includes是一个数组，包含要编译的code--&gt;</span><br><span class="line">                            &lt;includes&gt;</span><br><span class="line">                                &lt;include&gt;**&#x2F;*.scala&lt;&#x2F;include&gt;</span><br><span class="line">                            &lt;&#x2F;includes&gt;</span><br><span class="line">                        &lt;&#x2F;configuration&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;scala-test-compile&lt;&#x2F;id&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;testCompile&lt;&#x2F;goal&gt;</span><br><span class="line">                        &lt;&#x2F;goals&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                &lt;&#x2F;executions&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>scala</tag>
      </tags>
  </entry>
  <entry>
    <title>spark优化之依赖包传入spark.yarn.archive的使用</title>
    <url>/2020/03/27/64.spark%E4%BC%98%E5%8C%96%E4%B9%8B%E4%BE%9D%E8%B5%96%E5%8C%85%E4%BC%A0%E5%85%A5spark.yarn.archive%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h1><p>启动Spark任务时，在没有配置<code>spark.yarn.archive</code>或者<code>spark.yarn.jars</code>时， 会看到不停地上传jar，非常耗时；使用<code>spark.yarn.archive</code>可以大大地减少任务的启动时间，整个处理过程如下。</p>
<h1 id="spark-yarn-archive使用"><a href="#spark-yarn-archive使用" class="headerlink" title="spark.yarn.archive使用"></a>spark.yarn.archive使用</h1><p>1.在本地创建zip文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在spark的jars目录下</span><br><span class="line">zip spark2.4.5.zip .&#x2F;*</span><br></pre></td></tr></table></figure>



<p>2.上传至HDFS并更改权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir &#x2F;tmp&#x2F;spark-archive</span><br><span class="line">hdfs dfs -put .&#x2F;spark2.4.5.zip &#x2F;tmp&#x2F;spark-archive&#x2F;</span><br><span class="line">hdfs dfs -chmod 775 &#x2F;tmp&#x2F;spark-archive&#x2F;spark2.4.5.zip</span><br></pre></td></tr></table></figure>



<p>3.配置spark-default.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spark.yarn.archive  hdfs:&#x2F;&#x2F;hadoop000:8020&#x2F;tmp&#x2F;spark-archive&#x2F;spark2.4.5.zip</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>java发送邮件</title>
    <url>/2020/03/27/63.java%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>采用SMTP规则</p>
<a id="more"></a>

<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ruozedata.homework.March18.join;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.mail.util.MailSSLSocketFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String recivers, String title, String content)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">"mail.host"</span>,<span class="string">"smtp.qq.com"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"mail.transport.protocol"</span>,<span class="string">"smtp"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"mail.smtp.ssl.enable"</span>,<span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">        MailSSLSocketFactory factory = <span class="keyword">new</span> MailSSLSocketFactory();</span><br><span class="line">        factory.setTrustAllHosts(<span class="keyword">true</span>);</span><br><span class="line">        properties.put(<span class="string">"mail.smtp.ssl.socketFactory"</span>, factory);</span><br><span class="line"></span><br><span class="line">        Authenticator authenticator = <span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                String username = <span class="string">"xx@qq.com"</span>;</span><br><span class="line">                String password = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(username, password);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Session session = Session.getInstance(properties, authenticator);</span><br><span class="line"></span><br><span class="line">        MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">        InternetAddress from = <span class="keyword">new</span> InternetAddress(<span class="string">"xx@qq.com"</span>);</span><br><span class="line">        message.setFrom(from);</span><br><span class="line">        InternetAddress[] tos = InternetAddress.parse(recivers);</span><br><span class="line">        message.setRecipients(Message.RecipientType.TO, tos);</span><br><span class="line">        message.setSubject(title);</span><br><span class="line">        message.setContent(content, <span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        Transport.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        send(<span class="string">"xxx"</span>, <span class="string">"测试"</span>, <span class="string">"测试内容"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop数据压缩</title>
    <url>/2020/03/26/62.hadoop%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h1 id="压缩简介"><a href="#压缩简介" class="headerlink" title="压缩简介"></a>压缩简介</h1><h2 id="为什么要使用压缩？"><a href="#为什么要使用压缩？" class="headerlink" title="为什么要使用压缩？"></a>为什么要使用压缩？</h2><p>1.通过压缩我们可以减少hdfs上数据所占用的空间</p>
<p>2.减少HDFS读写数据量</p>
<p>3.提升网络传输效率</p>
<h2 id="使用压缩的场景"><a href="#使用压缩的场景" class="headerlink" title="使用压缩的场景"></a>使用压缩的场景</h2><p>input</p>
<p>分布式处理引擎</p>
<p>output</p>
<h2 id="常见压缩格式"><a href="#常见压缩格式" class="headerlink" title="常见压缩格式"></a>常见压缩格式</h2><ul>
<li>GZIP</li>
<li>BZIP2</li>
<li>LZO</li>
<li>SNAPPY</li>
</ul>
<a id="more"></a>



<h1 id="压缩格式的优点和缺点"><a href="#压缩格式的优点和缺点" class="headerlink" title="压缩格式的优点和缺点"></a>压缩格式的优点和缺点</h1><p>1 gzip压缩</p>
<p>优点：压缩率比较高，而且压缩/解压速度也比较快；hadoop本身支持，在应用中处理gzip格式的文件就和直接处理文本一样；有hadoop native库；大部分linux系统都自带gzip命令，使用方便。</p>
<p>缺点：不支持split。</p>
<p>应用场景：当每个文件压缩之后在130M以内的（1个块大小内），都可以考虑用gzip压缩格式。譬如说一天或者一个小时的日志压缩成一个gzip 文件，运行mapreduce程序的时候通过多个gzip文件达到并发。hive程序，streaming程序，和java写的mapreduce程序完 全和文本处理一样，压缩之后原来的程序不需要做任何修改。</p>
<p>2 lzo压缩</p>
<p>优点：压缩/解压速度也比较快，合理的压缩率；支持split，是hadoop中最流行的压缩格式；支持hadoop native库；可以在linux系统下安装lzop命令，使用方便。</p>
<p>缺点：压缩率比gzip要低一些；hadoop本身不支持，需要安装；在应用中对lzo格式的文件需要做一些特殊处理（为了支持split需要建索引，还需要指定inputformat为lzo格式）。</p>
<p>应用场景：一个很大的文本文件，压缩之后还大于200M以上的可以考虑，而且单个文件越大，lzo优点越越明显。</p>
<p>3 snappy压缩</p>
<p>优点：高速压缩速度和合理的压缩率；支持hadoop native库。</p>
<p>缺点：不支持split；压缩率比gzip要低；hadoop本身不支持，需要安装；linux系统下没有对应的命令。</p>
<p>应用场景：当mapreduce作业的map输出的数据比较大的时候，作为map到reduce的中间数据的压缩格式；或者作为一个mapreduce作业的输出和另外一个mapreduce作业的输入。</p>
<p>4 bzip2压缩</p>
<p>优点：支持split；具有很高的压缩率，比gzip压缩率都高；hadoop本身支持，但不支持native；在linux系统下自带bzip2命令，使用方便。</p>
<p>缺点：压缩/解压速度慢；不支持native。</p>
<p>应用场景：适合对速度要求不高，但需要较高的压缩率的时候，可以作为mapreduce作业的输出格式；或者输出之后的数据比较大，处理之后的数据 需要压缩存档减少磁盘空间并且以后数据用得比较少的情况；或者对单个很大的文本文件想压缩减少存储空间，同时又需要支持split，而且兼容之前的应用程 序（即应用程序不需要修改）的情况。</p>
<p>最后用一个表格比较上述4种压缩格式的特征（优缺点）：</p>
<p>4种压缩格式的特征的比较</p>
<table>
<thead>
<tr>
<th align="left">压缩格式</th>
<th align="left">split</th>
<th align="left">native</th>
<th align="left">压缩率</th>
<th align="left">速度</th>
<th align="left">是否hadoop自带</th>
<th align="left">linux命令</th>
<th align="left">换成压缩格式后，原来的应用程序是否要修改</th>
</tr>
</thead>
<tbody><tr>
<td align="left">gzip</td>
<td align="left">否</td>
<td align="left">是</td>
<td align="left">很高</td>
<td align="left">比较快</td>
<td align="left">是，直接使用</td>
<td align="left">有</td>
<td align="left">和文本处理一样，不需要修改</td>
</tr>
<tr>
<td align="left">lzo</td>
<td align="left">是</td>
<td align="left">是</td>
<td align="left">比较高</td>
<td align="left">很快</td>
<td align="left">否，需要安装</td>
<td align="left">有</td>
<td align="left">需要建索引，还需要指定输入格式</td>
</tr>
<tr>
<td align="left">snappy</td>
<td align="left">否</td>
<td align="left">是</td>
<td align="left">比较高</td>
<td align="left">很快</td>
<td align="left">否，需要安装</td>
<td align="left">没有</td>
<td align="left">和文本处理一样，不需要修改</td>
</tr>
<tr>
<td align="left">bzip2</td>
<td align="left">是</td>
<td align="left">否</td>
<td align="left">最高</td>
<td align="left">慢</td>
<td align="left">是，直接使用</td>
<td align="left">有</td>
<td align="left">和文本处理一样，不需要修改</td>
</tr>
</tbody></table>
<h1 id="压缩与解压编码"><a href="#压缩与解压编码" class="headerlink" title="压缩与解压编码"></a>压缩与解压编码</h1><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename 待压缩的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 采用什么压缩格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1) 通过输入流读入</span></span><br><span class="line"><span class="comment">     * 2) 通过输出流写出</span></span><br><span class="line"><span class="comment">     * 3) 使用IOUtils.copyBytes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compress</span><span class="params">(String filename, String method)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(filename));</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; codec = Class.forName(method);</span><br><span class="line">        CompressionCodec compressionCodec = (CompressionCodec) ReflectionUtils.newInstance(codec, <span class="keyword">new</span> Configuration());</span><br><span class="line">        FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(filename + compressionCodec.getDefaultExtension()));</span><br><span class="line">        CompressionOutputStream cos = compressionCodec.createOutputStream(fos);</span><br><span class="line">        IOUtils.copyBytes(fis, cos, <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        cos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename 待解压的文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1) 通过输入流读入</span></span><br><span class="line"><span class="comment">     * 2) 通过输出流写出</span></span><br><span class="line"><span class="comment">     * 3) 使用IOUtils.copyBytes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decompression</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        CompressionCodecFactory factory = <span class="keyword">new</span> CompressionCodecFactory(<span class="keyword">new</span> Configuration());</span><br><span class="line">        CompressionCodec codec = factory.getCodec(<span class="keyword">new</span> Path(filename));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == codec)&#123;</span><br><span class="line">            System.out.println(<span class="string">"not find codec"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            CompressionInputStream cis = codec.createInputStream(<span class="keyword">new</span> FileInputStream(filename));</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(filename + <span class="string">".decode"</span>));</span><br><span class="line">            IOUtils.copyBytes(cis, fos, <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            cis.close();</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="MR中直接配置"><a href="#MR中直接配置" class="headerlink" title="MR中直接配置"></a>MR中直接配置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">configuration.setBoolean(&quot;mapreduce.output.fileoutputformat.compress&quot;, true);</span><br><span class="line">configuration.setClass(&quot;mapreduce.output.fileoutputformat.compress.codec&quot;, BZip2Codec.class);</span><br></pre></td></tr></table></figure>

<p>也可以直接在hadoop的配置文件中配置</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>spark监控</title>
    <url>/2020/03/26/61.spark%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<p>官方文档：<a href="http://spark.apache.org/docs/latest/monitoring.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/monitoring.html</a></p>
<p>Note that this information is only available for the duration of the application by default. To view the web UI after the fact, set <code>spark.eventLog.enabled</code> to true before starting the application. This configures Spark to log Spark events that encode the information displayed in the UI to persisted storage.</p>
<p>为了始终可以看到监控信息，需打开该参数（默认不开启）</p>
<p>在spark/conf下的spark-defaults.conf中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spark.eventLog.enabled true</span><br><span class="line">spark.eventLog.dir hdfs:&#x2F;&#x2F;namenode&#x2F;shared&#x2F;spark-logs</span><br></pre></td></tr></table></figure>

<p>spark-env.sh中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export SPARK_HISTORY_OPTS&#x3D;&quot;-Dspark.history.fs.logDirectory&#x3D;hdfs:&#x2F;&#x2F;hadoop000:8020&#x2F;directory -Dspark.history.ui.port&#x3D;44544&quot;</span><br></pre></td></tr></table></figure>

<p>默认端口为18080，但如果不改会被挖到自闭</p>
<p>之后在spark的sbin下开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;start-history-server.sh</span><br></pre></td></tr></table></figure>



<a id="more"></a>

<p>hdfs文件系统上job的清理问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spark.history.fs.cleaner.enabled true</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
        <tag>monitoring</tag>
      </tags>
  </entry>
  <entry>
    <title>java反射</title>
    <url>/2020/03/25/60.java%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong><a href="https://baike.baidu.com/item/JAVA反射机制/6015990" target="_blank" rel="noopener">JAVA反射机制</a>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</strong></p>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>在日常的第三方应用开发过程中，经常会遇到某个类的某个成员变量、方法或是属性是私有的或是只对系统应用开放，这时候就可以利用Java的反射机制通过反射来获取所需的私有成员或是方法。当然，也不是所有的都适合反射，之前就遇到一个案例，通过反射得到的结果与预期不符。阅读源码发现，经过层层调用后在最终返回结果的地方对应用的权限进行了校验，对于没有权限的应用返回值是没有意义的缺省值，否则返回实际值起到保护用户的隐私目的。</p>
<a id="more"></a>



<h2 id="反射机制的相关类"><a href="#反射机制的相关类" class="headerlink" title="反射机制的相关类"></a>反射机制的相关类</h2><p>与Java反射相关的类如下：</p>
<table>
<thead>
<tr>
<th>类名</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>Class类</td>
<td>代表类的实体，在运行的Java应用程序中表示类和接口</td>
</tr>
<tr>
<td>Field类</td>
<td>代表类的成员变量（成员变量也称为类的属性）</td>
</tr>
<tr>
<td>Method类</td>
<td>代表类的方法</td>
</tr>
<tr>
<td>Constructor类</td>
<td>代表类的构造方法</td>
</tr>
</tbody></table>
<h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><p><a href="https://developer.android.google.cn/reference/java/lang/Class" target="_blank" rel="noopener">Class</a>代表类的实体，在运行的Java应用程序中表示类和接口。在这个类中提供了很多有用的方法，这里对他们简单的分类介绍。</p>
<ul>
<li><strong>获得类相关的方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>asSubclass(Class<U> clazz)</td>
<td>把传递的类的对象转换成代表其子类的对象</td>
</tr>
<tr>
<td>Cast</td>
<td>把对象转换成代表类或是接口的对象</td>
</tr>
<tr>
<td>getClassLoader()</td>
<td>获得类的加载器</td>
</tr>
<tr>
<td>getClasses()</td>
<td>返回一个数组，数组中包含该类中所有公共类和接口类的对象</td>
</tr>
<tr>
<td>getDeclaredClasses()</td>
<td>返回一个数组，数组中包含该类中所有类和接口类的对象</td>
</tr>
<tr>
<td>forName(String className)</td>
<td>根据类名返回类的对象</td>
</tr>
<tr>
<td>getName()</td>
<td>获得类的完整路径名字</td>
</tr>
<tr>
<td>newInstance()</td>
<td>创建类的实例</td>
</tr>
<tr>
<td>getPackage()</td>
<td>获得类的包</td>
</tr>
<tr>
<td>getSimpleName()</td>
<td>获得类的名字</td>
</tr>
<tr>
<td>getSuperclass()</td>
<td>获得当前类继承的父类的名字</td>
</tr>
<tr>
<td>getInterfaces()</td>
<td>获得当前类实现的类或是接口</td>
</tr>
</tbody></table>
<ul>
<li><strong>获得类中属性相关的方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>getField(String name)</td>
<td>获得某个公有的属性对象</td>
</tr>
<tr>
<td>getFields()</td>
<td>获得所有公有的属性对象</td>
</tr>
<tr>
<td>getDeclaredField(String name)</td>
<td>获得某个属性对象</td>
</tr>
<tr>
<td>getDeclaredFields()</td>
<td>获得所有属性对象</td>
</tr>
</tbody></table>
<ul>
<li><strong>获得类中注解相关的方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>getAnnotation(Class<A> annotationClass)</td>
<td>返回该类中与参数类型匹配的公有注解对象</td>
</tr>
<tr>
<td>getAnnotations()</td>
<td>返回该类所有的公有注解对象</td>
</tr>
<tr>
<td>getDeclaredAnnotation(Class<A> annotationClass)</td>
<td>返回该类中与参数类型匹配的所有注解对象</td>
</tr>
<tr>
<td>getDeclaredAnnotations()</td>
<td>返回该类所有的注解对象</td>
</tr>
</tbody></table>
<ul>
<li><strong>获得类中构造器相关的方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>getConstructor(Class…&lt;?&gt; parameterTypes)</td>
<td>获得该类中与参数类型匹配的公有构造方法</td>
</tr>
<tr>
<td>getConstructors()</td>
<td>获得该类的所有公有构造方法</td>
</tr>
<tr>
<td>getDeclaredConstructor(Class…&lt;?&gt; parameterTypes)</td>
<td>获得该类中与参数类型匹配的构造方法</td>
</tr>
<tr>
<td>getDeclaredConstructors()</td>
<td>获得该类所有构造方法</td>
</tr>
</tbody></table>
<ul>
<li><strong>获得类中方法相关的方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>getMethod(String name, Class…&lt;?&gt; parameterTypes)</td>
<td>获得该类某个公有的方法</td>
</tr>
<tr>
<td>getMethods()</td>
<td>获得该类所有公有的方法</td>
</tr>
<tr>
<td>getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td>
<td>获得该类某个方法</td>
</tr>
<tr>
<td>getDeclaredMethods()</td>
<td>获得该类所有方法</td>
</tr>
</tbody></table>
<ul>
<li><strong>类中其他重要的方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>isAnnotation()</td>
<td>如果是注解类型则返回true</td>
</tr>
<tr>
<td>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</td>
<td>如果是指定类型注解类型则返回true</td>
</tr>
<tr>
<td>isAnonymousClass()</td>
<td>如果是匿名类则返回true</td>
</tr>
<tr>
<td>isArray()</td>
<td>如果是一个数组类则返回true</td>
</tr>
<tr>
<td>isEnum()</td>
<td>如果是枚举类则返回true</td>
</tr>
<tr>
<td>isInstance(Object obj)</td>
<td>如果obj是该类的实例则返回true</td>
</tr>
<tr>
<td>isInterface()</td>
<td>如果是接口类则返回true</td>
</tr>
<tr>
<td>isLocalClass()</td>
<td>如果是局部类则返回true</td>
</tr>
<tr>
<td>isMemberClass()</td>
<td>如果是内部类则返回true</td>
</tr>
</tbody></table>
<h1 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h1><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Field" target="_blank" rel="noopener">Field</a>代表类的成员变量（成员变量也称为类的属性）。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>equals(Object obj)</td>
<td>属性与obj相等则返回true</td>
</tr>
<tr>
<td>get(Object obj)</td>
<td>获得obj中对应的属性值</td>
</tr>
<tr>
<td>set(Object obj, Object value)</td>
<td>设置obj中对应属性值</td>
</tr>
</tbody></table>
<h1 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h1><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Method" target="_blank" rel="noopener">Method</a>代表类的方法。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>invoke(Object obj, Object… args)</td>
<td>传递object对象及参数调用该对象对应的方法</td>
</tr>
</tbody></table>
<h1 id="Constructor类"><a href="#Constructor类" class="headerlink" title="Constructor类"></a>Constructor类</h1><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Constructor" target="_blank" rel="noopener">Constructor</a>代表类的构造方法。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>newInstance(Object… initargs)</td>
<td>根据传递的参数创建类的对象</td>
</tr>
</tbody></table>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>为了演示反射的使用，首先构造一个与书籍相关的model——Book.java，然后通过反射方法示例创建对象、反射私有构造方法、反射私有属性、反射私有方法，最后给出两个比较复杂的反射示例——获得当前ZenMode和关机Shutdown。</p>
<ul>
<li><strong>被反射类Book.java</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Book&#123;</span><br><span class="line">    private final static String TAG &#x3D; &quot;BookTag&quot;;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private String author;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Book&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, author&#x3D;&#39;&quot; + author + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Book() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Book(String name, String author) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.author &#x3D; author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAuthor() &#123;</span><br><span class="line">        return author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAuthor(String author) &#123;</span><br><span class="line">        this.author &#x3D; author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String declaredMethod(int index) &#123;</span><br><span class="line">        String string &#x3D; null;</span><br><span class="line">        switch (index) &#123;</span><br><span class="line">            case 0:</span><br><span class="line">                string &#x3D; &quot;I am declaredMethod 1 !&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 1:</span><br><span class="line">                string &#x3D; &quot;I am declaredMethod 2 !&quot;;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                string &#x3D; &quot;I am declaredMethod 1 !&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return string;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>反射逻辑封装在ReflectClass.java</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"peter.log.ReflectClass"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectNewInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; classBook = Class.forName(<span class="string">"com.android.peter.reflectdemo.Book"</span>);</span><br><span class="line">            Object objectBook = classBook.newInstance();</span><br><span class="line">            Book book = (Book) objectBook;</span><br><span class="line">            book.setName(<span class="string">"Android进阶之光"</span>);</span><br><span class="line">            book.setAuthor(<span class="string">"刘望舒"</span>);</span><br><span class="line">            Log.d(TAG,<span class="string">"reflectNewInstance book = "</span> + book.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectPrivateConstructor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; classBook = Class.forName(<span class="string">"com.android.peter.reflectdemo.Book"</span>);</span><br><span class="line">            Constructor&lt;?&gt; declaredConstructorBook = classBook.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">            declaredConstructorBook.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object objectBook = declaredConstructorBook.newInstance(<span class="string">"Android开发艺术探索"</span>,<span class="string">"任玉刚"</span>);</span><br><span class="line">            Book book = (Book) objectBook;</span><br><span class="line">            Log.d(TAG,<span class="string">"reflectPrivateConstructor book = "</span> + book.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectPrivateField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; classBook = Class.forName(<span class="string">"com.android.peter.reflectdemo.Book"</span>);</span><br><span class="line">            Object objectBook = classBook.newInstance();</span><br><span class="line">            Field fieldTag = classBook.getDeclaredField(<span class="string">"TAG"</span>);</span><br><span class="line">            fieldTag.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            String tag = (String) fieldTag.get(objectBook);</span><br><span class="line">            Log.d(TAG,<span class="string">"reflectPrivateField tag = "</span> + tag);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectPrivateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; classBook = Class.forName(<span class="string">"com.android.peter.reflectdemo.Book"</span>);</span><br><span class="line">            Method methodBook = classBook.getDeclaredMethod(<span class="string">"declaredMethod"</span>,<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            methodBook.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object objectBook = classBook.newInstance();</span><br><span class="line">            String string = (String) methodBook.invoke(objectBook,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            Log.d(TAG,<span class="string">"reflectPrivateMethod string = "</span> + string);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得系统Zenmode值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getZenMode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> zenMode = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; cServiceManager = Class.forName(<span class="string">"android.os.ServiceManager"</span>);</span><br><span class="line">            Method mGetService = cServiceManager.getMethod(<span class="string">"getService"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Object oNotificationManagerService = mGetService.invoke(<span class="keyword">null</span>, Context.NOTIFICATION_SERVICE);</span><br><span class="line">            Class&lt;?&gt; cINotificationManagerStub = Class.forName(<span class="string">"android.app.INotificationManager$Stub"</span>);</span><br><span class="line">            Method mAsInterface = cINotificationManagerStub.getMethod(<span class="string">"asInterface"</span>,IBinder<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Object oINotificationManager = mAsInterface.invoke(<span class="keyword">null</span>,oNotificationManagerService);</span><br><span class="line">            Method mGetZenMode = cINotificationManagerStub.getMethod(<span class="string">"getZenMode"</span>);</span><br><span class="line">            zenMode = (<span class="keyword">int</span>) mGetZenMode.invoke(oINotificationManager);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> zenMode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭手机</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; cServiceManager = Class.forName(<span class="string">"android.os.ServiceManager"</span>);</span><br><span class="line">            Method mGetService = cServiceManager.getMethod(<span class="string">"getService"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Object oPowerManagerService = mGetService.invoke(<span class="keyword">null</span>,Context.POWER_SERVICE);</span><br><span class="line">            Class&lt;?&gt; cIPowerManagerStub = Class.forName(<span class="string">"android.os.IPowerManager$Stub"</span>);</span><br><span class="line">            Method mShutdown = cIPowerManagerStub.getMethod(<span class="string">"shutdown"</span>,<span class="keyword">boolean</span><span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>,<span class="title">boolean</span>.<span class="title">class</span>)</span>;</span><br><span class="line">            Method mAsInterface = cIPowerManagerStub.getMethod(<span class="string">"asInterface"</span>,IBinder<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Object oIPowerManager = mAsInterface.invoke(<span class="keyword">null</span>,oPowerManagerService);</span><br><span class="line">            mShutdown.invoke(oIPowerManager,<span class="keyword">true</span>,<span class="keyword">null</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutdownOrReboot</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> shutdown, <span class="keyword">final</span> <span class="keyword">boolean</span> confirm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; ServiceManager = Class.forName(<span class="string">"android.os.ServiceManager"</span>);</span><br><span class="line">            <span class="comment">// 获得ServiceManager的getService方法</span></span><br><span class="line">            Method getService = ServiceManager.getMethod(<span class="string">"getService"</span>, java.lang.String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 调用getService获取RemoteService</span></span><br><span class="line">            Object oRemoteService = getService.invoke(<span class="keyword">null</span>, Context.POWER_SERVICE);</span><br><span class="line">            <span class="comment">// 获得IPowerManager.Stub类</span></span><br><span class="line">            Class&lt;?&gt; cStub = Class.forName(<span class="string">"android.os.IPowerManager$Stub"</span>);</span><br><span class="line">            <span class="comment">// 获得asInterface方法</span></span><br><span class="line">            Method asInterface = cStub.getMethod(<span class="string">"asInterface"</span>, android.os.IBinder<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 调用asInterface方法获取IPowerManager对象</span></span><br><span class="line">            Object oIPowerManager = asInterface.invoke(<span class="keyword">null</span>, oRemoteService);</span><br><span class="line">            <span class="keyword">if</span> (shutdown) &#123;</span><br><span class="line">                <span class="comment">// 获得shutdown()方法</span></span><br><span class="line">                Method shutdownMethod = oIPowerManager.getClass().getMethod(</span><br><span class="line">                        <span class="string">"shutdown"</span>, <span class="keyword">boolean</span><span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>, <span class="title">boolean</span>.<span class="title">class</span>)</span>;</span><br><span class="line">                <span class="comment">// 调用shutdown()方法</span></span><br><span class="line">                shutdownMethod.invoke(oIPowerManager, confirm, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 获得reboot()方法</span></span><br><span class="line">                Method rebootMethod = oIPowerManager.getClass().getMethod(<span class="string">"reboot"</span>,</span><br><span class="line">                        <span class="keyword">boolean</span><span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>, <span class="title">boolean</span>.<span class="title">class</span>)</span>;</span><br><span class="line">                <span class="comment">// 调用reboot()方法</span></span><br><span class="line">                rebootMethod.invoke(oIPowerManager, confirm, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>调用相应反射逻辑方法</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    ReflectClass.reflectNewInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有的构造方法</span></span><br><span class="line">    ReflectClass.reflectPrivateConstructor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有属性</span></span><br><span class="line">    ReflectClass.reflectPrivateField();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有方法</span></span><br><span class="line">    ReflectClass.reflectPrivateMethod();</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> ex) &#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Log.d(TAG,<span class="string">" zenmode = "</span> + ReflectClass.getZenMode());</span><br></pre></td></tr></table></figure>

<p>Log输出结果如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">08</span><span class="number">-27</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">37.999</span> <span class="number">11987</span><span class="number">-11987</span>/com.android.peter.reflectdemo D/peter.log.ReflectClass: reflectNewInstance book = Book&#123;name=<span class="string">'Android进阶之光'</span>, author=<span class="string">'刘望舒'</span>&#125;</span><br><span class="line"><span class="number">08</span><span class="number">-27</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">38.000</span> <span class="number">11987</span><span class="number">-11987</span>/com.android.peter.reflectdemo D/peter.log.ReflectClass: reflectPrivateConstructor book = Book&#123;name=<span class="string">'Android开发艺术探索'</span>, author=<span class="string">'任玉刚'</span>&#125;</span><br><span class="line"><span class="number">08</span><span class="number">-27</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">38.000</span> <span class="number">11987</span><span class="number">-11987</span>/com.android.peter.reflectdemo D/peter.log.ReflectClass: reflectPrivateField tag = BookTag</span><br><span class="line"><span class="number">08</span><span class="number">-27</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">38.000</span> <span class="number">11987</span><span class="number">-11987</span>/com.android.peter.reflectdemo D/peter.log.ReflectClass: reflectPrivateMethod <span class="keyword">string</span> = I am declaredMethod <span class="number">1</span> !</span><br><span class="line"><span class="number">08</span><span class="number">-27</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">38.004</span> <span class="number">11987</span><span class="number">-11987</span>/com.android.peter.reflectdemo D/peter.log.ReflectDemo:  zenmode = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文列举了反射机制使用过程中常用的、重要的一些类及其方法，更多信息和用法需要近一步的阅读Google提供的相关文档和示例。</p>
<p>在阅读Class类文档时发现一个特点，以通过反射获得Method对象为例，一般会提供四种方法，getMethod(parameterTypes)、getMethods()、getDeclaredMethod(parameterTypes)和getDeclaredMethods()。getMethod(parameterTypes)用来获取某个公有的方法的对象，getMethods()获得该类所有公有的方法，getDeclaredMethod(parameterTypes)获得该类某个方法，getDeclaredMethods()获得该类所有方法。<strong>带有Declared修饰的方法可以反射到私有的方法，没有Declared修饰的只能用来反射公有的方法。</strong>其他的Annotation、Field、Constructor也是如此。</p>
<p>在ReflectClass类中还提供了两种反射PowerManager.shutdown()的方法，在调用的时候会输出如下log，提示没有相关权限。之前在项目中尝试反射其他方法的时候还遇到过有权限和没权限返回的值不一样的情况。<strong>如果源码中明确进行了权限验证，而你的应用又无法获得这个权限的话，建议就不要浪费时间反射了。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">W/System.err: java.lang.reflect.InvocationTargetException</span><br><span class="line">W/System.err:     at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">W/System.err:     at .ReflectClass.shutDown(ReflectClass.java:104)</span><br><span class="line">W/System.err:     at .MainActivity<span class="variable">$1</span>.onClick(MainActivity.java:25)</span><br><span class="line">W/System.err:     at android.view.View.performClick(View.java:6259)</span><br><span class="line">W/System.err:     at android.view.View<span class="variable">$PerformClick</span>.run(View.java:24732)</span><br><span class="line">W/System.err:     at android.os.Handler.handleCallback(Handler.java:789)</span><br><span class="line">W/System.err:     at android.os.Handler.dispatchMessage(Handler.java:98)</span><br><span class="line">W/System.err:     at android.os.Looper.loop(Looper.java:164)</span><br><span class="line">W/System.err:     at android.app.ActivityThread.main(ActivityThread.java:6592)</span><br><span class="line">W/System.err:     at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">W/System.err:     at com.android.internal.os.Zygote<span class="variable">$MethodAndArgsCaller</span>.run(Zygote.java:240)</span><br><span class="line">W/System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:769)</span><br><span class="line">W/System.err: Caused by: java.lang.SecurityException: Neither user 10224 nor current process has android.permission.REBOOT.</span><br><span class="line">W/System.err:     at android.os.Parcel.readException(Parcel.java:1942)</span><br><span class="line">W/System.err:     at android.os.Parcel.readException(Parcel.java:1888)</span><br><span class="line">W/System.err:     at android.os.IPowerManager<span class="variable">$Stub</span><span class="variable">$Proxy</span>.shutdown(IPowerManager.java:787)</span><br><span class="line">W/System.err:  ... 12 more</span><br></pre></td></tr></table></figure>

<p><a href="https://gitee.com/peter_RD_nj/DemoAllInOne/tree/master/ReflectDemo" target="_blank" rel="noopener">ReflectDemo</a></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://link.jianshu.com/?t=http://blog.qiji.tech/archives/4374" target="_blank" rel="noopener">认识反射机制（Reflection）</a><br> <a href="http://www.cnblogs.com/mengdd/archive/2013/01/26/2877972.html" target="_blank" rel="noopener">Java 反射机制</a><br> <a href="http://blog.csdn.net/ljphhj/article/details/12858767" target="_blank" rel="noopener">一个例子让你了解Java反射机制</a><br> <a href="https://link.jianshu.com/?t=http://www.cnblogs.com/crazypebble/archive/2011/04/13/2014582.html" target="_blank" rel="noopener">Java反射机制的原理及在Android下的简单应用</a><br> <a href="https://link.jianshu.com/?t=http://zlb1986.iteye.com/blog/937781" target="_blank" rel="noopener">java中的反射机制</a><br> <a href="https://link.jianshu.com/?t=http://efany.github.io/2016/04/02/Android注解与反射机制/" target="_blank" rel="noopener">Android注解与反射机制</a><br> <a href="https://developer.android.google.cn/reference/java/lang/reflect/Method?hl=zh-cn" target="_blank" rel="noopener">java.lang.reflect.Method</a></p>
<p>转载链接：<a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">https://www.jianshu.com/p/9be58ee20dee</a></p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala比较器：Ordered与Ordering</title>
    <url>/2020/03/24/59.Scala%E6%AF%94%E8%BE%83%E5%99%A8%EF%BC%9AOrdered%E4%B8%8EOrdering/</url>
    <content><![CDATA[<h1 id="两个特质"><a href="#两个特质" class="headerlink" title="两个特质"></a>两个特质</h1><p>Scala提供两个特质（trait）<code>Ordered</code>与<code>Ordering</code>用于比较。其中，Ordered混入（mix）Java的Comparable接口，而Ordering则混入Comparator接口。众所周知，在Java中</p>
<ul>
<li>实现Comparable接口的类，其对象具有了可比较性；</li>
<li>实现comparator接口的类，则提供一个外部比较器，用于比较两个对象。</li>
</ul>
<p>Ordered与Ordering的区别与之相类似：</p>
<ul>
<li>Ordered特质定义了相同类型间的比较方式，但这种内部比较方式是单一的；</li>
<li>Ordered则是提供比较器模板，可以自定义多种比较方式。</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>在项目中，我们常常会遇到排序（或比较）需求，比如：对一个Person类</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= &#123;</span><br><span class="line">    <span class="string">"name: "</span> + name + <span class="string">", age: "</span> + age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于Person类，如何做让其对象具有可比较性呢？我们可使用Ordered对象的函数orderingToOrdered做隐式转换，但还需要组织一个Ordering[Person]的隐式参数：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="class"><span class="keyword">object</span> <span class="title">PersonOrdering</span> <span class="keyword">extends</span> <span class="title">Ordering</span>[<span class="type">Person</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(p1: <span class="type">Person</span>, p2: <span class="type">Person</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    p1.name == p2.name <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="literal">false</span> =&gt; -p1.name.compareTo(p2.name)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; p1.age - p2.age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val name: <span class="type">String</span>, val age: <span class="type">Int</span>, val fv: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Ordered</span>[<span class="type">Person</span>]  </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(that:<span class="type">Person</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.name == that.name) &#123;</span><br><span class="line">      <span class="keyword">this</span>.age - that.age</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      -(<span class="keyword">this</span>.age - that.age)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">val</span> p1 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"rain"</span>, <span class="number">13</span>)</span><br><span class="line"><span class="keyword">val</span> p2 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"rain"</span>, <span class="number">14</span>)</span><br></pre></td></tr></table></figure>



<h2 id="Collection-Sort"><a href="#Collection-Sort" class="headerlink" title="Collection Sort"></a>Collection Sort</h2><p>在实际项目中，我们常常需要对集合进行排序。回到开篇的问题——如何对Person类的集合做指定排序呢？下面用List集合作为demo，探讨在scala集合排序。首先，我们来看看List的sort函数：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// scala.collection.SeqLike</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//若使用sortWith，则需要定义返回值为Boolean的比较函数：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortWith</span></span>(lt: (<span class="type">A</span>, <span class="type">A</span>) =&gt; <span class="type">Boolean</span>): <span class="type">Repr</span> = sorted(<span class="type">Ordering</span> fromLessThan lt)</span><br><span class="line"></span><br><span class="line"> <span class="comment">//若使用sortBy，也需要指定Ordering隐式参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortBy</span></span>[<span class="type">B</span>](f: <span class="type">A</span> =&gt; <span class="type">B</span>)(<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">B</span>]): <span class="type">Repr</span> = sorted(ord on f)</span><br><span class="line"></span><br><span class="line"> <span class="comment">//若调用sorted函数做排序，则需要指定Ordering隐式参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sorted</span></span>[<span class="type">B</span> &gt;: <span class="type">A</span>](<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">B</span>]): <span class="type">Repr</span> = &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>scala</tag>
      </tags>
  </entry>
  <entry>
    <title>Azkaban相对路径设置</title>
    <url>/2020/03/22/56.Azkaban%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Azkaban相对路径设置"><a href="#Azkaban相对路径设置" class="headerlink" title="Azkaban相对路径设置"></a>Azkaban相对路径设置</h1><p>复制azkaban-3.81.0/az-hadoop-jobtype-plugin/src/jobtypes到solo模式的az的plugins下，根据需要修改jobtypes内的文件</p>
<p>环境变量配置到properties文件中</p>
<p>确认az的conf中的azkaban.properties中的azkaban.jobtype.plugin.dir=plugins/jobtypes</p>
]]></content>
      <categories>
        <category>生产必知</category>
      </categories>
      <tags>
        <tag>Azkaban</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala隐式转换</title>
    <url>/2020/03/21/58.Scala%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>参考文档之一：<a href="https://docs.scala-lang.org/zh-cn/tour/implicit-conversions.html" target="_blank" rel="noopener">https://docs.scala-lang.org/zh-cn/tour/implicit-conversions.html</a></p>
<h2 id="隐式转换的前提"><a href="#隐式转换的前提" class="headerlink" title="隐式转换的前提"></a>隐式转换的前提</h2><p>1.不存在二义性</p>
<p>2.隐式操作不能嵌套</p>
<h2 id="隐式参数"><a href="#隐式参数" class="headerlink" title="隐式参数"></a>隐式参数</h2><p>当在程序中，同时有 隐式参数，默认值，传值时</p>
<p>编译器的优先级为 传值 &gt; 隐式参数 &gt; 默认值</p>
<p>在隐式参数匹配时，不能有二义性</p>
<p>如果三个（隐式参数，默认值，传值）一个都没有，就会报错</p>
<h2 id="隐式转换函数"><a href="#隐式转换函数" class="headerlink" title="隐式转换函数"></a>隐式转换函数</h2><p>可以在不修改源代码的情况下，给类动态添加功能</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">x2y</span></span>(普通的<span class="type">X</span>):牛逼的<span class="type">Y</span> = <span class="keyword">new</span> 牛逼的<span class="type">Y</span>(…)</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span>(<span class="params">val name: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Superman</span>(<span class="params">val name: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">emitLaser</span> </span>= println(<span class="string">"emit a laster!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">man2superman</span></span>(man: <span class="type">Man</span>): <span class="type">Superman</span> = <span class="keyword">new</span> <span class="type">Superman</span>(man.name)</span><br><span class="line"><span class="keyword">val</span> leo = <span class="keyword">new</span> <span class="type">Man</span>(<span class="string">"leo"</span>)</span><br><span class="line"></span><br><span class="line">leo.emitLaser</span><br></pre></td></tr></table></figure>



<h2 id="隐式类"><a href="#隐式类" class="headerlink" title="隐式类"></a>隐式类</h2><p>1.所带的构造参数，有且只能有一个</p>
<p>2.隐式类必须被定义在“类”或“伴生对象”或“包对象”里，即隐式类不能是顶级的</p>
<p>3.隐式类不能是case class</p>
<p>4.作用域内不能有与之相同名称的标识符</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="class"><span class="keyword">class</span> <span class="title">Caculator</span>(<span class="params">x: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(a: <span class="type">Int</span>) = a + x</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="number">2.</span>add(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>scala</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop HA部署</title>
    <url>/2020/03/17/57.Hadoop%20HA%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h1><h2 id="服务器创建-购买"><a href="#服务器创建-购买" class="headerlink" title="服务器创建/购买"></a>服务器创建/购买</h2><p>本博文采用阿里云ECS云服务器创建实例</p>
<p>当然，虚拟机创建3个实例也是没有问题的</p>
<p>3台服务器的配置均为2核8G，40G磁盘</p>
<a id="more"></a>

<h2 id="安装阶段"><a href="#安装阶段" class="headerlink" title="安装阶段"></a>安装阶段</h2><p>创建文件夹，下载依赖，上传安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y lrzsz</span><br><span class="line">useradd hadoop</span><br><span class="line">su - hadoop</span><br><span class="line">mkdir app software log data tmp</span><br><span class="line"></span><br><span class="line">回到root用户</span><br><span class="line">rz</span><br><span class="line">(上传)通过rz上传hadoop,jdk和zookeeper安装包,再通过scp经过内网传给另外2台机器</span><br><span class="line">scp * 172.16.135.139:&#x2F;home&#x2F;hadoop&#x2F;software</span><br><span class="line">scp * 172.16.135.140:&#x2F;home&#x2F;hadoop&#x2F;software</span><br></pre></td></tr></table></figure>

<p>配置hosts文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">172.16.135.140	ruozedata001  </span><br><span class="line">172.16.135.139	ruozedata002</span><br><span class="line">172.16.135.138	ruozedata003</span><br><span class="line"></span><br><span class="line">echo &quot;172.16.135.140   ruozedata001&quot; &gt;&gt; &#x2F;etc&#x2F;hosts</span><br><span class="line">echo &quot;172.16.135.139   ruozedata002&quot; &gt;&gt; &#x2F;etc&#x2F;hosts</span><br><span class="line">echo &quot;172.16.135.138   ruozedata003&quot; &gt;&gt; &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure>



<p>配置ssh互相信任关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(切换到hadoop用户下)</span><br><span class="line"># 三台机器都在hadoop下执行ssh-keygen，之后一直选择回车</span><br><span class="line"># 进入hadoop家目录下的.ssh</span><br><span class="line">ssh-keygen</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">chmod 0600 ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"># 拷贝~&#x2F;.ssh&#x2F;authorized_keys到一起</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"># 3个ssh-rsa弄一起</span><br></pre></td></tr></table></figure>



<p>验证互相信任关系(三台机器都要做)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh ruozedata001 date</span><br><span class="line">ssh ruozedata002 date</span><br><span class="line">ssh ruozedata003 date</span><br></pre></td></tr></table></figure>



<p>jdk安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># jdk</span><br><span class="line"># 目录必须: &#x2F;usr&#x2F;java&#x2F;</span><br><span class="line">mkdir &#x2F;usr&#x2F;java</span><br><span class="line">mv jdk-8u45-linux-x64.gz &#x2F;usr&#x2F;java&#x2F;</span><br><span class="line">cd &#x2F;usr&#x2F;java</span><br><span class="line">tar -zxvf jdk-8u45-linux-x64.gz</span><br><span class="line">chown -R root:root &#x2F;usr&#x2F;java&#x2F;*</span><br><span class="line"></span><br><span class="line"># 环境变量</span><br><span class="line">vi &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_45</span><br><span class="line">export PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>



<p>zookeeper安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.5-cdh5.16.2.tar.gz -C ..&#x2F;app&#x2F;</span><br><span class="line">ln -s zookeeper-3.4.5-cdh5.16.2 zookeeper</span><br><span class="line"></span><br><span class="line">cd zookeeper&#x2F;conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">vi zoo.cfg</span><br><span class="line">----下面是zoo.cfg内修改的数据</span><br><span class="line">dataDir&#x3D;&#x2F;home&#x2F;hadoop&#x2F;data&#x2F;zookeeper</span><br><span class="line"></span><br><span class="line">server.1&#x3D;ruozedata001:2888:3888</span><br><span class="line">server.2&#x3D;ruozedata002:2888:3888</span><br><span class="line">server.3&#x3D;ruozedata003:2888:3888</span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">mkdir -p &#x2F;home&#x2F;hadoop&#x2F;data&#x2F;zookeeper</span><br><span class="line">cd &#x2F;home&#x2F;hadoop&#x2F;data&#x2F;zookeeper</span><br><span class="line"></span><br><span class="line"># 分别把1、2、3配置到三台机器里</span><br><span class="line">echo 1 &gt; myid</span><br><span class="line">echo 2 &gt; myid</span><br><span class="line">echo 3 &gt; myid</span><br><span class="line"></span><br><span class="line">export ZOOKEEPER_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;zookeeper</span><br><span class="line">export PATH&#x3D;$ZOOKEEPER_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>



<p>hadoop安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-2.6.0-cdh5.16.2.tar.gz -C ..&#x2F;app&#x2F;</span><br><span class="line">ls -s hadoop-2.6.0-cdh5.16.2 hadoop</span><br><span class="line"></span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;hadoop</span><br><span class="line">export PATH&#x3D;$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbin:$PATH</span><br></pre></td></tr></table></figure>



<h2 id="配置阶段"><a href="#配置阶段" class="headerlink" title="配置阶段"></a>配置阶段</h2><p>core-site.xml配置介绍</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fs.trash.interval #回收站机制</span><br><span class="line">fs.trash.checkpoint.interval #垃圾回收站的检查间隔</span><br></pre></td></tr></table></figure>

<p><strong>windows上传文件的格式会有坑！</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windows上传到linux会有格式问题，隐藏了window的换行等编码</span><br><span class="line">yum install -y dos2unix</span><br><span class="line">file slaves</span><br><span class="line">转换格式</span><br><span class="line">dos2unix slaves</span><br></pre></td></tr></table></figure>



<p>hadoop-env.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_45</span><br></pre></td></tr></table></figure>



<p>启动hadoop（hdfs+yarn）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 格式化前先启动journalnode</span><br><span class="line">.&#x2F;hadoop-daemon.sh start journalnode</span><br><span class="line"># 进行格式化</span><br><span class="line"># 选择第一台机器</span><br><span class="line">bin&#x2F;hadoop namenode -format</span><br><span class="line"></span><br><span class="line"># 格式化完成后</span><br><span class="line"># 同步到第二台HA</span><br><span class="line">scp -r &#x2F;home&#x2F;hadoop&#x2F;data&#x2F;dfs&#x2F;name ruozedata002:&#x2F;home&#x2F;hadoop&#x2F;data&#x2F;dfs</span><br><span class="line"></span><br><span class="line"># 初始化ZKFC（在第一个节点上做）</span><br><span class="line">bin&#x2F;hdfs zkfc -formatZK</span><br><span class="line"></span><br><span class="line"># 之后第一个节点上启动</span><br><span class="line">sbin&#x2F;start-dfs.sh</span><br><span class="line"></span><br><span class="line"># 如果某个进程挂了，单独启动一个进程</span><br><span class="line">hadoop-daemon.sh start namenode</span><br><span class="line">hadoop-daemon.sh start datanode</span><br><span class="line">hadoop-daemon.sh start journalnode</span><br><span class="line">hadoop-daemon.sh start zkfc</span><br><span class="line"></span><br><span class="line"># 第一台机器启动Yarn框架</span><br><span class="line">.&#x2F;start-yarn.sh</span><br><span class="line"></span><br><span class="line"># 第二台机器需要手动启动</span><br><span class="line">yarn-daemon.sh start resourcemanager</span><br><span class="line"></span><br><span class="line"># 启动jobhistory（端口在19888）</span><br><span class="line">mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure>



<p>查看web界面，需要在阿里云上第一台机器配置安全组允许任意机器访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8080的yarn资源页面，主节点可以打开，从节点需要在后面加上&#x2F;cluster&#x2F;cluster才行</span><br></pre></td></tr></table></figure>





<h2 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从节点（Standby节点）任何事情都不能干</span><br><span class="line"></span><br><span class="line">手动杀掉active的namenode，从节点变为主节点</span><br><span class="line">之后通过hadoop-daemon.sh start namenode重新启动</span><br><span class="line"></span><br><span class="line">脑裂的概念：同时出现两个active或者两个standby</span><br><span class="line">Haadmin</span><br><span class="line"></span><br><span class="line">hdfs haadmin -getServiceState nn1 查看service状态（active  or  standby）</span><br><span class="line">hdfs haadmin -checkHealth nn1   查看健康</span><br><span class="line"></span><br><span class="line">hdfs haadmin  -transitionToActive  nn1 --forceactive  强制变为Active引发脑裂，不过系统不给你执行</span><br><span class="line"></span><br><span class="line">hdfs haadmin -failover nn2 nn1   nn2的active转给nn1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hdfs getconf -confKey   可以获得配置文件的value值  </span><br><span class="line">例如：</span><br><span class="line">hdfs getconf -confKey dfs.nameservices   </span><br><span class="line">ruozeclusterg8</span><br><span class="line">hdfs getconf -confKey dfs.ha.namenodes.ruozeclusterg8</span><br><span class="line">nn1,nn2</span><br><span class="line">hdfs haadmin -getServiceState nn1</span><br><span class="line">hdfs getconf -confKey dfs.namenode.rpc-address.ruozeclusterg8.nn1</span><br><span class="line">ruozedata001:8020</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>HA</tag>
      </tags>
  </entry>
  <entry>
    <title>shell基础语法</title>
    <url>/2020/03/16/55.shell%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h1><h2 id="指定脚本要使用的-Shell"><a href="#指定脚本要使用的-Shell" class="headerlink" title="指定脚本要使用的 Shell"></a>指定脚本要使用的 Shell</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>


<p>上面这句代码中， /bin/bash 是 Bash 程序在大多数 Linux 系统中的存放路径，而最前面的 #! 被称作 Sha-bang，或者 Shebang。</p>
<blockquote>
<p>在计算机科学中，Shebang（也称为 Hashbang ）是一个由井号和叹号构成的字符串 <code>#!</code> ，其出现在文本文档的第一行的前两个字符。<br>在文档中存在 Shebang 的情况下，类 Unix 操作系统的进程载入器会分析 Shebang 后的内容，将这些内容作为解释器指令，并调用该指令，并将载有 Shebang 的文档路径作为该解释器的参数。</p>
</blockquote>
<a id="more"></a>

<h2 id="给脚本文件添加可执行的权限"><a href="#给脚本文件添加可执行的权限" class="headerlink" title="给脚本文件添加可执行的权限"></a>给脚本文件添加可执行的权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x test.sh</span><br></pre></td></tr></table></figure>



<h2 id="以调试模式运行"><a href="#以调试模式运行" class="headerlink" title="以调试模式运行"></a>以调试模式运行</h2><p>随着我们渐渐深入 Shell 编程，你也许会写出很长的 Shell 脚本，代码一多很可能就会有 Bug。</p>
<p>因此，我们需要学习如何调试一个脚本程序。用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -x test.sh</span><br></pre></td></tr></table></figure>

<p>我们直接调用 Bash 这个 Shell 程序，并且给它一个参数 -x （表示以调试模式运行），后面再跟上要调试运行的脚本文件。</p>
<h1 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h1><p><strong>定义变量的时候=左右不要加空格！</strong></p>
<h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><p>我们可以用引号来界定包含空格的字符串。</p>
<p>引号一共有三种：</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">表示</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单引号</td>
<td align="left">’</td>
</tr>
<tr>
<td align="left">双引号</td>
<td align="left">“</td>
</tr>
<tr>
<td align="left">反引号</td>
<td align="left">`</td>
</tr>
</tbody></table>
<p>根据引号类型不同，Bash 的处理方式也会不同。</p>
<h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><p>我们从单引号开始学习吧。美式键盘中，单引号( ’ ) 位于 Enter 键（回车键）的左方。</p>
<p>之前的例子里，我们也已经使用过单引号了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">message&#x3D;&#39;Hello World&#39;</span><br><span class="line">echo &#39;The message is $message&#39;</span><br></pre></td></tr></table></figure>

<p>正如之前我们测试的一样，如果变量被包含在单引号里面，那么变量不会被解析，美元符号（ $ ）保持原样输出。</p>
<p>显示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The message is $message</span><br></pre></td></tr></table></figure>

<p>因为：单引号忽略被它括起来的所有特殊字符。</p>
<h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><p>一般来说，要输入双引号，需要用 “Shift键 + 单引号的按键”。</p>
<p>不同于单引号忽略所有特殊字符，双引号忽略大多数特殊字符，但不包括：美元符号（ $ ）、反引号（ ` ）、反斜杠（ \ ），这 3 种特殊字符将不被忽略。 不忽略美元符号意味着 Shell 在双引号内部可进行变量名替换。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">message&#x3D;&#39;Hello World&#39;</span><br><span class="line">echo &quot;The message is $message&quot;</span><br></pre></td></tr></table></figure>

<p>执行以上脚本，显示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The message is Hello World</span><br></pre></td></tr></table></figure>

<h3 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h3><p>反引号 ( ` ) 不太常用，位于键盘的 Tab 键的上方、数字键 1 的左方。</p>
<p>反引号要求 Shell 执行被它括起来的内容。 什么意思呢？我们来看一个例子你就懂了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">message&#x3D;&#96;pwd&#96;</span><br><span class="line">echo &quot;You are in the directory $message&quot;</span><br></pre></td></tr></table></figure>

<p>运行这个脚本，显示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You are in the directory &#x2F;home&#x2F;pearfl</span><br></pre></td></tr></table></figure>



<h2 id="read-请求输入"><a href="#read-请求输入" class="headerlink" title="read : 请求输入"></a>read : 请求输入</h2><h3 id="p-：显示提示信息"><a href="#p-：显示提示信息" class="headerlink" title="-p ：显示提示信息"></a>-p ：显示提示信息</h3><p>目前来说，read 命令提供了 -p 参数，p 是 prompt 的首字母，表示“提示”。</p>
<h3 id="n-：限制字符数目"><a href="#n-：限制字符数目" class="headerlink" title="-n ：限制字符数目"></a>-n ：限制字符数目</h3><p>用 -n 参数，我们可以限制用户输入的字符串的最大长度（字符数）。n 是 number 的首字母，是英语“数目”的意思。</p>
<h3 id="t-：限制输入时间"><a href="#t-：限制输入时间" class="headerlink" title="-t ：限制输入时间"></a>-t ：限制输入时间</h3><p>用 -t 参数，我们可以限定用户的输入时间（以秒为单位），也就是说超过这个时间，就不读取输入了。t 是 time 的首字母，是英语“时间”的意思。</p>
<h4 id="s-：隐藏输入内容"><a href="#s-：隐藏输入内容" class="headerlink" title="-s ：隐藏输入内容"></a>-s ：隐藏输入内容</h4><p>用 -s 参数，我们可以隐藏输入内容。一般用不到，但是如果你想要用户输入的是一个密码，那 -s 参数还是有用的。</p>
<h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><p><strong>在 Bash 中，所有的变量都是字符串</strong></p>
<p><strong>let 命令可以用于赋值</strong></p>
<p>可用的运算符是以下几种：</p>
<table>
<thead>
<tr>
<th align="left">运算</th>
<th align="left">符号</th>
</tr>
</thead>
<tbody><tr>
<td align="left">加法</td>
<td align="left">+</td>
</tr>
<tr>
<td align="left">减法</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">乘法</td>
<td align="left">*</td>
</tr>
<tr>
<td align="left">除法</td>
<td align="left">/</td>
</tr>
<tr>
<td align="left">幂（乘方）</td>
<td align="left">**</td>
</tr>
<tr>
<td align="left">余（整数除法的余数）</td>
<td align="left">%</td>
</tr>
</tbody></table>
<p><strong>如果你要做带小数的运算，那么需要用到 bc 命令</strong></p>
<h2 id="参数变量"><a href="#参数变量" class="headerlink" title="参数变量"></a>参数变量</h2><p>假设，我们可以这样调用我们的脚本文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;variable.sh 参数1 参数2 参数3 ...</span><br></pre></td></tr></table></figure>

<p>这些个 参数1，参数2，参数3 … 被称为“参数变量”。</p>
<p>但问题是我们还不知道如何接收这些参数到我们的脚本中。</p>
<blockquote>
<p>其实不难，因为这些变量是被自动创建的。</p>
</blockquote>
<ul>
<li><code>$#</code> ：包含参数的数目。</li>
<li><code>$0</code> ：包含被运行的脚本的名称 （我们的示例中就是 variable.sh ）。</li>
<li><code>$1</code>：包含第一个参数。</li>
<li><code>$2</code>：包含第二个参数。<br>…</li>
<li><code>$8</code> ：包含第八个参数。<br>…<br>以此类推。</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array&#x3D;(&#39;value0&#39; &#39;value1&#39; &#39;value2&#39;)</span><br></pre></td></tr></table></figure>

<p>上面的语句定义了一个数组变量，名叫 array（array 是英语“数组”的意思），其中包含三个值：value0，value1，value2。</p>
<p>如果要访问其中一个格子的内容，要用到这样的语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;array[2]&#125;</span><br></pre></td></tr></table></figure>

<p>以上语句表示数组中编号为 2 的元素（在我们的情况就是 value2 ）。</p>
<blockquote>
<p>注意：和大多数编程语言一样，Shell 中的数组的下标（index）也基本是从 0 开始的，而不是从 1 开始。因此，第一个元素的编号（下标）就是 0，第二个元素的下标就是 1，以此类推。<br>不过，也不是所有 Shell 语言的数组下标都是从 0 开始，不少 Shell 语言（例如 Csh，Tcsh，Zsh，等等）的数组下标是从 1 开始的。</p>
</blockquote>
<h1 id="判断条件"><a href="#判断条件" class="headerlink" title="判断条件"></a>判断条件</h1><h2 id="if-最简单的条件"><a href="#if-最简单的条件" class="headerlink" title="if : 最简单的条件"></a>if : 最简单的条件</h2><p>if 条件语句的基本格式是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ 条件测试 ]</span><br><span class="line">then </span><br><span class="line">    做这个</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>fi 是 if 的反转写法，表示“if 语句结束”。then 是英语“那么”的意思。</p>
<p>“做这个”只有在“条件测试”为真时，才会被执行。</p>
<blockquote>
<p>注意：方括号 <code>[]</code> 中的 <code>条件测试</code> 两边必须要空一格。不能写成 <code>[test]</code>，而要写成 <code>[ test ]</code>。</p>
</blockquote>
<p>当然了，if 语句的基本写法还有一种，那就是把 then 写在 <code>if [ 条件测试 ]</code> 后面，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ 条件测试 ]; then</span><br><span class="line">    做这个</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用这种写法时，在 if 条件判断和 then 之间要加一个分号。</p>
</blockquote>
<p><strong>需要注意在 Shell 语言中，“等于”是用一个等号（ = ）来表示的，这和大多数主流编程语言不同。</strong></p>
<h3 id="else-否则"><a href="#else-否则" class="headerlink" title="else : 否则"></a>else : 否则</h3><p>既然有“如果”的条件判断，那么也会存在条件不成立的时候</p>
<p>if 和 else 两者配合的逻辑是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ 条件测试 ]</span><br><span class="line">then</span><br><span class="line">    做这个</span><br><span class="line">else</span><br><span class="line">    做那个</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>也就是：如果“条件测试”为真，那么“做这个”被执行；否则，“做那个”被执行。</p>
<h3 id="elif-否则，如果"><a href="#elif-否则，如果" class="headerlink" title="elif : 否则，如果"></a>elif : 否则，如果</h3><p>一般来说 if 和 else 已经能满足我们的大部分条件判断需要了，但有些时候，存在好几种情况。</p>
<p>光是 if 和 else 表示的两种对立的情况已经不足以满意要求了，因此我们再来一个关键字：elif 。</p>
<p>elif 是 else if 的缩写，表示“否则 - 如果”。</p>
<p>if， elif 和 else 三者配合的逻辑是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ 条件测试 1 ]</span><br><span class="line">then</span><br><span class="line">    做事情 1</span><br><span class="line">elif [ 条件测试 2 ]</span><br><span class="line">then</span><br><span class="line">    做事情 2</span><br><span class="line">elif [ 条件测试 3 ]</span><br><span class="line">then</span><br><span class="line">    做事情 3</span><br><span class="line">else</span><br><span class="line">    做其他事情</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="不同的测试类型"><a href="#不同的测试类型" class="headerlink" title="不同的测试类型"></a>不同的测试类型</h2><p>在 Bash 中我们可以做三种测试：</p>
<ul>
<li>测试字符串</li>
<li>测试数字</li>
<li>测试文件</li>
</ul>
<h4 id="测试字符串"><a href="#测试字符串" class="headerlink" title="测试字符串"></a>测试字符串</h4><p>我们之前的课程已经说过：在 Shell 中，所有的变量都是字符串。</p>
<p>因此，要做字符串的测试非常简单。记住以下表格：</p>
<table>
<thead>
<tr>
<th align="left">条件</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$string1 = $string2</td>
<td align="left">两个字符串是否相等。Shell 大小写敏感，因此 A 和 a 是不一样的。</td>
</tr>
<tr>
<td align="left">$string1 != $string2</td>
<td align="left">两个字符串是否不同。</td>
</tr>
<tr>
<td align="left">-z $string</td>
<td align="left">字符串 string 是否为空。z 是 zero 的首字母，是英语“零”的意思。</td>
</tr>
<tr>
<td align="left">-n $string</td>
<td align="left">字符串 string 是否不为空。n 是英语 not 的首字母，是英语“不”的意思。</td>
</tr>
</tbody></table>
<h3 id="测试数字"><a href="#测试数字" class="headerlink" title="测试数字"></a>测试数字</h3><p>尽管 Shell 把所有变量都看成字符串，但是我们还是可以做数字的条件测试。记住以下表格：</p>
<table>
<thead>
<tr>
<th align="left">条件</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$num1 -eq $num2</td>
<td align="left">两个数字是否相等。和判断字符串所用的符号（ = ）不一样。eq 是 equal 的缩写，是英语“等于”的意思。</td>
</tr>
<tr>
<td align="left">$num1 -ne $num2</td>
<td align="left">两个数字是否不同。ne 是 not equal 的缩写，是英语“不等于”的意思。</td>
</tr>
<tr>
<td align="left">$num1 -lt $num2</td>
<td align="left">数字 num1 是否小于 num2。lt 是 lower than 的缩写，是英语“小于”的意思。</td>
</tr>
<tr>
<td align="left">$num1 -le $num2</td>
<td align="left">数字 num1 是否小于或等于 num2。le 是 lower or equal 的缩写，是英语“小于或等于”的意思。</td>
</tr>
<tr>
<td align="left">$num1 -gt $num2</td>
<td align="left">数字 num1 是否大于 num2。gt 是 greater than 的缩写，是英语“大于”的意思。</td>
</tr>
<tr>
<td align="left">$num1 -ge $num2</td>
<td align="left">数字 num1 是否大于或等于 num2。ge 是 greater or equal 的缩写，是英语“大于或等于”的意思。</td>
</tr>
</tbody></table>
<h3 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h3><p>相比于主流编程语言，Shell 的一大优势就是可以非常方便地测试文件：文件存在吗？我们可以写入文件吗？这个文件比那个文件修改时间更早还是更晚？等等。</p>
<p>下表非常丰富：</p>
<table>
<thead>
<tr>
<th align="left">条件</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-e $file</td>
<td align="left">文件是否存在。e 是 exist 的首字母，表示“存在”。</td>
</tr>
<tr>
<td align="left">-d $file</td>
<td align="left">文件是否是一个目录。因为 Linux 中一切都是文件，目录也是文件的一种。d 是 directory 的首字母，表示“目录”。</td>
</tr>
<tr>
<td align="left">-f $file</td>
<td align="left">文件是否是一个文件。f 是 file 的首字母，表示“文件”。</td>
</tr>
<tr>
<td align="left">-L $file</td>
<td align="left">文件是否是一个符号链接文件。L 是 link 的首字母，表示“链接”。</td>
</tr>
<tr>
<td align="left">-r $file</td>
<td align="left">文件是否可读。r 是 readable 的首字母，表示“可读的”。</td>
</tr>
<tr>
<td align="left">-w $file</td>
<td align="left">文件是否可写。w 是 writable 的首字母，表示“可写的”。</td>
</tr>
<tr>
<td align="left">-x $file</td>
<td align="left">文件是否可执行。x 是 executable 的首字母，表示“可执行的”。</td>
</tr>
<tr>
<td align="left">$file1 -nt $file2</td>
<td align="left">文件 file1 是否比 file2 更新。nt 是 newer than 的缩写，表示“更新的”。</td>
</tr>
<tr>
<td align="left">$file1 -ot $file2</td>
<td align="left">文件 file1 是否比 file2 更旧。ot 是 older than 的缩写，表示“更旧的”。</td>
</tr>
</tbody></table>
<h3 id="一次测试多个条件"><a href="#一次测试多个条件" class="headerlink" title="一次测试多个条件"></a>一次测试多个条件</h3><p>在一个条件测试中，我们可以同时测试多个条件。需要用到两种符号：</p>
<table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;&amp;</td>
<td align="left">两个 &amp;。表示“逻辑与”。此符号两端的条件必须全为真，整个条件测试才为真；只要有一个不为真，整个条件测试为假。</td>
</tr>
<tr>
<td align="left">II</td>
<td align="left">两个竖线。表示“逻辑或”。此符号两端的条件只要有一个为真，整个条件测试就为真；只有两个都为假，整个条件测试才为假。</td>
</tr>
</tbody></table>
<h3 id="反转测试"><a href="#反转测试" class="headerlink" title="反转测试"></a>反转测试</h3><p>我们可以用“否定”来反转测试条件，要用到感叹号（ <code>!</code> ）。</p>
<h2 id="case-测试多个条件"><a href="#case-测试多个条件" class="headerlink" title="case : 测试多个条件"></a>case : 测试多个条件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">    &quot;Matthew&quot;)</span><br><span class="line">        echo &quot;Hello Matthew !&quot;</span><br><span class="line">        ;;</span><br><span class="line">    &quot;Mark&quot;)</span><br><span class="line">        echo &quot;Hello Mark !&quot;</span><br><span class="line">        ;;</span><br><span class="line">    &quot;Luke&quot;)</span><br><span class="line">        echo &quot;Hello Luke !&quot;</span><br><span class="line">        ;;</span><br><span class="line">    &quot;John&quot;)</span><br><span class="line">        echo &quot;Hello John !&quot;</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo &quot;Sorry, I do not know you.&quot;</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p>来分析一下上面的程序，因为有很多新的内容：</p>
<ul>
<li><code>case $1 in</code> ：<code>$1</code> 表示我们要测试的变量是输入的第一个参数。in 是英语“在…之中”的意思。</li>
<li><code>&quot;Matthew&quot;)</code> ：测试其中一个 case，也就是 <code>$1</code> 是否等于 <code>&quot;Matthew&quot;</code>。当然，我们也可以用星号来做通配符来匹配多个字符，例如 <code>&quot;M*&quot;)</code> 可以匹配所有以 M 开头的字符串。</li>
<li><code>;;</code> ：类似于主流编程语言中的 <code>break;</code>，表示结束 case 的读取，程序跳转到 esac 后面执行。</li>
<li><code>*)</code> ：相当于 if 条件语句的 else，表示“否则”，就是“假如不等于上面任何一种情况”。</li>
<li><code>esac</code> ：是 case 的反写，表示 case 语句的结束。</li>
</ul>
<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>Shell 中，主要的循环语句有三种：</p>
<ul>
<li>while 循环</li>
<li>until 循环</li>
<li>for 循环</li>
</ul>
<h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>在 Shell 中，我们最常用的循环是 while 循环。</p>
<p>while 循环的逻辑是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while [ 条件测试 ]</span><br><span class="line">do</span><br><span class="line">    做某些事</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>当然了，我们也可以像在 if 语句中那样，把关键字 do 放到与条件测试同一行上，但是之间要加分号，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while [ 条件测试 ]; do</span><br><span class="line">    做某些事</span><br><span class="line">done</span><br></pre></td></tr></table></figure>



<h2 id="until-循环"><a href="#until-循环" class="headerlink" title="until 循环"></a>until 循环</h2><p>与 while 这个关键字相反的有一个 until 关键字，until 在英语中是“到…为止，直到…时”的意思。</p>
<p>把while改成until就一样了</p>
<h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><p>for 循环可以遍历一个“取值列表”，基本的逻辑如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for 变量 in &#39;值1&#39; &#39;值2&#39; &#39;值3&#39; ... &#39;值n&#39;</span><br><span class="line">do</span><br><span class="line">    做某些事</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h3 id="更常规的-for-循环"><a href="#更常规的-for-循环" class="headerlink" title="更常规的 for 循环"></a>更常规的 for 循环</h3><p>刚才我们看到的 for 循环，和主流编程语言中的语法略有不同，不过我们可以借助 seq 命令，来实现类似主流编程语言中的 for 循环的语法。</p>
<p>seq 是 sequence 的缩写，是英语“序列”的意思。</p>
<p>来写一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">for i in &#96;seq 1 10&#96;</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>定义（或创建） Shell 函数是非常容易的。有两种方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数名 () &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function 函数名 &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这两种方式都是可行的。看你个人喜好用哪一种方式。</p>
</li>
<li><p>函数名后面跟着的圆括号里不加任何参数：这一点与主流编程语言很不相同。C 语言，Java，C++ 等语言中，函数的圆括号中是可以放置参数的（也就是函数的一部分输入），但是 <strong>Shell 中的函数的圆括号里不能放置参数</strong>。</p>
</li>
<li><p>函数的完整定义必须置于函数的调用之前。</p>
</li>
</ul>
<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>在 Shell 函数中，我们给它传递参数的方式其实很像给 Shell 脚本传递命令行参数。我们把参数直接置于函数名字后面，然后就像我们之前 Shell 脚本的参数那样：<code>$1</code>，<code>$2</code>，<code>$3</code>等等</p>
<p>我们来看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">print_something () &#123;</span><br><span class="line">    echo Hello $1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print_something Matthew</span><br><span class="line">print_something Mark</span><br><span class="line">print_something Luke</span><br><span class="line">print_something John</span><br></pre></td></tr></table></figure>



<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>Shell 的函数却没办法做到。但是 Shell 的函数可以返回一个状态，有点类似一个程序或命令退出时会有一个退出状态，表明是否成功。</p>
<p>Shell 函数要返回状态，也用 return 这个关键字（ return 是英语“返回”的意思）。</p>
<p>一般来说，返回状态 0 表示一切顺利；一个非零值表示有错误。</p>
<p><strong>值得一提的是exit和return有很多有意思的相同点，但exit是系统级的比return更强大，return仅在函数中使用,exit可以在任何地方使用，有兴趣的可以了解其中的区别</strong></p>
<h2 id="变量作用范围"><a href="#变量作用范围" class="headerlink" title="变量作用范围"></a>变量作用范围</h2><p>变量的作用范围意味着一个 Shell 脚本的哪些部分可以访问到这个变量。</p>
<p>默认来说，一个变量是“全局的”（global），意味着在脚本的任何地方都可以访问它。</p>
<p>我们也可以创建局部（local）变量。当我们在函数中创建局部变量时，这个变量就只能在这个函数中被访问。</p>
<p>要定义一个局部变量，我们只要在第一次给这个变量赋值时在变量名前加上关键字 local 即可（ local 是英语“本地的”的意思）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">local_global () &#123;</span><br><span class="line">    local var1&#x3D;&#39;local 1&#39;</span><br><span class="line">    echo Inside function: var1 is $var1 : var2 is $var2</span><br><span class="line">    var1&#x3D;&#39;changed again&#39;   # 这里的 var1 是函数中定义的局部变量</span><br><span class="line">    var2&#x3D;&#39;2 changed again&#39; # 这里的 var2 是函数外定义的全局变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>定义局部变量有一个好处，就是可以防止被脚本的其它地方的代码意外改变数值。</p>
<blockquote>
<p>在函数中，尽量用局部变量。只有实在不行才用全局变量，毕竟全局变量不太安全。</p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Maven新建工程卡顿问题</title>
    <url>/2020/03/14/54.%E8%A7%A3%E5%86%B3Maven%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>通过链接<a href="https://repo.maven.apache.org/maven2/archetype-catalog.xml下载" target="_blank" rel="noopener">https://repo.maven.apache.org/maven2/archetype-catalog.xml下载</a></p>
<p>拷贝到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F:\software\maven_repository\</span><br></pre></td></tr></table></figure>

<p>如果你没有修改默认路径的话，应该是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator\.m2\repository\org\apache\maven\archetype\archetype-catalog\3.1.2</span><br></pre></td></tr></table></figure>

<p>IDEA创建的时候添加参数命令<strong>archetypeCatalog=local</strong></p>
<p>或者命令行然后在执行的命令后面加上增加参数<strong>-DarchetypeCatalog=local</strong>，变成读取本地文件即可。</p>
<p>不想这么麻烦直接弄阿里云镜像也可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">     &lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line">     &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">     &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line">     &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;central&lt;&#x2F;url&gt;</span><br><span class="line">   &lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure>





<a id="more"></a>

<p>私用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\Programme\apache\apache-maven-3.6.3</span><br><span class="line"></span><br><span class="line">D:\Programme\apache\apache-maven-3.6.3\conf\settings.xml</span><br><span class="line"></span><br><span class="line">archetypeCatalog&#x3D;local</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>生产必知</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx安装</title>
    <url>/2020/03/13/53.Nginx%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>依赖安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ autoconf pcre pcre-devel make automake wget http-tools vim</span><br></pre></td></tr></table></figure>

<p>Nginx官网：<a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">https://nginx.org/en/download.html</a></p>
<p>本文版本选择Stable version中的1.16.1版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.16.1.tar.gz</span><br><span class="line">tar -zxvf nginx-1.16.1.tar.gz -C ~&#x2F;app&#x2F;</span><br><span class="line">cd ~&#x2F;app&#x2F;nginx-1.16.1</span><br><span class="line"></span><br><span class="line">.&#x2F;configure  --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx  --sbin-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx --conf-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf --error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log  --http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  --pid-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx&#x2F;nginx.pid --lock-path&#x3D;&#x2F;var&#x2F;lock&#x2F;nginx.lock  --user&#x3D;nginx --group&#x3D;nginx --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;client&#x2F; --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;proxy&#x2F; --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;fcgi&#x2F; --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;uwsgi --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;scgi --with-pcre</span><br><span class="line"></span><br><span class="line">useradd -s &#x2F;sbin&#x2F;nologin -M nginx</span><br><span class="line">mkdir -p &#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;client&#x2F;</span><br><span class="line"></span><br><span class="line">sudo make &amp;&amp; make install</span><br></pre></td></tr></table></figure>



<p>查找nginx安装地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure>

<p>结果：/usr/local/nginx</p>
<h2 id="Nginx常用操作"><a href="#Nginx常用操作" class="headerlink" title="Nginx常用操作"></a>Nginx常用操作</h2><p>启动、停止nginx</p>
<p>cd /usr/local/nginx/sbin/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;nginx 	#启动</span><br><span class="line">.&#x2F;nginx -s stop		#停止</span><br><span class="line">.&#x2F;nginx -s quit		#退出</span><br><span class="line">.&#x2F;nginx -s reload	#重新加载配置文件</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda基础操作</title>
    <url>/2020/03/10/52.Anaconda%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>1.添加清华仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>



<p>2.升级当前版本的conda</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure>



<p>3.创建并激活一个环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create --name snowflake</span><br><span class="line"></span><br><span class="line">Linux，OS X: source activate snowflakes</span><br><span class="line">Windows：activate snowflake&#96;</span><br></pre></td></tr></table></figure>



<p>4.切换到另一个环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Linux，OS X: source activate snowflakes</span><br><span class="line">Windows：activate snowflakes</span><br><span class="line"></span><br><span class="line">Linux，OS X: source deactivate</span><br><span class="line">Windows: deactivate</span><br></pre></td></tr></table></figure>



<p>5.删除环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda remove -n flowers --all</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>流与输出重定向</title>
    <url>/2020/03/10/51.%E6%B5%81%E4%B8%8E%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<p>流就是读一点数据, 处理一点点数据</p>
<p>重定向，是什么意思呢？简单来说，就是我们可以把本来要显示在终端的命令结果，输送到别的地方：到文件中或者作为其他命令的输入（命令的链接，或者叫命令管道）。</p>
<ul>
<li>&gt; ：重定向到文件中。如果文件已存在，则覆盖文件内容；文件不存在，则创建文件。</li>
<li>&gt;&gt; ：重定向到文件末尾。如果文件不存在，则创建文件。</li>
</ul>
<p>&gt; 和 &gt;&gt; 符号只是将标准输出重定向到文件，并不能将标准错误输出重定向到文件。</p>
<p>那么我们要重定向标准错误输出，该怎么办呢？</p>
<p>我们就要用到 2&gt; 这个符号。是的，就是在 &gt; 这个符号左边紧挨着写一个 2。</p>
<p>为什么是 2 呢？标准错误输出的文件描述符是 2，所以这里的 2 表示标准错误输出。如果没有 2，单独的 &gt; 符号就是重定向标准输出（文件描述符为 1）。</p>
<p>我们补充一下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat not_exist_file.csv &gt; results.txt 2&gt; errors.log</span><br></pre></td></tr></table></figure>

<p>这个命令里有两个重定向：</p>
<ul>
<li>&gt; results.txt ：将标准输出重定向到 results.txt 文件中；</li>
<li>2&gt; errors.log ：将标准错误输出重定向到 errors.log 文件中。</li>
</ul>
<p>也就是说：</p>
<ul>
<li>假如 not_exist_file.csv 这个文件确实存在，将其内容写入 results.txt 文件中。</li>
<li>假如 not_exist_file.csv 这个文件不存在，将错误信息写入 errors.log 文件中。</li>
</ul>
<h4 id="合并输出"><a href="#合并输出" class="headerlink" title="合并输出"></a>合并输出</h4><p>上面我们学习了如何将标准输出和标准错误输出分别重定向到不同文件。但是有的时候，我们比较“任性”，就想把标准输出和标准错误输出都重定向到同一个地方。怎么做呢？</p>
<p>须要使用 2&gt;&amp;1 这个组合符号。</p>
<p>看着怪怪的对吧？仅由四个字符组成。这个符号的作用是：将标准错误输出重定向到与标准输出相同的地方。</p>
<p>我们用实例演示一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat not_exist_file.csv &gt; results.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>上面的命令的作用是：将 <code>cat not_exist_file.csv</code> 这个命令的所有输出（标准输出和标准错误输出）都重定向到 results.txt 文件中。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul>
<li>2&gt; ：将标准错误输出重定向到文件。如果文件已经存在，则覆盖文件内容；如果不存在，则创建文件。</li>
<li>2&gt;&gt; ：将标准错误输出重定向到文件末尾。如果文件不存在，则创建文件。</li>
<li>2&gt;&amp;1 ：将标准输出和标准错误输出重定向到同一个地方。</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>重定向</tag>
      </tags>
  </entry>
  <entry>
    <title>nohup与前台后台操作</title>
    <url>/2020/03/10/50.nohup%E4%B8%8E%E5%89%8D%E5%8F%B0%E5%90%8E%E5%8F%B0%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="1-amp-符号和-nohup-命令：后台运行进程"><a href="#1-amp-符号和-nohup-命令：后台运行进程" class="headerlink" title="1. &amp; 符号和 nohup 命令：后台运行进程"></a>1. &amp; 符号和 nohup 命令：后台运行进程</h2><p>我们到目前为止用终端做的事情都是目所能及的，也就是说：我们运行的命令都是在前台可见的。</p>
<p>这样的一个好处是我们可以看到命令运行的过程，有什么问题可以及时发现。但是也有缺陷，例如有的命令运行耗时良久，我们又不想无所事事，怎么办呢？难道我开一个终端专门执行一个耗时命令，然后为了能做其他事情，我再启动一个终端，那也很不方便。</p>
<p>事实上，我们可以在同一个终端中同时运行好几个命令。怎么做呢？就需要用到后台进程的概念。</p>
<a id="more"></a>

<h4 id="前台进程和后台进程"><a href="#前台进程和后台进程" class="headerlink" title="前台进程和后台进程"></a>前台进程和后台进程</h4><p>默认情况下，用户创建的进程都是前台进程。前台进程从键盘读取数据，并把处理结果输出到显示器。</p>
<p>我们可以看到前台进程的运行过程。例如，使用 ls 命令来遍历当前目录下的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>这个程序就运行在前台，它会直接把结果输出到显示器。如果 ls 命令需要数据（实际上不需要），那么它会等待用户从键盘输入。</p>
<p>当程序运行在前台时，由于命令提示符（$）还未出现，用户不能输入其他命令；即使程序需要运行很长时间，也必须等待程序运行结束才能输入其他命令。</p>
<p>后台进程与键盘没有必然的关系。当然，后台进程也可能会等待键盘输入。</p>
<p>后台进程的优点是不必等待程序运行结束就可以输入其他命令。</p>
<p>那么怎么使一个进程（程序的实例）运行在后台呢？</p>
<h4 id="amp-符号：在后台运行进程"><a href="#amp-符号：在后台运行进程" class="headerlink" title="&amp; 符号：在后台运行进程"></a>&amp; 符号：在后台运行进程</h4><p>前面说过，让一个进程在后台运行有几种方法。</p>
<p>我们带大家来学习第一种，很简单：就是在你要运行的命令最后加上 &amp; 这个符号。</p>
<p>我们可以用熟悉的 cp 命令做例子。例如，我运行 cp 命令来拷贝文件：emacs 的软件包。当然了，你可以用其他文件来测试。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp emacs-26.2.tar.gz emacs-26.2-copy.tar.gz &amp;</span><br></pre></td></tr></table></figure>

<p>命令最后加了 &amp; 符号，运行时此进程就成为了后台进程。终端输出了一些信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1] 2051</span><br></pre></td></tr></table></figure>

<ul>
<li><p>[1] ：这是此终端的后台进程的标号。因为这是第一个后台进程，所以标号为 1。</p>
</li>
<li><p>2051 ：这是进程号（PID），如果你想要结束这个后台进程，你可以用 kill 命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill 2051</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>我们虽然看不到这个拷贝进程的“所作所为”，但它确实在后台默默进行着文件的拷贝。</p>
<p>可以看到，终端显示了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1]+  Done    cp emacs-26.2.tar.gz emacs-26.2-copy.tar.gz</span><br></pre></td></tr></table></figure>

<p>Done 是英语“完成的”的意思，表示这个后台进程的任务已经完成了。</p>
<h4 id="nohup-命令：使进程与终端分离"><a href="#nohup-命令：使进程与终端分离" class="headerlink" title="nohup 命令：使进程与终端分离"></a>nohup 命令：使进程与终端分离</h4><p>&amp; 符号虽然常用，但却有一个不可忽视的缺点：后台进程与终端相关联。一旦终端关闭或者用户登出，进程就自动结束。</p>
<p>如果我们想让进程在以上情况下仍然继续在后台运行，那么我们须要用到 nohup 命令。</p>
<p>当用户注销（logout）或者网络断开时，终端会收到 HUP（是 hangup 的缩写，英语“挂断”的意思）信号从而关闭其所有子进程；终端被关闭时也会关闭其子进程。</p>
<p>我们可以用 nohup 命令使命令不受 HUP 信号影响。</p>
<p>我们用 man 来看一下 nohup 命令的解释：</p>
<p>nohup 命令的简单描述如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run a command immune to hangups, with output to a non-tty</span><br></pre></td></tr></table></figure>

<p>翻译出来大致就是：“使得运行的命令不受 hangup 信号影响，而且输出会存放到一个非 tty 中”。</p>
<p>nohup 命令的用法很简单：在 nohup 命令之后接要运行的命令。例如，我们可以用 nohup 配合 cp 命令来实现文件的拷贝（这次拷贝的是 node.js 的源码。当然了，你可以用其他文件来测试）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup cp node-v10.15.3.tar.gz node-v10.15.3-copy.tar.gz</span><br></pre></td></tr></table></figure>

<p>可以看到这次的输出信息是：“ignoring input and appending output to nohup.out”。</p>
<p>大致意思是：“忽略输入，把输出追加到 nohup.out 文件中”。</p>
<p>使用 nohup 命令后，输出会被默认地追加写入到一个叫 nohup.out 的文件里。</p>
<p>现在，我们的进程已经不受终端关闭或者用户断开连接的影响了，会一直运行。当然了，用 kill 命令还是可以结束此进程的。要获知进程号，可以用我们之前学过的 ps 命令配合 grep 来查找。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ax | grep command</span><br></pre></td></tr></table></figure>

<p>上面命令里的 command 指代 nohup 后面跟着的命令。</p>
<p>nohup 命令相当有用。想象以下场景：</p>
<blockquote>
<p>我登录远程服务器，然后运行了一个耗时命令，或者一个需要一直运行的命令，例如一个游戏的服务器程序。这时假如我掉线了，或者我不小心用 exit 命令退出了登录。那么这个耗时命令也会中止运行。那就很麻烦了。而且，如果这个程序本应该一直运行很久的，我也不可能一直保持登录状态等它结束啊。<br>我家里还有老婆孩子呢，不能不去做饭啊，我要下班… 开个小玩笑。</p>
</blockquote>
<p>幸好，nohup 命令解决了这样的难题。</p>
<p>一般我们也会把 nohup 和 &amp; 一起使用，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup cp node-v10.15.3.tar.gz node-v10.15.3-copy.tar.gz &amp;</span><br></pre></td></tr></table></figure>

<h2 id="2-Ctrl-Z，jobs，bg-和-fg-命令：控制进程的前后台切换"><a href="#2-Ctrl-Z，jobs，bg-和-fg-命令：控制进程的前后台切换" class="headerlink" title="2. Ctrl + Z，jobs，bg 和 fg 命令：控制进程的前后台切换"></a>2. Ctrl + Z，jobs，bg 和 fg 命令：控制进程的前后台切换</h2><p>我们来考虑一种情况：假如你要将进程转到后台运行，但是执行命令时忘记了在最后加上 &amp; 符号。</p>
<p>如何再使此进程转为后台进程呢？有几种方法。我们一一来学习。</p>
<h4 id="Ctrl-Z：转到后台，并暂停运行"><a href="#Ctrl-Z：转到后台，并暂停运行" class="headerlink" title="Ctrl + Z：转到后台，并暂停运行"></a>Ctrl + Z：转到后台，并暂停运行</h4><p>我们用 top 命令来演示。运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>

<p>因为 top 命令的作用是实时地显示各种系统信息和进程列表。这时，我们按下 Ctrl + Z 这个组合键</p>
<p>可以看到终端显示了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1]+ Stopped top</span><br></pre></td></tr></table></figure>

<p>这行信息。</p>
<p>stopped 是英语“停止的”的意思，我们又看到 [1] 这个熟悉的信息，表示这是此终端第一个后台进程。</p>
<p>所以表示 top 命令被放到了后台，此进程还是驻留在内存中，但是被暂停运行了。这个时候命令提示符又出现了，我们可以做其他事情了。</p>
<h4 id="bg-命令：使进程转到后台"><a href="#bg-命令：使进程转到后台" class="headerlink" title="bg 命令：使进程转到后台"></a>bg 命令：使进程转到后台</h4><p>经过上面的 Ctrl + Z 操作，我们可怜的 top 进程已经被“打入冷宫”（转入后台，并且被暂停运行了）。</p>
<blockquote>
<p>但是皇后不甘心啊：“臣妾虽然做不到，但即使在冷宫中，我也要工于心计、运筹帷幄，以期早日打败甄嬛。”</p>
</blockquote>
<p>那怎么办呢？可以运行 bg 命令。</p>
<p>就是很简单地输入 bg，然后回车。bg 是英语 background 的缩写，表示“后台”。</p>
<p>bg 命令的作用是将命令转入后台运行。假如命令已经在后台，并且暂停着，那么 bg 命令会将其状态改为运行。</p>
<p>不加任何参数，bg 命令会默认作用于最近的一个后台进程，也就是刚才被 Ctrl + Z 暂停的 top 进程。如果后面加 %1，%2 这样的参数（不带 %，直接 1，2 这样也可以），则是作用于指定标号的进程。因为进程转入后台之后，会显示它在当前终端下的后台进程编号。例如目前 top 进程转入了后台，它的进程编号是 1（可以由 [1]+ 推断）。依次类推，bg %2 就是作用于编号为 2 的后台进程。</p>
<p>补充一些知识：</p>
<blockquote>
<p>Linux 中，进程有 5 种状态：</p>
<ol>
<li>运行 (正在运行或在运行队列中等待)</li>
<li>中断 (休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li>
<li>不可中断 (收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li>
<li>僵死 (进程已终止, 但进程描述符存在, 直到父进程使用 wait4() 系统调用后释放)</li>
<li>停止 (进程收到 SIGSTOP, SIGSTP, SIGTIN, SIGTOU 信号后停止运行)</li>
</ol>
</blockquote>
<blockquote>
<p>ps 命令标识进程的 5 种状态码如下：</p>
<ol>
<li>D 不可中断 uninterruptible sleep (usually IO)</li>
<li>R 运行 runnable (on run queue)</li>
<li>S 中断 sleeping</li>
<li>T 停止 traced or stopped</li>
<li>Z 僵死 a defunct (“zombie”) process</li>
</ol>
</blockquote>
<h4 id="jobs-命令：显示后台进程状态"><a href="#jobs-命令：显示后台进程状态" class="headerlink" title="jobs 命令：显示后台进程状态"></a>jobs 命令：显示后台进程状态</h4><p>这个命令很强大，毕竟和乔布斯乔老爷子（乔布斯的英文就是 jobs，全名是 Steve Jobs。job 是英语“工作”的意思，jobs 是复数形式）一样名字么。</p>
<p>jobs 命令的作用是显示当前终端里的后台进程状态。虽然我们可以用 ps 命令来查看进程状态，但是 ps 命令输出的进程列表太长了。</p>
<p>jobs 命令的输出共分三列，我们逐列来说明：</p>
<ol>
<li>显示后台进程标号：比如上例中 top 进程的标号是 1，grep 进程的标号是 2，如果还有其他后台进程，那么就会有 [3]，[4]等等。这个标号和 PID（进程号）是不一样的。这个标号只是显示当前终端下的后台进程的一个编号；</li>
<li>显示后台进程状态：比如 Stopped 是“停止的”的意思，Running 是“运行的”的意思。还有其他状态；</li>
<li>命令本身。</li>
</ol>
<h4 id="fg-命令：使进程转到前台"><a href="#fg-命令：使进程转到前台" class="headerlink" title="fg 命令：使进程转到前台"></a>fg 命令：使进程转到前台</h4><p>fg 是英语 foreground 的意思，表示“前台”。</p>
<p>与 bg 命令相反，fg 命令的作用是：使进程转为前台运行。</p>
<p>用法也很简单，和 bg 一样，如果不加参数，那么 fg 命令作用于最近的一个后台进程；如果加参数，如 %2，那么表示作用于本终端中第二个后台进程。</p>
<p><img src="http://img1.sycdn.imooc.com/5d27ed94000124f610581196.png" alt="图片描述"></p>
<p>解释一下上图：</p>
<ol>
<li>如果我们运行一个程序，默认情况下，它会成为一个前台运行的进程。我们可以按组合键 Ctrl + C 来销毁此进程。</li>
<li>我们也可以使此进程在后台运行。假如运行程序时就用 &amp; 放在命令最后，那么进程就会在后台运行。</li>
<li>假如在进程运行起来后，按 Ctrl + Z，则进程会转到后台，并且停止。此时如果运行 bg 命令，则进程重新运行，并继续在后台。</li>
<li>fg 命令可以使进程转到前台，并且运行。</li>
</ol>
<p>花点时间好好理解一下这个状态图。这个图很重要，几乎概括了后台前台进程切换的所有情况。</p>
<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ol>
<li>我们可以使程序在后台运行，成为后台进程。这样在当前终端中我们就可以做其他事了，而不必等待此进程运行结束。</li>
<li>为了使一个程序在后台运行，可以在命令的最后加上 &amp; 这个符号。但是，如果你关闭终端或退出登录，此后台进程还是会结束。为了将后台进程与本终端分离，可以使用 nohup 命令，使得进程不再受终端关闭或用户登出的影响。</li>
<li>如果你运行了一个前台进程，但是想要将其转为后台运行进程。你可以先用 Ctrl + Z 组合键将其转为后台暂停，然后运行 bg 命令使其在后台重新运行。如果你要将一个后台命令（不管它是后台运行还是后台暂停）重新转为前台运行，只要用 fg 命令就可以了。</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>screen</tag>
        <tag>nohub</tag>
      </tags>
  </entry>
  <entry>
    <title>python虚拟环境</title>
    <url>/2020/03/09/45.python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p>Python 3 中自带有虚拟环境模块，通过它即可创建虚拟环境，无需借助其它工具。</p>
<p>创建虚拟环境使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -m venv 虚拟环境名称</span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -m venv venv</span><br></pre></td></tr></table></figure>

<p>此时将在当前目录中创建出 <code>venv</code> 目录，这即是虚拟环境目录，其中包含 Python 运行环境。</p>
<h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><p>要使用虚拟环境首先需要激活它，激活后当前命令行所执行的 Python 代码都将运行于该虚拟环境中。</p>
<p>Windows 操作系统中使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd venv\Scripts</span><br><span class="line">activate.bat</span><br></pre></td></tr></table></figure>

<p>Linux 和 MacOS 中使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source venv/bin/activate</span><br></pre></td></tr></table></figure>

<p>上述命令执行过后，命令行的提示符前将显示 <code>(venv)</code>，如下：</p>
<blockquote>
<p>(venv) ➜</p>
</blockquote>
<p>这表示当前已处于虚拟环境中。此后在该命令行中所执行的所有 Python 代码都运行于该虚拟环境中。</p>
<h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><p>当我们不要使用虚拟环境时，可以退出当前虚拟环境。</p>
<p>Windows 操作系统中使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd venv\Scripts</span><br><span class="line">deactivate.bat</span><br></pre></td></tr></table></figure>

<p>Linux 和 MacOS 中使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<p>此后命令行的提示符将恢复回原本状态。</p>
]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>linux数据处理</title>
    <url>/2020/03/09/35.linux%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ol>
<li>grep 命令：筛选数据</li>
<li>sort 命令：为文件排序</li>
<li>wc 命令：文件的统计</li>
<li>uniq 命令：删除文件中的重复内容</li>
<li>cut 命令：剪切文件的一部分内容</li>
</ol>
<a id="more"></a>



<h2 id="1-grep-命令：筛选数据"><a href="#1-grep-命令：筛选数据" class="headerlink" title="1. grep 命令：筛选数据"></a>1. grep 命令：筛选数据</h2><p>grep 是 Globally search a Regular Expression and Print 的缩写，意思是“全局搜索一个正则表达式，并且打印”。</p>
<p>grep 命令的功能简单说来是在文件中查找关键字，并且显示关键字所在的行。</p>
<p>grep 命令极为强大，也是 Linux 中使用最多的命令之一。它的强大之处在于它不仅可以实现简单的查找，而且可以配合 <a href="http://baike.baidu.com/view/94238.htm" target="_blank" rel="noopener">正则表达式</a> 来实现比较复杂的查找。</p>
<h4 id="grep-的简单用法"><a href="#grep-的简单用法" class="headerlink" title="grep 的简单用法"></a>grep 的简单用法</h4><p>grep 的使用方法有很多种，我们一开始先学习最基本的用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep text file</span><br></pre></td></tr></table></figure>

<p>可以看到，上面就是 grep 命令的最基本用法。</p>
<p>text 代表要搜索的文本，file 代表供搜索的文件。</p>
<p>我们用实际的例子来学习：比如我要在用户的家目录的 .bashrc 文件中搜索 alias 这个文本，而且显示所有包含alias的行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep alias .bashrc</span><br></pre></td></tr></table></figure>

<p>如果我们要用 grep 命令在一个文件中查找用空格隔开的文本，那么就要加上双引号，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &quot;Hello World&quot; file2</span><br></pre></td></tr></table></figure>

<p>如果我们要用 grep 命令在一个文件中查找用空格隔开的文本，那么就要加上双引号，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &quot;Hello World&quot; file2</span><br></pre></td></tr></table></figure>



<h4 id="i-参数：忽略大小写"><a href="#i-参数：忽略大小写" class="headerlink" title="-i 参数：忽略大小写"></a>-i 参数：忽略大小写</h4><p>默认的情况下，grep 命令是区分大小写的，也就是说搜索的文本将严格按照大小写来搜索。比如我搜索的文本是 text，那么就不会搜出 Text，tExt，TEXT 等等文本。</p>
<p>但是我们可以给 grep 加上 -i 参数，使得 grep 可以忽略大小写。i 是英语 ignore 的缩写，表示“忽略”。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -i alias .bashrc</span><br></pre></td></tr></table></figure>



<h4 id="n-参数：显示行号"><a href="#n-参数：显示行号" class="headerlink" title="-n 参数：显示行号"></a>-n 参数：显示行号</h4><p>-n 参数的作用很简单，就是显示搜索到的文本所在的行号。n 是英语 number 的缩写，表示“数字，编号”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -n alias .bashrc</span><br></pre></td></tr></table></figure>



<h4 id="v-参数：只显示文本不在的行"><a href="#v-参数：只显示文本不在的行" class="headerlink" title="-v 参数：只显示文本不在的行"></a>-v 参数：只显示文本不在的行</h4><p>-v 参数很有意思，v 是 invert 的缩写，表示“颠倒，倒置”。-v 参数的作用与正常 grep 的作用正好颠倒，就是只显示搜索的文本不在的那些行。</p>
<h4 id="r-参数：在所有子目录和子文件中查找"><a href="#r-参数：在所有子目录和子文件中查找" class="headerlink" title="-r 参数：在所有子目录和子文件中查找"></a>-r 参数：在所有子目录和子文件中查找</h4><p>如果你不知道你要找的文本在哪个文件里，你可以用强大的 -r 参数。</p>
<p>r 是英语 recursive 的缩写，表示“递归”。</p>
<p>如果用了 -r 参数，那么 grep 命令使用时的最后一个参数（grep text file 这个模式中的 file）需要换成 directory，也就是必须是一个目录。因为 -r 参数是让 grep 命令能够在指定目录的所有子目录和子文件中查找文本。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -r &quot;Hello World&quot; folder&#x2F;</span><br></pre></td></tr></table></figure>

<p>表示在 folder 这个目录的所有子目录和子文件中查找 Hello World 这个文本。当然了，以上例子中，folder 后面的斜杠（/）不是必须的，这里只是为了清楚表明 folder 是一个目录。只要 folder 是一个目录，Linux 系统是不会搞错的。</p>
<p>Linux 中还有一个 rgrep 的命令，它的作用相当于 grep -r 。</p>
<h4 id="grep-的高级用法：配合正则表达式"><a href="#grep-的高级用法：配合正则表达式" class="headerlink" title="grep 的高级用法：配合正则表达式"></a>grep 的高级用法：配合正则表达式</h4><p>正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。</p>
<p>grep 配合正则表达式就可以实现比较高级的搜索了。</p>
<p>我们首先来看一眼以下的这个表格，表格中列出了最常用的一些正则表达式的字符以及其含义：</p>
<table>
<thead>
<tr>
<th align="left">特殊字符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.</td>
<td align="left">匹配除 “\n” 之外的任何单个字符</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">行首（匹配输入字符串的开始位置）</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">行尾（匹配输入字符串的结束位置）</td>
</tr>
<tr>
<td align="left">[]</td>
<td align="left">在中括号中的任意一个字符</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">问号前面的元素出现零次或一次</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">星号前面的元素可能出现零次、一次或多次</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">加号前面的元素必须出现一次以上（包含一次）</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">逻辑或</td>
</tr>
<tr>
<td align="left">()</td>
<td align="left">表达式的分组（表示范围和优先度）</td>
</tr>
</tbody></table>
<p>当然了，上表没有列出所有的正则表达式的字符。</p>
<p>首先，为了让 grep 命令知道我们要使用正则表达式，须要加上 -E 参数（E 是 extended regular expression 的第一个字母，表示“扩展的正则表达式”）。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -E Alias .bashrc</span><br></pre></td></tr></table></figure>

<p>当然了，Linux 也有一个命令 egrep，其效果等同 grep -E 。</p>
<p>到此为止，没什么新鲜的。我们用正则表达式只是和之前的搜索类似。接下来，我们才真的要用到正则表达式的特殊字符了。</p>
<p>首先来看这个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -E ^alias .bashrc</span><br></pre></td></tr></table></figure>

<p>这个例子中，我们用到了 ^ 这个特殊符号，上面的表格里对于 ^ 已经做了说明：行首（匹配输入字符串的开始位置）。也就是说，^ 后面的字符须要出现在一行的开始。</p>
<p>再来举几个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -E [Aa]lias .bashrc</span><br></pre></td></tr></table></figure>

<p> [] 的作用，是将 [] 中的字符任取其一，因此 [Aa]lias 的意思就是既可以是 Alias，又可以是 alias。因此 grep 的搜索结果把包含 Alias 和 alias 的行都列出来了。</p>
<p>再比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -E [0-4] .bashrc</span><br></pre></td></tr></table></figure>

<p>用于搜索包含 0 至 4 的任一数字的行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -E [a-zA-Z] .bashrc</span><br></pre></td></tr></table></figure>

<p>用于搜索包含在 a 至 z 之间的任意字母或者 A 至 Z 之间的任意字母的行。</p>
<p>其他正则表达式还有很多例子。就不一一列举了。</p>
<h2 id="2-sort-命令：为文件排序"><a href="#2-sort-命令：为文件排序" class="headerlink" title="2. sort 命令：为文件排序"></a>2. sort 命令：为文件排序</h2><p>我们用 sort 命令来举个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort name.txt</span><br></pre></td></tr></table></figure>

<p>sort 命令将 name.txt 文件中的行按照首字母的英文字典顺序进行了排列。</p>
<p>sort 命令并不区分大小写，小写字母开头的 jude 还是排在 John 之后。</p>
<h4 id="o-参数：将排序后的内容写入新文件"><a href="#o-参数：将排序后的内容写入新文件" class="headerlink" title="-o 参数：将排序后的内容写入新文件"></a>-o 参数：将排序后的内容写入新文件</h4><p>如果你打开 name.txt 文件，你会发现，经过了 sort 命令的“洗礼”，name.txt 中的内容还是维持原来的顺序。</p>
<p>单独使用 sort 命令是不会真正改变文件内容的，只是把排序结果显示在终端上。</p>
<p>那我们要存储排序结果到新的文件怎么办呢？可以用 -o 参数。</p>
<p>o 是 output 的首字母，表示“输出”，就是将排序结果输出到文件中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort -o name_sorted.txt name.txt</span><br></pre></td></tr></table></figure>

<p>name.txt 经过 sort 命令排序之后的内容被储存在了新的文件 name_sorted.txt 中，而 name.txt 的内容是不变的。</p>
<h4 id="r-参数：倒序排列"><a href="#r-参数：倒序排列" class="headerlink" title="-r 参数：倒序排列"></a>-r 参数：倒序排列</h4><p>-r 参数中的 r 是 reverse 的缩写，是“相反”的意思，与普通的仅用 sort 命令正好相反。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort -r name.txt</span><br></pre></td></tr></table></figure>

<h4 id="R-参数：随机排序"><a href="#R-参数：随机排序" class="headerlink" title="-R 参数：随机排序"></a>-R 参数：随机排序</h4><p>R 是英语 random 的首字母，表示“随机的，任意的”。</p>
<p>-R 参数比较“无厘头”，因为它会让 sort 命令的排序变为随机，就是任意排序，也许每次都不一样。</p>
<p>但在有些时候，-R 参数还是很有用的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort -R name.txt</span><br></pre></td></tr></table></figure>

<h4 id="n-参数：对数字排序"><a href="#n-参数：对数字排序" class="headerlink" title="-n 参数：对数字排序"></a>-n 参数：对数字排序</h4><p>对数字的排序有点特殊。默认仅用 sort 命令的时候，是不区分字符是否是数字的，会把这些数字看成字符串，按照 1-9 的顺序来排序。例如 138 会排在 25 前面，因为 1 排在 2 的前面。</p>
<p>那如果我们要 sort 命令识别整个数字，比如按照整个数值的大小顺序来说，25 应该排在 138 前面，那该怎么办呢？</p>
<p>就可以请出我们的 -n 参数了。n 是 number 的缩写。是英语“数字”的意思。-n 参数用于对数字进行排序，按从小到大排序。</p>
<p>为了演示，我们再用文本编辑器来创建一个文件，就叫 number.txt 好了。</p>
<p>里面随便填一些数字，每行一个：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line">9</span><br><span class="line">216</span><br><span class="line">28</span><br><span class="line">174</span><br><span class="line">35</span><br><span class="line">68</span><br></pre></td></tr></table></figure>

<p>然后用 sort 不加 -n 参数和加上 -n 参数分别测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line">174</span><br><span class="line">216</span><br><span class="line">28</span><br><span class="line">35</span><br><span class="line">68</span><br><span class="line">9</span><br><span class="line">---------------------------分割线</span><br><span class="line">9</span><br><span class="line">12</span><br><span class="line">28</span><br><span class="line">35</span><br><span class="line">68</span><br><span class="line">174</span><br><span class="line">216</span><br></pre></td></tr></table></figure>

<p>可以看到，不加 -n 参数时，sort 就会把这些数字看成字符串，按字符依次来排序，按照 1-9 的顺序。</p>
<p>加上 -n 参数，就会把各行的数字看成一个整体，按照大小从小到大来排序了。</p>
<h2 id="3-wc-命令：文件的统计"><a href="#3-wc-命令：文件的统计" class="headerlink" title="3. wc 命令：文件的统计"></a>3. wc 命令：文件的统计</h2><p>wc 是 word count 的缩写</p>
<p>wc 命令看起来是用来统计单词数目的，但其实 wc 的功能不仅止于此。wc 命令还可以用来统计行数，字符数，字节数等。</p>
<p>跟前面的命令一样，wc 命令的用法也是后接文件名。wc 命令很有用，应该会成为你常用的命令之一。</p>
<p>如果不加选项参数，那么 wc 命令的返回值会有些特殊，有点晦涩难懂。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wc name.txt</span><br></pre></td></tr></table></figure>

<p>可以看到返回值是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9 9 50 name.txt</span><br></pre></td></tr></table></figure>

<p>最后的 name.txt 只是表示文件名，不需考虑。</p>
<p>那么这三个数字：9，9，和 50 分别表示什么呢？</p>
<p>这三个数字，按顺序，分别表示：</p>
<ul>
<li>行数（newline counts）：newline 是英语“换行、换行符”的意思。统计行数其实就是统计换行符的数目。</li>
<li>单词数（word counts）</li>
<li>字节数（byte counts）：byte 是英语“字节”的意思，等于 8 个二进制位（bit）。</li>
</ul>
<p>可以用 man wc 查看 wc 的命令手册得知：</p>
<p>wc 的命令描述是“print newline, word, and byte counts for each file”，翻成中文就是“对每个文件，打印其行数，单词数和字节数”。</p>
<p>因为我们之前创建 name.txt 时，每一行只有一个单词（英语名字），所以这里统计的行数和单词数都是 9。</p>
<p>50 代表字节数。我数了一下，name.txt 里的 9 个英语单词一共包含 41 个英语字母（也就是 41 个英语字符），占用 41 个字节。再加上每行结尾的换行符（Linux 中换行符是 ‘\n’），共有 9 个换行符，占用 9 个字节。41 + 9 = 50，正好是 50 个字节。</p>
<p>我们稍微讲一下字符和字节的一些联系和区别：</p>
<ul>
<li>字节（Byte 或 Octet）是计量单位，表示数据量多少，是计算机存储容量的计量单位。一个字节等于 8 位（Bit，比特位，是计算机最小的存储单位。就是 0 或 1 这样的二进制位）。</li>
<li>字符（Character）是计算机中使用的文字和符号，比如 “a”、“B”、“7”、“&amp;”、“%”等。不同语言有不同的字符，一般我们中国人接触比较多的是英语和中文的字符。</li>
</ul>
<p>字符在不同的编码中所占字节数是不一样的。字符的编码和标准有不少，这里我们就不深入展开了，大家可以看这个链接来深入了解：<a href="https://baike.baidu.com/item/字符集" target="_blank" rel="noopener">字符集</a> 。</p>
<h4 id="l-参数：统计行数"><a href="#l-参数：统计行数" class="headerlink" title="-l 参数：统计行数"></a>-l 参数：统计行数</h4><p>为了只统计行数，我们可以加上 -l 参数。l 是 line 的缩写，表示“行”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wc -l name.txt</span><br></pre></td></tr></table></figure>

<h4 id="w-参数：统计单词数"><a href="#w-参数：统计单词数" class="headerlink" title="-w 参数：统计单词数"></a>-w 参数：统计单词数</h4><p>w 是word 的缩写，表示“单词”。因此 -w 参数用于统计单词。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wc -w name.txt</span><br></pre></td></tr></table></figure>

<h4 id="c-参数：统计字节数"><a href="#c-参数：统计字节数" class="headerlink" title="-c 参数：统计字节数"></a>-c 参数：统计字节数</h4><p>不知道为什么是 c，因为 byte 或者 octet（都表示“字节”）的首字母都不是 c 啊。也许 c 是 character（英语“字符”的意思）的缩写吧。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wc -c name.txt</span><br></pre></td></tr></table></figure>

<h4 id="m-参数：统计字符数"><a href="#m-参数：统计字符数" class="headerlink" title="-m 参数：统计字符数"></a>-m 参数：统计字符数</h4><p>不知道为什么是 m，因为 character（英语“字符”）的首字母不是 m ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wc -m name.txt</span><br></pre></td></tr></table></figure>



<p>为了加深理解，我们来测试一下。创建一个只包含中文字符的文本文件，可以起名叫 chinese.txt（chinese 是“中文”的意思）。在里面写入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你好吗</span><br><span class="line">我很好</span><br></pre></td></tr></table></figure>

<p>这 6 个汉字。</p>
<p>我们用 wc 命令来统计一下 chinese.txt 的字节数和字符数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wc -c chinese.txt</span><br><span class="line">wc -m chinese.txt</span><br></pre></td></tr></table></figure>

<p>chinese.txt 包含的字节数是 20，字符数是 8</p>
<p>其实这是因为使用的是 Unicode 标准 的 UTF-8 编码方式。中文字符占 3 个字节，一共有 6 个中文字符，6 * 3 = 18，再加上 2 个换行符占 2 个字节，18 + 2 = 20。</p>
<p>字符数则是 6 + 2 = 8 个</p>
<p>我们可以用 file 命令来确定文件的类型，运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file chinese.txt</span><br><span class="line">file name.txt</span><br></pre></td></tr></table></figure>

<p>chinese.txt 的编码是 UTF-8 Unicode，name.txt 的编码是 ASCII</p>
<h2 id="4-uniq-命令：删除文件中的重复内容"><a href="#4-uniq-命令：删除文件中的重复内容" class="headerlink" title="4. uniq 命令：删除文件中的重复内容"></a>4. uniq 命令：删除文件中的重复内容</h2><p>有时候，文件中包含重复的行，我们想要将重复的内容删除，</p>
<p>这时，uniq 命令就显得很有用了。</p>
<p>uniq 是英语 unique 的缩写，表示“独一无二的”。</p>
<p>为了演示，我们创建一个文件 repeat.txt（repeat 是英语“重复”的意思），里面写入如下排序好的内容（因为 uniq 命令有点“呆”，只能将连续的重复行变为一行）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Albert</span><br><span class="line">China</span><br><span class="line">France</span><br><span class="line">France</span><br><span class="line">France</span><br><span class="line">John</span><br><span class="line">Matthew</span><br><span class="line">Matthew</span><br><span class="line">patrick</span><br><span class="line">Steve</span><br><span class="line">Vincent</span><br></pre></td></tr></table></figure>

<p>可以看到，有三个 France 连在一起，两个 Matthew 连在一起。</p>
<p>我们用 uniq 命令来处理看看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uniq repeat.txt</span><br></pre></td></tr></table></figure>

<p>可以看到，三个连续的 France 只剩下一个了，两个连续的 Matthew 也只剩一个了。</p>
<p>和 sort 命令类似，uniq 命令并不会改变原文件的内容，只会把处理后的内容显示出来。</p>
<p>如果想将处理后的内容储存到一个新文件中，可以使用如下的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uniq repeat.txt unique.txt</span><br></pre></td></tr></table></figure>

<h4 id="c-参数：统计重复的行数"><a href="#c-参数：统计重复的行数" class="headerlink" title="-c 参数：统计重复的行数"></a>-c 参数：统计重复的行数</h4><p>-c 参数用于显示重复的行数，如果是独一无二的行，那么数目就是 1。c 是 count 的缩写，表示“统计，计数”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uniq -c repeat.txt</span><br></pre></td></tr></table></figure>

<h4 id="d-参数：只显示重复行的值"><a href="#d-参数：只显示重复行的值" class="headerlink" title="-d 参数：只显示重复行的值"></a>-d 参数：只显示重复行的值</h4><p>-d 参数只显示重复的行的值。d 是 duplicated 的缩写，表示“重复的”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uniq -d repeat.txt</span><br></pre></td></tr></table></figure>



<h2 id="5-cut-命令：剪切文件的一部分内容"><a href="#5-cut-命令：剪切文件的一部分内容" class="headerlink" title="5. cut 命令：剪切文件的一部分内容"></a>5. cut 命令：剪切文件的一部分内容</h2><p>cut 是英语“剪切”的意思。大家平时肯定有剪切文本内容的经历吧，一般剪切之后还会把剪切的内容粘贴到某处。</p>
<p>cut 命令用于对文件的每一行进行剪切处理。</p>
<h4 id="c-参数：根据字符数来剪切"><a href="#c-参数：根据字符数来剪切" class="headerlink" title="-c 参数：根据字符数来剪切"></a>-c 参数：根据字符数来剪切</h4><p>c 是 character 的缩写，表示“字符”。</p>
<p>比如，我们要 name.txt 的每一行只保留第 2 至第 4 个字符。可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cut -c 2-4 name.txt</span><br></pre></td></tr></table></figure>



<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ol>
<li>grep 命令应该算是在文件中查找关键字最常用的工具了。</li>
<li>grep 命令可以通过正则表达式来查找。一开始正则表达式会比较难记，但是功能很强大。我们可以调用 egrep 命令，其等价于 grep -E。</li>
<li>sort 命令用于为文件中的行按字母顺序排序。使用 -n 参数可以按照数字顺序排序。</li>
<li>wc 命令可以统计文件中行数，单词数或者字节数。</li>
<li>uniq 命令可以用于删除文件中重复的内容。</li>
<li>cut 命令用于剪切文件的一部分内容。</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>sqoop安装及配置</title>
    <url>/2020/03/09/49.sqoop%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="sqoop安装"><a href="#sqoop安装" class="headerlink" title="sqoop安装"></a>sqoop安装</h2><p>下载地址：<a href="http://archive.cloudera.com/cdh5/cdh/5/sqoop-1.4.6-cdh5.16.2.tar.gz" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/cdh/5/sqoop-1.4.6-cdh5.16.2.tar.gz</a></p>
<p>1.解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf sqoop-1.4.6-cdh5.16.2.tar.gz -C ~&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure>



<p>2.配置系统环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export SQOOP_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;sqoop-1.4.6-cdh5.16.2</span><br><span class="line">export PATH&#x3D;$SQOOP_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>



<p>3.配置conf文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp sqoop-env-template.sh sqoop-env.sh</span><br><span class="line">export HADOOP_COMMON_HOME&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;hadoop-2.6.0-cdh5.16.2</span><br><span class="line">export HADOOP_MAPRED_HOME&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;hadoop-2.6.0-cdh5.16.2</span><br><span class="line">export HIVE_HOME&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;hive-1.1.0-cdh5.16.2</span><br></pre></td></tr></table></figure>



<p>4.导入mysql的jar包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp mysql-connector-java-5.1.47-bin.jar $SQOOP_HOME&#x2F;lib&#x2F;</span><br></pre></td></tr></table></figure>



<p>5.测试是否与mysql连通</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqoop list-databases --connect jdbc:mysql:&#x2F;&#x2F;hadoop000:3306&#x2F; --username root --password xxxxxx</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="导数据模板"><a href="#导数据模板" class="headerlink" title="导数据模板"></a>导数据模板</h2><h3 id="mysql-gt-hdfs"><a href="#mysql-gt-hdfs" class="headerlink" title="mysql-&gt;hdfs"></a>mysql-&gt;hdfs</h3><p>(1).全部导入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line">--connect jdbc:mysql:&#x2F;&#x2F;hadoop000:3306&#x2F;database \</span><br><span class="line">--username root \</span><br><span class="line">--password xxxxxx \</span><br><span class="line">--table staff \</span><br><span class="line">--target-dir &#x2F;user&#x2F;database \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--fields-terminated-by &quot;\t&quot;</span><br></pre></td></tr></table></figure>

<p>(2).查询导入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line">--connect jdbc:mysql:&#x2F;&#x2F;hadoop000:3306&#x2F;database \</span><br><span class="line">--username root \</span><br><span class="line">--password xxxxxx \</span><br><span class="line">--table staff \</span><br><span class="line">--target-dir &#x2F;user&#x2F;database \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--fields-terminated-by &quot;\t&quot;</span><br><span class="line">--query &quot;select name,sex from table where id &lt;&#x3D;1 and \$CONDITIONS;&quot;</span><br></pre></td></tr></table></figure>

<p>(3).导入指定的列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line">--connect jdbc:mysql:&#x2F;&#x2F;hadoop000:3306&#x2F;database \</span><br><span class="line">--username root \</span><br><span class="line">--password xxxxxx \</span><br><span class="line">--table staff \</span><br><span class="line">--colums id,sex</span><br><span class="line">--target-dir &#x2F;user&#x2F;database \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--fields-terminated-by &quot;\t&quot;</span><br></pre></td></tr></table></figure>

<p>(4).查询条件导入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line">--connect jdbc:mysql:&#x2F;&#x2F;hadoop000:3306&#x2F;database \</span><br><span class="line">--username root \</span><br><span class="line">--password xxxxxx \</span><br><span class="line">--table staff \</span><br><span class="line">--colums id,sex</span><br><span class="line">--where &quot;id&#x3D;1&quot;</span><br><span class="line">--target-dir &#x2F;user&#x2F;database \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--fields-terminated-by &quot;\t&quot;</span><br></pre></td></tr></table></figure>



<h3 id="hdfs-gt-mysql"><a href="#hdfs-gt-mysql" class="headerlink" title="hdfs-&gt;mysql"></a>hdfs-&gt;mysql</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqoop export \</span><br><span class="line">-Dsqoop.export.records.per.statement&#x3D;10 \</span><br><span class="line">--connect jdbc:mysql:&#x2F;&#x2F;hadoop000:3306&#x2F;sqoop \</span><br><span class="line">--password xxxxxx \</span><br><span class="line">--username root \</span><br><span class="line">--table emp_demo \</span><br><span class="line">--export-dir &#x2F;user&#x2F;hadoop&#x2F;EMP_COLUMN_SPLIT \</span><br><span class="line">--columns &quot;EMPNO,ENAME,JOB,SAL,COMM&quot; \</span><br><span class="line">--fields-terminated-by &#39;\t&#39; \</span><br><span class="line">-m 1</span><br></pre></td></tr></table></figure>



<h3 id="mysql-gt-Hive"><a href="#mysql-gt-Hive" class="headerlink" title="mysql-&gt;Hive"></a>mysql-&gt;Hive</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line">--connect jdbc:mysql:&#x2F;&#x2F;hadoop000:3306&#x2F;sqoop \</span><br><span class="line">--password xxxxxx \</span><br><span class="line">--username root \</span><br><span class="line">--table emp \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--hive-import --hive-database hadoop_hive \</span><br><span class="line">--hive-table emp_import_partition \</span><br><span class="line">--hive-partition-key &#39;pt&#39; \</span><br><span class="line">--hive-partition-value &#39;2019-12-30&#39; \</span><br><span class="line">--fields-terminated-by &#39;\t&#39; \</span><br><span class="line">-m 1</span><br></pre></td></tr></table></figure>



<h3 id="hive-gt-mysql"><a href="#hive-gt-mysql" class="headerlink" title="hive-&gt;mysql"></a>hive-&gt;mysql</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqoop export \</span><br><span class="line">--connect jdbc:mysql:&#x2F;&#x2F;hadoop000:3306&#x2F;sqoop \</span><br><span class="line">--password xxxxxx \</span><br><span class="line">--username root \</span><br><span class="line">--table dept_demo \</span><br><span class="line">--export-dir &#x2F;user&#x2F;hive&#x2F;warehouse&#x2F;hadoop_hive.db&#x2F;dept \</span><br><span class="line">--fields-terminated-by &#39;\t&#39; \</span><br><span class="line">-m 1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>sqoop</tag>
      </tags>
  </entry>
  <entry>
    <title>kdevtmpfsi,kinsing挖矿病毒清理</title>
    <url>/2020/03/08/48.kdevtmpfsi,kinsing%E6%8C%96%E7%9F%BF%E7%97%85%E6%AF%92%E6%B8%85%E7%90%86/</url>
    <content><![CDATA[<p>1.top命令  找到挖矿程序(kdevtmpfsi)进程号 CUP 占用100%</p>
<p>ps -ef |grep kdevtmpfsi</p>
<p>ps -ef |grep kinsing</p>
<p>直接kill -9 (PID) 把这个线程干掉了 过一阵子又回来了，crontab也需要修改</p>
<p>2.一般情况下你第一反应只能找到kdevtmpfsi，kinsing怎么找到的？</p>
<p>pstree -a</p>
<p>(如果没有下载， yum -y install psmisc)</p>
<p>3.到的并kill线程和它的守护线程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -aux | grep kinsing</span><br><span class="line">ps -aux | grep kdevtmpfsi</span><br><span class="line">kill  -9   23437</span><br><span class="line">kill  -9   18534</span><br><span class="line">cd  &#x2F;tmp</span><br><span class="line">ls</span><br><span class="line">rm -rf kdevtmpfsi </span><br><span class="line">rm -rf &#x2F;var&#x2F;tmp&#x2F;kinsing  记得这个守护进程的文件也要删掉，找不到的话，也可以用这个命令</span><br><span class="line">find &#x2F; -name kdevtmpfsi</span><br><span class="line">find &#x2F; -name kinsing</span><br><span class="line"></span><br><span class="line">5.查找可疑定时任务</span><br><span class="line">crontab -l</span><br><span class="line">crontab -e删掉不可靠的定时任务</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>解决病毒</category>
      </categories>
      <tags>
        <tag>kdevtmpfsi</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper配置</title>
    <url>/2020/03/06/47.zookeeper%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>本文zookeeper采用zookeeper-3.4.5-cdh5.16.2版本</p>
<p>下载安装步骤本文不再提</p>
<p>下载地址：<a href="http://archive.cloudera.com/cdh5/cdh/5/zookeeper-3.4.5-cdh5.16.2.tar.gz" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/cdh/5/zookeeper-3.4.5-cdh5.16.2.tar.gz</a></p>
<p>1.配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ZOOKEEPER_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;zookeeper-3.4.5-cdh5.16.2</span><br><span class="line">export PATH&#x3D;$ZOOKEEPER_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>



<p>2.配置zoo.cfg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;home&#x2F;pearfl&#x2F;app&#x2F;zookeeper-3.4.5-cdh5.16.2&#x2F;conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">vim zoo.cfg</span><br><span class="line"></span><br><span class="line">dataDir&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;tmp&#x2F;zookeeper0000(配置)</span><br></pre></td></tr></table></figure>

<p>修改临时目录，zookeeper0000会自动创建的</p>
<p>3.开启单机zookeeper</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zkServer.sh</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Hue安装及部署</title>
    <url>/2020/03/05/46.hue%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Hue安装及部署"><a href="#Hue安装及部署" class="headerlink" title="Hue安装及部署"></a>Hue安装及部署</h1><p>hue官网：<a href="http://gethue.com/" target="_blank" rel="noopener">http://gethue.com/</a><br>配置文档：<a href="http://archive.cloudera.com/cdh5/cdh/5/hue-3.9.0-cdh5.16.2" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/cdh/5/hue-3.9.0-cdh5.16.2</a><br>源码：<a href="https://github.com/cloudera/hue" target="_blank" rel="noopener">https://github.com/cloudera/hue</a></p>
<p>这里我们直接用下载Hue：<a href="http://archive.cloudera.com/cdh5/cdh/5/hue-3.9.0-cdh5.16.2.tar.gz" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/cdh/5/hue-3.9.0-cdh5.16.2.tar.gz</a></p>
<h2 id="Hue简介"><a href="#Hue简介" class="headerlink" title="Hue简介"></a>Hue简介</h2><p>Hue是一个开源的Apache Hadoop UI系统，最早是由Cloudera Desktop演化而来，由Cloudera贡献给开源社区，它是基于Python Web框架Django实现的。通过使用Hue我们可以在浏览器端的Web控制台上与Hadoop集群进行交互来分析处理数据，例如操作HDFS上的数据，运行MapReduce Job等等。很早以前就听说过Hue的便利与强大，一直没能亲自尝试使用，下面先通过官网给出的特性，通过翻译原文简单了解一下Hue所支持的功能特性集合：</p>
<ul>
<li>默认基于轻量级sqlite数据库管理会话数据，用户认证和授权，可以自定义为MySQL、Postgresql，以及Oracle</li>
<li>基于文件浏览器（File Browser）访问HDFS</li>
<li>基于Hive编辑器来开发和运行Hive查询</li>
<li>支持基于Solr进行搜索的应用，并提供可视化的数据视图，以及仪表板（Dashboard）</li>
<li>支持基于Impala的应用进行交互式查询</li>
<li>支持Spark编辑器和仪表板（Dashboard）</li>
<li>支持Pig编辑器，并能够提交脚本任务</li>
<li>支持Oozie编辑器，可以通过仪表板提交和监控Workflow、Coordinator和Bundle</li>
<li>支持HBase浏览器，能够可视化数据、查询数据、修改HBase表</li>
<li>支持Metastore浏览器，可以访问Hive的元数据，以及HCatalog</li>
<li>支持Job浏览器，能够访问MapReduce Job（MR1/MR2-YARN）</li>
<li>支持Job设计器，能够创建MapReduce/Streaming/Java Job</li>
<li>支持Sqoop 2编辑器和仪表板（Dashboard）</li>
<li>支持ZooKeeper浏览器和编辑器</li>
<li>支持MySql、PostGresql、Sqlite和Oracle数据库查询编辑器</li>
</ul>
<a id="more"></a>



<h2 id="Hue-编译"><a href="#Hue-编译" class="headerlink" title="Hue 编译"></a>Hue 编译</h2><p>1.安装系统包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install ant asciidoc cyrus-sasl-devel cyrus-sasl-gssapi cyrus-sasl-plain gcc gcc-c++ krb5-devel libffi-devel libxml2-devel libxslt-devel make  mysql mysql-devel openldap-devel python-devel sqlite-devel gmp-devel</span><br></pre></td></tr></table></figure>

<p>2.编译Hue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxf hue-3.9.0-cdh5.16.2.tar.gz -C ~&#x2F;app&#x2F;</span><br><span class="line">cd ~&#x2F;app&#x2F;hue-3.9.0-cdh5.16.2</span><br><span class="line">make apps</span><br></pre></td></tr></table></figure>

<p>当出现类似下面文本时，说明编译成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1426 static files copied to &#39;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;hue-3.9.0-cdh5.16.2&#x2F;build&#x2F;static&#39;, 1426 post-processed.</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;hue-3.9.0-cdh5.16.2&#x2F;apps&#39;</span><br></pre></td></tr></table></figure>



<h2 id="Hue配置"><a href="#Hue配置" class="headerlink" title="Hue配置"></a>Hue配置</h2><p>配置文件地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$HUE_HOME&#x2F;desktop&#x2F;conf&#x2F;hue.ini</span><br><span class="line"></span><br><span class="line">[desktop]</span><br><span class="line">	secret_key&#x3D;23dsafksl;fkp2(随便写，做hash的)</span><br><span class="line">	http_host&#x3D;hadoop000(跑的机器)</span><br><span class="line">	http_port&#x3D;38888(8888容易被挖矿，修改)</span><br><span class="line">	time_zone&#x3D;Asia&#x2F;Shanghai(时区)</span><br><span class="line"></span><br><span class="line">启动HUE</span><br><span class="line">	build&#x2F;env&#x2F;bin&#x2F;supervisor</span><br></pre></td></tr></table></figure>



<p>1.HUE整合HDFS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">core-site.xml</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;hadoop.proxyuser.hadoop.hosts&lt;&#x2F;name&gt;</span><br><span class="line">	&lt;value&gt;*&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;hadoop.proxyuser.hadoop.groups&lt;&#x2F;name&gt;</span><br><span class="line">	&lt;value&gt;*&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">hdfs-site.xml</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.webhdfs.enabled&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">修改完Hadoop相关的配置之后，肯定需要重启才生效</span><br><span class="line"></span><br><span class="line">hue.ini内修改</span><br><span class="line">[hadoop]</span><br><span class="line">	fs_defaultfs&#x3D;hdfs:&#x2F;&#x2F;hadoop000:8020</span><br><span class="line">	webhdfs_url&#x3D;http:&#x2F;&#x2F;hadoop000:50070&#x2F;webhdfs&#x2F;v1</span><br><span class="line">	hadoop_conf_dir&#x3D;$HADOOP_HOME&#x2F;etc&#x2F;conf(HADOOP_HOME自己写pwd的那个显示)</span><br></pre></td></tr></table></figure>



<p>2.HUE整合MR/YARN</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你需要启动mr-jobhistory-daemon.sh</span><br><span class="line">	mapred-site.xml</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.address&lt;&#x2F;name&gt;</span><br><span class="line">		&lt;value&gt;hadoop000:10020&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.webapp.address&lt;&#x2F;name&gt;</span><br><span class="line">		&lt;value&gt;hadoop000:19888&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.done-dir&lt;&#x2F;name&gt;</span><br><span class="line">		&lt;value&gt;&#x2F;history&#x2F;done&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.jobhistory.intermediate-done-dir&lt;&#x2F;name&gt;</span><br><span class="line">		&lt;value&gt;&#x2F;history&#x2F;done_intermediate&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	</span><br><span class="line">	mr-jobhistory-daemon.sh start historyserver</span><br><span class="line">		jps进程: JobHistoryServer</span><br><span class="line">	</span><br><span class="line">	[yarn_clusters]</span><br><span class="line">	resourcemanager_host&#x3D;hadoop000</span><br><span class="line">	resourcemanager_port&#x3D;8032</span><br><span class="line">	resourcemanager_api_url&#x3D;http:&#x2F;&#x2F;hadoop000:8088</span><br><span class="line">	proxy_api_url&#x3D;http:&#x2F;&#x2F;hadoop000:8088</span><br><span class="line">	history_server_api_url&#x3D;http:&#x2F;&#x2F;hadoop000:19888</span><br><span class="line">	</span><br><span class="line">1.记得yarn已经配置过基础配置了，不然无法启动</span><br><span class="line">2.hue界面的超级用户名字需要和提交到yarn的用户名字相同</span><br></pre></td></tr></table></figure>



<p>3.HUE整合MySQL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[librdbms]</span><br><span class="line">	打开mysql注释</span><br><span class="line">	nice_name&#x3D;&quot;pearflDB&quot;</span><br><span class="line">	name&#x3D;demo_hive</span><br><span class="line">	engine&#x3D;mysql</span><br><span class="line">	host&#x3D;hadoop000</span><br><span class="line">	port&#x3D;3306</span><br><span class="line">	user&#x3D;root</span><br><span class="line">	password&#x3D;password</span><br></pre></td></tr></table></figure>



<p>4.HUE整合Hive</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一定要先启动hiveserver2</span><br><span class="line">	hiveserver2 1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">	[beeswax]</span><br><span class="line">	hive_server_host&#x3D;hadoop000</span><br><span class="line">	hive_server_port&#x3D;10000</span><br><span class="line">	hive_conf_dir&#x3D;$HIVE_HOME&#x2F;conf</span><br></pre></td></tr></table></figure>



<h2 id="补充问题"><a href="#补充问题" class="headerlink" title="补充问题"></a>补充问题</h2><p>1.database if locked问题要如何处理？</p>
<p>答：默认底层sqlite3，我们可以配置hue访问mysql</p>
<p>2.Cannot access: /. Note: you are a Hue admin but not a HDFS superuser, “hdfs” or part of HDFS supergroup, “supergroup”.</p>
<p>答：hue.ini配置文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server_user&#x3D;root</span><br><span class="line">server_group&#x3D;root</span><br><span class="line">default_user&#x3D;root</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hue</tag>
      </tags>
  </entry>
  <entry>
    <title>linux上的一些快捷键</title>
    <url>/2020/02/23/44.linux%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>列举一些经常使用的快捷键：</p>
<ul>
<li>Ctrl + L 用于清理终端的内容，就是清屏的作用。其实 clear 命令也有同样效果，但是你不觉得 Ctrl + L 的按键比输入 clear 这五个字母更快速吗？</li>
<li>Ctrl + D 给终端传递 EOF （End Of File，文件结束符），在运行程序时很有用。有些程序我们需要在接收到 EOF 输入时结束，那么这个快捷键就可以派上用场了。比如我们之前演示过，退出 root 用户身份，就可以用 Ctrl + D。如果你在命令行提示符后什么也不输入的情况下直接按下这组快捷键，那么就会关闭当前的终端；</li>
<li>Shift + PgUp 用于向上滚屏，与鼠标的滚轮向上滚屏是一个效果；</li>
<li>Shift + PgDn 用于向下滚屏，与鼠标的滚轮向下滚屏是一个效果。</li>
</ul>
<p>下面的快捷键在你编辑一条比较长的命令时很有用：</p>
<ul>
<li>Ctrl + A 光标跳到一行命令的开头。一般来说，Home 键有相同的效果；</li>
<li>Ctrl + E 光标跳到一行命令的结尾。一般来说，End 键有相同的效果；。</li>
<li>Ctrl + U 删除所有在光标左侧的命令字符；</li>
<li>Ctrl + K 删除所有在光标右侧的命令字符；</li>
<li>Ctrl + W 删除光标左侧的一个“单词”，这里的“单词”指的是用空格隔开的一个字符串。例如 -a 就是一个“单词”；</li>
<li>Ctrl + Y 粘贴用 Ctrl + U、 Ctrl + K 或 Ctrl + W “删除”的字符串，有点像“剪切-粘贴”。</li>
</ul>
<p>当然了，好的快捷键绝不止这些。</p>
]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop jar跑mr作业的坑</title>
    <url>/2020/02/19/43.hadoop%20jar%E8%B7%91mr%E4%BD%9C%E4%B8%9A%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h2 id="1-Driver需要extends-Configured-implements-Tool"><a href="#1-Driver需要extends-Configured-implements-Tool" class="headerlink" title="1.Driver需要extends Configured implements Tool"></a>1.Driver需要extends Configured implements Tool</h2><p>如果你不调用run方法跑Driver，那么服务器上是绝对跑不出来的</p>
<h2 id="2-Too-many-open-files问题"><a href="#2-Too-many-open-files问题" class="headerlink" title="2.Too many open files问题"></a>2.Too many open files问题</h2><p>Linux中所有的事物或资源都是以文件的形式存在，比如消息、共享内存、连接等，句柄可以理解为指向这些文件的指针。</p>
<p>对于这些句柄，Linux是有数量限制的，单个进程默认可以打开的句柄数上限</p>
<p>我们可以通过修改句柄数来解决这个问题</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>scala之val与var</title>
    <url>/2020/02/16/42.scala%E4%B9%8Bval%E4%B8%8Evar/</url>
    <content><![CDATA[<p><strong>val vs var</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val:值</span><br><span class="line">	final</span><br><span class="line">	val 值名称:类型 &#x3D; xxx</span><br><span class="line">var:变量</span><br><span class="line">	var 值名称:类型 &#x3D; xxx</span><br></pre></td></tr></table></figure>

<p>其实简单的来说，就是一个可变，一个不可变</p>
<p>如果不需要变化，就使用val，能用val就不用var =3=</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>scala</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈flume的基础使用</title>
    <url>/2020/02/13/41.%E6%B5%85%E8%B0%88flume/</url>
    <content><![CDATA[<p><strong>flume官方文档：</strong><a href="http://flume.apache.org/" target="_blank" rel="noopener">http://flume.apache.org/</a></p>
<p><img src="/images/41/41_1.png" alt="41_1"></p>
<p>从系统架构图上来看，用户只要产生行为，那么日志就会在Nginx服务器中保存，所以我们现在要做的就是把数据从Nginx服务器中使用Flume采集到HDFS上</p>
<a id="more"></a>

<h2 id="flume怎么用？"><a href="#flume怎么用？" class="headerlink" title="flume怎么用？"></a>flume怎么用？</h2><p><strong>flume</strong></p>
<p>Flume就是一个针对日志数据进行采集和汇总的一个框架</p>
<p>Flume的进程叫做Agent，每个Agent中有Srouce、Channel？Sink</p>
<p>Flume从使用层面来讲就是写配置文件，其实就是配置我们的Agent，只要学会从官网查配置就行了</p>
<p><strong>Agent</strong></p>
<p>Source中的常用方式有 avro、exec、spooling、taildir、kafka</p>
<p>Channel中的常用方式有 memory、kafka、file</p>
<p>Sink中的常用方式有 hdfs、logger、avro、kafka</p>
<h2 id="flume编译安装和配置"><a href="#flume编译安装和配置" class="headerlink" title="flume编译安装和配置"></a>flume编译安装和配置</h2><p>先配置好maven环境（参考之前的博文），解压flume-ng-1.6.0-cdh5.16.2-src.tar.gz并进入解压路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -zxvf flume-ng-1.6.0-cdh5.16.2-src.tar.gz</span><br></pre></td></tr></table></figure>

<p>编译：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean compile validate -Denforcer.skip&#x3D;true</span><br></pre></td></tr></table></figure>

<p>提示：flume-ng-morphline-solr-sink我们用不到，可以直接注释掉，在flume-ng-sinks下的pom中找到并注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">   &lt;module&gt;flume-hdfs-sink&lt;&#x2F;module&gt;</span><br><span class="line">   &lt;module&gt;flume-irc-sink&lt;&#x2F;module&gt;</span><br><span class="line">   &lt;module&gt;flume-ng-hbase-sink&lt;&#x2F;module&gt;</span><br><span class="line">   &lt;module&gt;flume-ng-elasticsearch-sink&lt;&#x2F;module&gt;</span><br><span class="line">   &lt;!--&lt;module&gt;flume-ng-morphline-solr-sink&lt;&#x2F;module&gt; --&gt;</span><br><span class="line">   &lt;module&gt;flume-ng-kafka-sink&lt;&#x2F;module&gt;</span><br><span class="line"> &lt;&#x2F;modules&gt;</span><br></pre></td></tr></table></figure>

<p>在.bash_profile里配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export FLUME_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;apache-flume-1.6.0-cdh5.16.2-bin</span><br><span class="line">export PATH&#x3D;$FLUME_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>

<p>conf目录下的flume-env.sh需要配置jdk路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;jdk1.8.0_231</span><br></pre></td></tr></table></figure>



<!--more-->

<h2 id="flume核心组件"><a href="#flume核心组件" class="headerlink" title="flume核心组件"></a>flume核心组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Source	从哪收集</span><br><span class="line">	avro	序列化</span><br><span class="line">	exec	命令行</span><br><span class="line">	spooling	目录</span><br><span class="line">	taildir	******</span><br><span class="line">	kafka</span><br><span class="line"></span><br><span class="line">Channel	数据存哪里</span><br><span class="line">	memory</span><br><span class="line">	kafka</span><br><span class="line">	file</span><br><span class="line">	</span><br><span class="line">Sink	数据输出到哪里</span><br><span class="line">	hdfs	Hadoop</span><br><span class="line">	logger	控制台</span><br><span class="line">	avro	</span><br><span class="line">	kafka</span><br></pre></td></tr></table></figure>



<h2 id="flume简单配置文件"><a href="#flume简单配置文件" class="headerlink" title="flume简单配置文件"></a>flume简单配置文件</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = 0.0.0.0</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>

<p>解释说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">example.conf	&lt;&#x3D;	flume配置文件的文件名</span><br><span class="line">a1	&lt;&#x3D;	agent的名字</span><br><span class="line">r1	&lt;&#x3D;	source的名字</span><br><span class="line">k1	&lt;&#x3D;	sink的名字</span><br><span class="line">c1	&lt;&#x3D;	channel的名字</span><br></pre></td></tr></table></figure>

<p>我们在flume文件夹下，进去后新建script文件夹，在script文件夹内创建example.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir script</span><br><span class="line"># cd script&#x2F;</span><br><span class="line"># vi example.conf</span><br><span class="line"></span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; 0.0.0.0</span><br><span class="line">a1.sources.r1.port &#x3D; 44444</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; logger</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure>

<p>启动命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># flume-ng agent --name a1 --conf $FLUME_HOME&#x2F;conf --conf-file $FLUME_HOME&#x2F;script&#x2F;example.conf -Dflume.root.logger&#x3D;INFO,console</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Event:	Flume数据传输的基本单元</span><br><span class="line">event	&#x3D;&#x3D;&gt;	flume	&#x3D;&#x3D;&gt;	dst</span><br><span class="line">	header	可选的</span><br><span class="line">		k-v</span><br><span class="line">	body	byte	array</span><br></pre></td></tr></table></figure>



<h2 id="flume进一步理解"><a href="#flume进一步理解" class="headerlink" title="flume进一步理解"></a>flume进一步理解</h2><p>追踪日志不断增加的内容，并且输出到hdfs中（单文件）</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -F /home/pearfl/data/flume/data.log</span><br><span class="line">a1.sources.r1.shell = /bin/sh -c</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://hadoop000:8020/ruozedata/flume/tail</span><br><span class="line">a1.sinks.k1.batchSize = 10</span><br><span class="line">a1.sinks.k1.fileType = DataStream</span><br><span class="line">a1.sinks.k1.writeFormat = Text</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># flume-ng agent --name a1 --conf $FLUME_HOME&#x2F;conf --conf-file $FLUME_HOME&#x2F;script&#x2F;flume-exec-hdfs.conf -Dflume.root.logger&#x3D;INFO,console</span><br></pre></td></tr></table></figure>



<p>目录</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.spoolDir = /home/pearfl/data/flume/spool/</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://hadoop000:8020/ruozedata/flume/spool/%Y%m%d%H%M</span><br><span class="line">a1.sinks.k1.batchSize = 10</span><br><span class="line">a1.sinks.k1.fileType = DataStream</span><br><span class="line">a1.sinks.k1.writeFormat = Text</span><br><span class="line">a1.sinks.k1.filePrefix = bigdata-</span><br><span class="line">a1.sinks.k1.useLocalTimeStamp = true</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># flume-ng agent --name a1 --conf $FLUME_HOME&#x2F;conf --conf-file $FLUME_HOME&#x2F;script&#x2F;flume-spool-hdfs.conf -Dflume.root.logger&#x3D;INFO,console</span><br></pre></td></tr></table></figure>



<h2 id="生产上常用tairdir"><a href="#生产上常用tairdir" class="headerlink" title="生产上常用tairdir"></a>生产上常用tairdir</h2><p>文档：<a href="http://flume.apache.org/releases/content/1.9.0/FlumeUserGuide.html#taildir-source" target="_blank" rel="noopener">http://flume.apache.org/releases/content/1.9.0/FlumeUserGuide.html#taildir-source</a></p>
<p>TAIRDIR<br>    offset<br>    不仅仅可以支持到file，也可以支持的directory</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.filegroups = f1 f2</span><br><span class="line">a1.sources.r1.positionFile = /home/pearfl/data/flume/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups.f1 = /home/pearfl/data/flume/taildir/test1/example.log</span><br><span class="line">a1.sources.r1.headers.f1.headerKey1 = value1</span><br><span class="line">a1.sources.r1.filegroups.f2 = /home/pearfl/data/flume/taildir/test2/.*log.*</span><br><span class="line">a1.sources.r1.headers.f2.headerKey1 = value2</span><br><span class="line">a1.sources.r1.headers.f2.headerKey2 = value2-2</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># flume-ng agent --name a1 --conf $FLUME_HOME&#x2F;conf --conf-file $FLUME_HOME&#x2F;script&#x2F;flume-taildir-logger.conf -Dflume.root.logger&#x3D;INFO,console</span><br></pre></td></tr></table></figure>

<p>其中<code>taildir_position.json</code>文件是用来记录文件读取offset的位置，方便下次继续从offset位置读取</p>
<p>注意<code>taildir_position.json</code>文件不能存在上级目录，不然会报错</p>
<h2 id="Flume远程实时采集Windows产生的log4j产生的数据（控制台输出）"><a href="#Flume远程实时采集Windows产生的log4j产生的数据（控制台输出）" class="headerlink" title="Flume远程实时采集Windows产生的log4j产生的数据（控制台输出）"></a>Flume远程实时采集Windows产生的log4j产生的数据（控制台输出）</h2><p>IDEA上的pom.xml添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- flume采集 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.flume.flume-ng-clients&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;flume-ng-log4jappender&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.6.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>IDEA上的log4j.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log4j.rootLogger&#x3D;INFO,stdout,flume</span><br><span class="line">log4j.appender.stdout&#x3D;org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.target&#x3D;System.out</span><br><span class="line">log4j.appender.stdout.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern&#x3D;%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%t] [%c] [%p] - %m%n</span><br><span class="line"></span><br><span class="line">log4j.appender.flume &#x3D; org.apache.flume.clients.log4jappender.Log4jAppender</span><br><span class="line">log4j.appender.flume.Hostname &#x3D; hadoop000</span><br><span class="line">log4j.appender.flume.Port &#x3D; 41414</span><br><span class="line">log4j.appender.flume.UnsafeMode &#x3D; true</span><br><span class="line">log4j.appender.flume.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.flume.layout.ConversionPattern&#x3D;%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%t] [%c] [%p] - %m%n</span><br></pre></td></tr></table></figure>



<p>streaming.conf</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"><span class="comment"># 配置监控文件</span></span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind=0.0.0.0</span><br><span class="line">a1.sources.r1.port=41414</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置sink</span></span><br><span class="line">a1.sinks.k1.type =logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># a1.sinks.k1.type = file_roll</span></span><br><span class="line"><span class="comment"># a1.sinks.k1.sink.directory =/home/pearfl/tmp/stream</span></span><br><span class="line"><span class="comment"># a1.sinks.k1.sink.rollInterval=300</span></span><br><span class="line"><span class="comment"># a1.sinks.k1.sink.batchSize=100</span></span><br><span class="line"><span class="comment"># a1.sinks.k1.sink.serializer=TEXT</span></span><br><span class="line"><span class="comment"># a1.sinks.k1.sink.serializer.appendNewline = false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------</span></span><br><span class="line"><span class="comment"># 配置channel</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"><span class="comment"># 将三者串联</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># flume-ng agent --name a1 --conf $FLUME_HOME&#x2F;conf --conf-file $FLUME_HOME&#x2F;script&#x2F;streaming.conf -Dflume.root.logger&#x3D;INFO,console</span><br></pre></td></tr></table></figure>



<h2 id="Flume远程实时采集Windows产生的log4j产生的数据（控制台输出存入hdfs）"><a href="#Flume远程实时采集Windows产生的log4j产生的数据（控制台输出存入hdfs）" class="headerlink" title="Flume远程实时采集Windows产生的log4j产生的数据（控制台输出存入hdfs）"></a>Flume远程实时采集Windows产生的log4j产生的数据（控制台输出存入hdfs）</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"><span class="comment"># 配置监控文件</span></span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind=0.0.0.0</span><br><span class="line">a1.sources.r1.port=41414</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置sink</span></span><br><span class="line"><span class="comment"># a1.sinks.k1.type =logger</span></span><br><span class="line"><span class="comment">#a1.sinks.k1.maxBytesToLog = 50</span></span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://hadoop000:8020/data/tmp/%Y%m%d%H%M</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 10</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line">a1.sinks.k1.hdfs.writeFormat = Text</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------</span></span><br><span class="line"><span class="comment"># 配置channel</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"><span class="comment"># 将三者串联</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># flume-ng agent --name a1 --conf $FLUME_HOME&#x2F;conf --conf-file $FLUME_HOME&#x2F;script&#x2F;hdfs-stream.conf -Dflume.root.logger&#x3D;INFO,console</span><br></pre></td></tr></table></figure>



<h2 id="解决Flume采集数据时生成大量小文件的问题"><a href="#解决Flume采集数据时生成大量小文件的问题" class="headerlink" title="解决Flume采集数据时生成大量小文件的问题"></a>解决Flume采集数据时生成大量小文件的问题</h2><p>在使用Flume采集数据时，由于默认参数的影响会生产大量小文件，我们先看默认参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs.rollInterval	30	滚动当前文件之前要等待的秒数</span><br><span class="line">hdfs.rollSize	1024	触发滚动当前文件的大小，单位bytes(B)</span><br><span class="line">hdfs.rollCount	10		触发滚动当前文件的events数量</span><br></pre></td></tr></table></figure>

<p>我们看到默认生成文件有三个条件，每30秒、每1M、每10个events，这样的配置会生成大量的小文件，所以我们要对这三个文件进行修改</p>
<p>最终生成的文件必须综合时间、文件大小、event数量来决定，时间太长或者文件太大都不利于最终生成的文件。该时间还需要配合<code>hdfs.path</code>参数指定的生成文件时间。</p>
<p>注意<code>sink.type</code>如果是<code>memory</code>模式，注意文件的大小，防止内存不足，太大可以设置<code>sink.type = file</code></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>flume</tag>
      </tags>
  </entry>
  <entry>
    <title>python的map()和 filter()</title>
    <url>/2020/02/12/40.python%E7%9A%84map()%E5%92%8C%20filter()/</url>
    <content><![CDATA[<h1 id="map-和-filter"><a href="#map-和-filter" class="headerlink" title="map() 和 filter()"></a>map() 和 filter()</h1><p>Python 内置有两个非常好用的高阶函数 <code>map()</code> 和 <code>filter()</code>。</p>
<p><code>filter()</code> 用于从可迭代对象中筛选元素。用法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filter(筛选函数, 可迭代对象)</span><br></pre></td></tr></table></figure>

<p><code>filter()</code> 依次对 <code>可迭代对象</code> 中的每个元素调用 <code>筛选函数</code>，如果返回值为 <code>True</code>，则当前这个元素会被保留，否则被排除。最终返回一个包含所有被保留元素的迭代器。</p>
<p>显然这里的 <code>筛选函数</code> 可以用 lambda 表达式来创建。</p>
<p>例如，从 <code>[&#39;a&#39;, &#39;b&#39;, &#39;cd&#39;, &#39;efg&#39;, &#39;hig&#39;, &#39;klmn&#39;, &#39;opqr&#39;]</code> 筛选出长度为奇数的字符串。可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filter(<span class="keyword">lambda</span> x: len(x) % <span class="number">2</span> == <span class="number">1</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'cd'</span>, <span class="string">'efg'</span>, <span class="string">'hig'</span>, <span class="string">'klmn'</span>, <span class="string">'opqr'</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(filter(<span class="keyword">lambda</span> x: len(x) % <span class="number">2</span> == <span class="number">1</span>, [‘a’, ‘b’, ‘cd’, ‘efg’, ‘hig’, ‘klmn’, ‘opqr’]))</span><br><span class="line">[‘a’, ‘b’, ‘efg’, ‘hig’]</span><br></pre></td></tr></table></figure>

<p>这里我们用 <code>list()</code> 将迭代器转换为列表。</p>
<a id="more"></a>

<p><code>map()</code> 用于对可迭代对象中每一个元素逐一作处理。用法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">map(处理函数, 可迭代对象)</span><br></pre></td></tr></table></figure>

<p><code>map()</code>依次对<code>可迭代对象</code>中的每个元素调用<code>处理函数</code>，最终返回一个包含所有被处理过后的元素的迭代器。</p>
<p>显然这里的<code>处理函数</code>也可以用 lambda 表达式来创建。</p>
<p>例如，将<code>[&#39;a&#39;, &#39;b&#39;, &#39;cd&#39;, &#39;efg&#39;, &#39;hig&#39;, &#39;klmn&#39;, &#39;opqr&#39;]</code>全部转换为大写。可以这样来写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">map(<span class="keyword">lambda</span> x: x.upper(), [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'cd'</span>, <span class="string">'efg'</span>, <span class="string">'hig'</span>, <span class="string">'klmn'</span>, <span class="string">'opqr'</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(<span class="keyword">lambda</span> x: x.upper(), [‘a’, ‘b’, ‘cd’, ‘efg’, ‘hig’, ‘klmn’, ‘opqr’]))</span><br><span class="line">[‘A’, ‘B’, ‘CD’, ‘EFG’, ‘HIG’, ‘KLMN’, ‘OPQR’]</span><br></pre></td></tr></table></figure>

<p>这里我们用 <code>list()</code> 将迭代器转换为列表</p>
]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中lambda 表达式的简单应用</title>
    <url>/2020/02/12/39.python%E4%B8%ADlambda%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><p>在 Python 中，可以通过 lambda 表达式来便捷地定义一个功能简单的函数，这个函数只有实现没有名字，所以叫作匿名函数</p>
<p>lambda 表达式的写法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数N: 函数实现</span><br></pre></td></tr></table></figure>

<p>使用上述表达式将定义一个匿名函数，这个匿名函数可接受若干参数，参数写在冒号前（<code>:</code>），多个参数时用逗号分隔，其实现写在冒号后（<code>:</code>）。</p>
<p>举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x: x ** <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>这个 lambda 表达式定义了一个匿名函数，这个匿名函数接受一个参数 <code>x</code>，返回 <code>x ** 2</code> 的计算结果。同时赋值语句将这个匿名函数赋值给了变量 <code>f</code>。<strong>注意 <code>f</code> 保存的是函数，而不是函数结果。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f</span><br><span class="line">&lt;function at <span class="number">0x10bcba0d0</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">4</span>)</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">9</span>)</span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure>

<p>通过观察上述示例可以发现，lambda 表达式中并没有 <code>return</code> 关键字，但结果被返回出来。是的，匿名函数的 <code>函数实现</code> 的执行结果就会作为它的返回值，无需使用 <code>return</code> 关键字。</p>
<p>从功能上来看，<code>lambda x: x ** 2</code> 等同于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">no_name</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>no_name(<span class="number">4</span>)</span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure>



<p>一般情况下，我们不会像 <code>f = lambda x: x ** 2</code> 这样直接将匿名函数赋值给变量，然后去用这个变量。而是在需要将函数作为参数时，才去使用 lambda 表达式，这样就无需在函数调用前去定义另外一个函数了。</p>
<p>如我们刚才写的函数 <code>filter_nums</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_nums</span><span class="params">(nums, want_it)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [n <span class="keyword">for</span> n <span class="keyword">in</span> nums <span class="keyword">if</span> want_it(n)]</span><br></pre></td></tr></table></figure>

<p>它的 <code>want_it</code> 参数需要是一个函数 ，这时用 lambda 表达式便能方便的解决问题。可以像这样来使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>filter_nums([<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>], <span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">[<span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure>

<p>以前讲内置函数的时候，我们介绍过排序函数 <code>sorted()</code>。它有一个参数 <code>key</code>，用来在排序复杂元素时，指定排序所使用的字段，这个参数需要是个函数，同样可以用 lambda 表达式来解决：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = [(‘上海’, ‘<span class="number">021</span>’), (‘北京’, ‘<span class="number">010</span>’), (‘成都’, ‘<span class="number">028</span>’), (‘广州’, ‘<span class="number">020</span>’)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(codes, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]) <span class="comment"># 以区号字典来排序</span></span><br><span class="line">[(‘北京’, ‘<span class="number">010</span>’), (‘广州’, ‘<span class="number">020</span>’), (‘上海’, ‘<span class="number">021</span>’), (‘成都’, ‘<span class="number">028</span>’)]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark编译安装</title>
    <url>/2020/02/11/38.Spark%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>官方文档：<a href="http://spark.apache.org/docs/latest/building-spark.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/building-spark.html</a></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1.JDK:Spark 2.2.0及以上版本只支持JDK1.8</p>
<p>2.Maven：3.6.3</p>
<ol>
<li><p>设置maven环境变量时，需设置maven内存：</p>
</li>
<li><p>export MAVEN_OPTS=”-Xmx2g -XX:ReservedCodeCacheSize=512m”</p>
</li>
</ol>
<p>3.Scala：2.13.1</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ol>
<li><strong>下载spark的tar包，并解压</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;apache&#x2F;spark&#x2F;spark-2.4.5&#x2F;spark-2.4.5.tgz</span><br><span class="line"># tar -xzvf spark-2.4.5.tgz</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>编辑dev/make-distribution.sh</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  vi dev&#x2F;make-distribution.sh</span><br></pre></td></tr></table></figure>


<p>注释以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#VERSION&#x3D;$(&quot;$MVN&quot; help:evaluate -Dexpression&#x3D;project.version $@ 2&gt;&#x2F;dev&#x2F;null | grep -v &quot;INFO&quot; | tail -n 1)</span><br><span class="line">#SCALA_VERSION&#x3D;$(&quot;$MVN&quot; help:evaluate -Dexpression&#x3D;scala.binary.version $@ 2&gt;&#x2F;dev&#x2F;null\</span><br><span class="line">#    | grep -v &quot;INFO&quot;\</span><br><span class="line">#    | tail -n 1)</span><br><span class="line">#SPARK_HADOOP_VERSION&#x3D;$(&quot;$MVN&quot; help:evaluate -Dexpression&#x3D;hadoop.version $@ 2&gt;&#x2F;dev&#x2F;null\</span><br><span class="line">#    | grep -v &quot;INFO&quot;\</span><br><span class="line">#    | tail -n 1)</span><br><span class="line">#SPARK_HIVE&#x3D;$(&quot;$MVN&quot; help:evaluate -Dexpression&#x3D;project.activeProfiles -pl sql&#x2F;hive $@ 2&gt;&#x2F;dev&#x2F;null\</span><br><span class="line">#    | grep -v &quot;INFO&quot;\</span><br><span class="line">#    | fgrep --count &quot;&lt;id&gt;hive&lt;&#x2F;id&gt;&quot;;\</span><br><span class="line">#    # Reset exit status to 0, otherwise the script stops here if the last grep finds nothing\</span><br><span class="line">#    # because we use &quot;set -o pipefail&quot;</span><br><span class="line">#    echo -n)</span><br></pre></td></tr></table></figure>

<p> 添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VERSION&#x3D;2.4.5</span><br><span class="line">SCALA_VERSION&#x3D;2.13</span><br><span class="line">SPARK_HADOOP_VERSION&#x3D;2.6.0-cdh5.16.2</span><br><span class="line">SPARK_HIVE&#x3D;1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p><strong>编辑pom.xml</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加</span><br><span class="line"></span><br><span class="line">&lt;repository&gt;</span><br><span class="line">    &lt;id&gt;clouders&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;name&gt;clouders Repository&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;url&gt;https:&#x2F;&#x2F;repository.cloudera.com&#x2F;artifactory&#x2F;cloudera-repos&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;repository&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>安装</strong></p>
<p>在解压后的spark目录下</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># $ .&#x2F;dev&#x2F;make-distribution.sh --name 2.6.0-cdh5.16.2 --tgz -Dhadoop.version&#x3D;2.6.0-cdh5.16.2 -Phadoop-2.6 -Phive -Phive-thriftserver -Pyarn</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala安装</title>
    <url>/2020/02/10/37.Scala%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>需要预先安装好jdk8+</p>
<p>已经下载好scala包放置于software目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -zxvf scala-2.13.1.tgz -C ~&#x2F;app&#x2F;</span><br><span class="line"># vi ~&#x2F;.bash_profile</span><br><span class="line">export SCALA_HOME&#x3D;&#x2F;root&#x2F;app&#x2F;scala-2.13.1</span><br><span class="line">export PATH&#x3D;$SCALA_HOME&#x2F;bin:$PATH</span><br><span class="line"># source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>



<p>非常的简单哟</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>scala</tag>
      </tags>
  </entry>
  <entry>
    <title>彻底明白Java的值传递和引用传递</title>
    <url>/2020/02/10/36.%E5%BD%BB%E5%BA%95%E6%98%8E%E7%99%BDJava%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<p>原文链接：<a href="https://blog.csdn.net/bntx2jsqfehy7/article/details/83508006" target="_blank" rel="noopener">https://blog.csdn.net/bntx2jsqfehy7/article/details/83508006</a></p>
<h2 id="一、形参与实参"><a href="#一、形参与实参" class="headerlink" title="一、形参与实参"></a>一、形参与实参</h2><ol>
<li>形参：方法被调用时需要传递进来的参数，如：func(int a)中的a，它只有在func被调用期间a才有意义，也就是会被分配内存空间，在方法func执行完成后，a就会被销毁释放空间，也就是不存在了</li>
<li>实参：方法被调用时是传入的实际值，它在方法被调用前就已经被初始化并且在方法被调用时传入。</li>
</ol>
<h2 id="二、-java的数据类型"><a href="#二、-java的数据类型" class="headerlink" title="二、 java的数据类型"></a>二、 java的数据类型</h2><p>所谓数据类型，是编程语言中对内存的一种抽象表达方式，我们知道程序是由代码文件和静态资源组成，在程序被运行前，这些代码存在在硬盘里，程序开始运行，这些代码会被转成计算机能识别的内容放到内存中被执行</p>
<p>数据类型实质上是用来定义编程语言中相同类型的数据的存储形式，也就是决定了如何将代表这些值的位存储到计算机的内存中。</p>
<p>所以，数据在内存中的存储，是根据数据类型来划定存储形式和存储位置的。</p>
<a id="more"></a>

<p>1.基本类型：编程语言中内置的最小粒度的数据类型。它包括四大类八种类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span>种整数类型：<span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">int</span>、<span class="keyword">long</span></span><br><span class="line"><span class="number">2</span>种浮点数类型：<span class="keyword">float</span>、<span class="keyword">double</span></span><br><span class="line"><span class="number">1</span>种字符类型：<span class="keyword">char</span></span><br><span class="line"><span class="number">1</span>种布尔类型：<span class="keyword">boolean</span></span><br></pre></td></tr></table></figure>

<p>2.引用类型：引用也叫句柄，引用类型，是编程语言中定义的在句柄中存放着实际内容所在地址的地址值的一种数据形式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类</span><br><span class="line">接口</span><br><span class="line">数组</span><br></pre></td></tr></table></figure>

<p>有了数据类型，JVM对程序数据的管理就规范化了，不同的数据类型，它的存储形式和位置是不一样的，要想知道JVM是怎么存储各种类型的数据，就得先了解JVM的内存划分以及每部分的职能。</p>
<h2 id="三、JVM内存的划分及职能"><a href="#三、JVM内存的划分及职能" class="headerlink" title="三、JVM内存的划分及职能"></a>三、JVM内存的划分及职能</h2><p>Java语言本身是不能操作内存的，它的一切都是交给JVM来管理和控制的，因此Java内存区域的划分也就是JVM的区域划分，在说JVM的内存划分之前，我们先来看一下Java程序的执行过程，如下图：</p>
<p><img src="/images/36/36_1.png" alt="36_1"></p>
<p>有图可以看出：Java代码被编译器编译成字节码之后，JVM开辟一片内存空间（也叫运行时数据区），通过类加载器加到到运行时数据区来存储程序执行期间需要用到的数据和相关信息，在这个数据区中，它由以下几部分组成：</p>
<ol>
<li><p>虚拟机栈</p>
</li>
<li><p>堆</p>
</li>
<li><p>程序计数器</p>
</li>
<li><p>方法区</p>
</li>
<li><p>本地方法栈</p>
</li>
</ol>
<p>我们接着来了解一下每部分的原理以及具体用来存储程序执行过程中的哪些数据。</p>
<h3 id="1-虚拟机栈"><a href="#1-虚拟机栈" class="headerlink" title="1.虚拟机栈"></a>1.虚拟机栈</h3><p>虚拟机栈是Java方法执行的内存模型，栈中存放着栈帧，每个栈帧分别对应一个被调用的方法，方法的调用过程对应栈帧在虚拟机中入栈到出栈的过程。</p>
<p>栈是线程私有的，也就是线程之间的栈是隔离的；当程序中某个线程开始执行一个方法时就会相应的创建一个栈帧并且入栈（位于栈顶），在方法结束后，栈帧出栈。</p>
<p>下图表示了一个Java栈的模型以及栈帧的组成：</p>
<p><img src="/images/36/36_2.png" alt="36_2"></p>
<p><strong>栈帧</strong>:是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈的栈元素。</p>
<p>每个栈帧中包括：</p>
<ol>
<li><strong>局部变量表</strong>:用来存储方法中的局部变量（非静态变量、函数形参）。当变量为基本数据类型时，直接存储值，当变量为引用类型时，存储的是指向具体对象的引用。</li>
<li><strong>操作数栈</strong>:Java虚拟机的解释执行引擎被称为”基于栈的执行引擎”，其中所指的栈就是指操作数栈。</li>
<li><strong>指向运行时常量池的引用</strong>:存储程序执行时可能用到常量的引用。</li>
<li><strong>方法返回地址</strong>:存储方法执行完成后的返回地址。</li>
</ol>
<h3 id="2-堆"><a href="#2-堆" class="headerlink" title="2.堆"></a>2.堆</h3><p>堆是用来存储对象本身和数组的，在JVM中只有一个堆，因此，堆是被所有线程共享的。</p>
<h3 id="3-方法区"><a href="#3-方法区" class="headerlink" title="3.方法区"></a>3.方法区</h3><p>方法区是一块所有线程共享的内存逻辑区域，在JVM中只有一个方法区，用来存储一些线程可共享的内容，它是线程安全的，多个线程同时访问方法区中同一个内容时，只能有一个线程装载该数据，其它线程只能等待。</p>
<p>方法区可存储的内容有：类的全路径名、类的直接超类的权全限定名、类的访问修饰符、类的类型（类或接口）、类的直接接口全限定名的有序列表、常量池（字段，方法信息，静态变量，类型引用（class））等。</p>
<h3 id="4-本地方法栈："><a href="#4-本地方法栈：" class="headerlink" title="4.本地方法栈："></a>4.本地方法栈：</h3><p>本地方法栈的功能和虚拟机栈是基本一致的，并且也是线程私有的，它们的区别在于虚拟机栈是为执行Java方法服务的，而本地方法栈是为执行本地方法服务的。</p>
<h3 id="5-程序计数器"><a href="#5-程序计数器" class="headerlink" title="5. 程序计数器"></a>5. 程序计数器</h3><p>线程私有的。<br>记录着当前线程所执行的字节码的行号指示器，在程序运行过程中，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、异常处理、线程恢复等基础功能都需要依赖计数器完成。</p>
<h2 id="四、数据如何在内存中存储"><a href="#四、数据如何在内存中存储" class="headerlink" title="四、数据如何在内存中存储"></a>四、数据如何在内存中存储</h2><p>从上面程序运行图我们可以看到，JVM在程序运行时的内存分配有三个地方：</p>
<ul>
<li>堆</li>
<li>栈</li>
<li>静态方法区</li>
<li>常量区</li>
</ul>
<p>相应地，每个存储区域都有自己的内存分配策略：</p>
<ul>
<li>堆式</li>
<li>栈式</li>
<li>静态</li>
</ul>
<p>我们已经知道：Java中的数据类型有基本数据类型和引用数据类型，那么这些数据的存储都使用哪一种策略呢？<br>这里要分以下的情况进行探究：</p>
<p><strong>1.基本数据类型的存储：</strong></p>
<ul>
<li>A、基本数据类型的局部变量</li>
<li>B、基本数据类型的成员变量</li>
<li>C、基本数据类型的静态变量</li>
</ul>
<p><strong>2、引用数据类型的存储</strong></p>
<h4 id="1-基本数据类型的存储"><a href="#1-基本数据类型的存储" class="headerlink" title="1.基本数据类型的存储"></a>1.基本数据类型的存储</h4><p>我们分别来研究一下：</p>
<p><strong>A.基本数据类型的局部变量</strong></p>
<p>1.定义基本数据类型的局部变量以及数据都是直接存储在内存中的栈上，也就是前面说到的<strong>“虚拟机栈”</strong>，数据本身的值就是存储在栈空间里面。</p>
<p><img src="/images/36/36_3.png" alt="36_3"></p>
<p>如上图，在方法内定义的变量直接存储在栈中，如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int age&#x3D;50;</span><br><span class="line">int weight&#x3D;50;</span><br><span class="line">int grade&#x3D;6;</span><br></pre></td></tr></table></figure>

<p>当我们写“int age=50；”，其实是分为两步的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int age;&#x2F;&#x2F;定义变量</span><br><span class="line">age&#x3D;50;&#x2F;&#x2F;赋值</span><br></pre></td></tr></table></figure>

<p>首先JVM创建一个名为age的变量，存于局部变量表中，然后去栈中查找是否存在有字面量值为50的内容，如果有就直接把age指向这个地址，如果没有，JVM会在栈中开辟一块空间来存储“50”这个内容，并且把age指向这个地址。因此我们可以知道：<br><strong>我们声明并初始化基本数据类型的局部变量时，变量名以及字面量值都是存储在栈中，而且是真实的内容。</strong></p>
<p>我们再来看“int weight=50；”，按照刚才的思路：字面量为50的内容在栈中已经存在，因此weight是直接指向这个地址的。由此可见：<strong>栈中的数据在当前线程下是共享的</strong>。</p>
<p>那么如果再执行下面的代码呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">weight&#x3D;40；</span><br></pre></td></tr></table></figure>

<p>当代码中重新给weight变量进行赋值时，JVM会去栈中寻找字面量为40的内容，发现没有，就会开辟一块内存空间存储40这个内容，并且把weight指向这个地址。由此可知：</p>
<p><strong>基本数据类型的数据本身是不会改变的，当局部变量重新赋值时，并不是在内存中改变字面量内容，而是重新在栈中寻找已存在的相同的数据，若栈中不存在，则重新开辟内存存新数据，并且把要重新赋值的局部变量的引用指向新数据所在地址。</strong></p>
<p><strong>B.</strong>基本数据类型的成员变量****</p>
<p>成员变量：顾名思义，就是在类体中定义的变量。<br>看下图：</p>
<p><img src="/images/36/36_4.jpg" alt="36_4"></p>
<p>我们看per的地址指向的是堆内存中的一块区域，我们来还原一下代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Person&#123;</span><br><span class="line">	private int age;</span><br><span class="line">	private String name;</span><br><span class="line">	private int grade;</span><br><span class="line">	&#x2F;&#x2F;篇幅较长，省略setter getter方法</span><br><span class="line">	static void run()&#123;</span><br><span class="line">	System.out.println(&quot;run....&quot;); </span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;调用</span><br><span class="line">Person per&#x3D;new Person();</span><br></pre></td></tr></table></figure>

<p>同样是局部变量的age、name、grade却被存储到了堆中为per对象开辟的一块空间中。因此可知：<strong>基本数据类型的成员变量名和值都存储于堆中，其生命周期和对象的是一致的。</strong></p>
<h5 id="C-基本数据类型的静态变量"><a href="#C-基本数据类型的静态变量" class="headerlink" title="C. 基本数据类型的静态变量"></a><strong>C. 基本数据类型的静态变量</strong></h5><p>前面提到<strong>方法区</strong>用来存储一些共享数据，因此<strong>基本数据类型的静态变量名以及值存储于方法区的运行时常量池中，静态变量随类加载而加载，随类消失而消失</strong></p>
<h4 id="2-引用数据类型的存储"><a href="#2-引用数据类型的存储" class="headerlink" title="2.引用数据类型的存储"></a>2.引用数据类型的存储</h4><p>上面提到：堆是用来存储对象本身和数组，而引用（句柄）存放的是实际内容的地址值，因此通过上面的程序运行图，也可以看出，当我们定义一个对象时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person per&#x3D;new Person();</span><br></pre></td></tr></table></figure>

<p>实际上，它也是有两个过程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person per;&#x2F;&#x2F;定义变量</span><br><span class="line">per&#x3D;new Person();&#x2F;&#x2F;赋值</span><br></pre></td></tr></table></figure>

<p>在执行Person per;时，JVM先在虚拟机栈中的变量表中开辟一块内存存放per变量，在执行per=new Person()时，JVM会创建一个Person类的实例对象并在堆中开辟一块内存存储这个实例，同时把实例的地址值赋值给per变量。因此可见：<br><strong>对于引用数据类型的对象/数组，变量名存在栈中，变量值存储的是对象的地址，并不是对象的实际内容。</strong></p>
<h2 id="6-值传递和引用传递"><a href="#6-值传递和引用传递" class="headerlink" title="6.值传递和引用传递"></a>6.值传递和引用传递</h2><p>前面已经介绍过形参和实参，也介绍了数据类型以及数据在内存中的存储形式，接下来，就是文章的主题：值传递和引用的传递。</p>
<p><strong>值传递：</strong></p>
<p>在方法被调用时，实参通过形参把它的内容副本传入方法内部，此时形参接收到的内容是实参值的一个拷贝，因此在方法内对形参的任何操作，都仅仅是对这个副本的操作，不影响原始值的内容。</p>
<p>来看个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void valueCrossTest(int age,float weight)&#123;</span><br><span class="line">    System.out.println(&quot;传入的age：&quot;+age);</span><br><span class="line">    System.out.println(&quot;传入的weight：&quot;+weight);</span><br><span class="line">    age&#x3D;33;</span><br><span class="line">    weight&#x3D;89.5f;</span><br><span class="line">    System.out.println(&quot;方法内重新赋值后的age：&quot;+age);</span><br><span class="line">    System.out.println(&quot;方法内重新赋值后的weight：&quot;+weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;测试</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        int a&#x3D;25;</span><br><span class="line">        float w&#x3D;77.5f;</span><br><span class="line">        valueCrossTest(a,w);</span><br><span class="line">        System.out.println(&quot;方法执行后的age：&quot;+a);</span><br><span class="line">        System.out.println(&quot;方法执行后的weight：&quot;+w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传入的age：25</span><br><span class="line">传入的weight：77.5</span><br><span class="line"></span><br><span class="line">方法内重新赋值后的age：33</span><br><span class="line">方法内重新赋值后的weight：89.5</span><br><span class="line"></span><br><span class="line">方法执行后的age：25</span><br><span class="line">方法执行后的weight：77.5</span><br></pre></td></tr></table></figure>

<p>从上面的打印结果可以看到：<br>a和w作为实参传入valueCrossTest之后，无论在方法内做了什么操作，最终a和w都没变化。</p>
<p>这是什么造型呢？！！</p>
<p>下面我们根据上面学到的知识点，进行详细的分析：</p>
<p>首先程序运行时，调用mian()方法，此时JVM为main()方法往虚拟机栈中压入一个栈帧，即为当前栈帧，用来存放main()中的局部变量表(包括参数)、操作栈、方法出口等信息，如a和w都是mian()方法中的局部变量，因此可以断定，a和w是躺着mian方法所在的栈帧中<br>如图：</p>
<p><img src="/images/36/36_5.png" alt="36_5"></p>
<p>而当执行到valueCrossTest()方法时，JVM也为其往虚拟机栈中压入一个栈，即为当前栈帧，用来存放valueCrossTest()中的局部变量等信息，因此age和weight是躺着valueCrossTest方法所在的栈帧中，而他们的值是从a和w的值copy了一份副本而得，如图：</p>
<p><img src="/images/36/36_6.png" alt="36_6"></p>
<p>因而可以a和age、w和weight对应的内容是不一致的，所以当在方法内重新赋值时，实际流程如图：</p>
<p><img src="/images/36/36_7.png" alt="36_7"></p>
<p>也就是说，age和weight的改动，只是改变了当前栈帧（valueCrossTest方法所在栈帧）里的内容，当方法执行结束之后，这些局部变量都会被销毁，mian方法所在栈帧重新回到栈顶，成为当前栈帧，再次输出a和w时，依然是初始化时的内容。<br>因此：<br><strong>值传递传递的是真实内容的一个副本，对副本的操作不影响原内容，也就是形参怎么变化，不会影响实参对应的内容。</strong></p>
<p><strong>引用传递：</strong><br>”引用”也就是指向真实内容的地址值，在方法调用时，实参的地址通过方法调用被传递给相应的形参，在方法体内，形参和实参指向通愉快内存地址，对形参的操作会影响的真实内容。</p>
<p>举个例子：<br>先定义一个对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private int age;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line">        public void setName(String name) &#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">        &#125;</span><br><span class="line">        public int getAge() &#123;</span><br><span class="line">            return age;</span><br><span class="line">        &#125;</span><br><span class="line">        public void setAge(int age) &#123;</span><br><span class="line">            this.age &#x3D; age;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们写个函数测试一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void PersonCrossTest(Person person)&#123;</span><br><span class="line">        System.out.println(&quot;传入的person的name：&quot;+person.getName());</span><br><span class="line">        person.setName(&quot;我是张小龙&quot;);</span><br><span class="line">        System.out.println(&quot;方法内重新赋值后的name：&quot;+person.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;测试</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Person p&#x3D;new Person();</span><br><span class="line">        p.setName(&quot;我是马化腾&quot;);</span><br><span class="line">        p.setAge(45);</span><br><span class="line">        PersonCrossTest(p);</span><br><span class="line">        System.out.println(&quot;方法执行后的name：&quot;+p.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传入的person的name：我是马化腾</span><br><span class="line">方法内重新赋值后的name：我是张小龙</span><br><span class="line">方法执行后的name：我是张小龙</span><br></pre></td></tr></table></figure>

<p>可以看出，person经过personCrossTest()方法的执行之后，内容发生了改变，这印证了上面所说的<strong>“引用传递”</strong>，对形参的操作，改变了实际对象的内容。</p>
<p>那么，到这里就结题了吗？<br>不是的，没那么简单，<br>能看得到想要的效果<br>是因为刚好选对了例子而已！！！</p>
<p>下面我们对上面的例子稍作修改，加上一行代码，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void PersonCrossTest(Person person)&#123;</span><br><span class="line">    System.out.println(&quot;传入的person的name：&quot;+person.getName());</span><br><span class="line">    person&#x3D;new Person();&#x2F;&#x2F;加多此行代码</span><br><span class="line">    person.setName(&quot;我是张小龙&quot;);</span><br><span class="line">    System.out.println(&quot;方法内重新赋值后的name：&quot;+person.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传入的person的name：我是马化腾</span><br><span class="line">方法内重新赋值后的name：我是张小龙</span><br><span class="line">方法执行后的name：我是马化腾</span><br></pre></td></tr></table></figure>

<p>为什么这次的输出和上次的不一样了呢？<br>看出什么问题了吗？</p>
<p>按照上面讲到JVM内存模型可以知道，对象和数组是存储在Java堆区的，而且堆区是共享的，因此程序执行到main（）方法中的下列代码时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person p&#x3D;new Person();</span><br><span class="line">p.setName(&quot;我是马化腾&quot;);</span><br><span class="line">p.setAge(45);</span><br><span class="line">PersonCrossTest(p);</span><br></pre></td></tr></table></figure>

<p>JVM会在堆内开辟一块内存，用来存储p对象的所有内容，同时在main（）方法所在线程的栈区中创建一个引用p存储堆区中p对象的真实地址，如图：</p>
<p><img src="/images/36/36_8.png" alt="36_8"></p>
<p>当执行到PersonCrossTest()方法时，因为方法内有这么一行代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person&#x3D;new Person();</span><br></pre></td></tr></table></figure>

<p>JVM需要在堆内另外开辟一块内存来存储new Person()，假如地址为“xo3333”，那此时形参person指向了这个地址，假如真的是引用传递，那么由上面讲到：<strong>引用传递中形参实参指向同一个对象，形参的操作会改变实参对象的改变</strong>。</p>
<p>可以推出：实参也应该指向了新创建的person对象的地址，所以在执行PersonCrossTest()结束之后，最终输出的应该是后面创建的对象内容。</p>
<p>然而实际上，最终的输出结果却跟我们推测的不一样，最终输出的仍然是一开始创建的对象的内容。</p>
<p>由此可见：<strong>引用传递，在Java中并不存在。</strong></p>
<p>但是有人会疑问：为什么第一个例子中，在方法内修改了形参的内容，会导致原始对象的内容发生改变呢？</p>
<p>这是因为：<strong>无论是基本类型和是引用类型，在实参传入形参时，都是值传递，也就是说传递的都是一个副本，而不是内容本身。</strong></p>
<p><img src="/images/36/36_9.png" alt="36_9"></p>
<p>有图可以看出，方法内的形参person和实参p并无实质关联，它只是由p处copy了一份指向对象的地址，此时：</p>
<p><strong>p和person都是指向同一个对象</strong>。</p>
<p>因此在第一个例子中，对形参p的操作，会影响到实参对应的对象内容。而在第二个例子中，当执行到new Person()之后，JVM在堆内开辟一块空间存储新对象，并且把person改成指向新对象的地址，此时：</p>
<p><strong>p依旧是指向旧的对象，person指向新对象的地址。</strong></p>
<p>所以此时<strong>对person的操作，实际上是对新对象的操作，于实参p中对应的对象毫无关系</strong>。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>因此可见：在Java中所有的参数传递，不管基本类型还是引用类型，都是值传递，或者说是副本传递。<br>只是在传递过程中：</p>
<p><strong>如果是对基本数据类型的数据进行操作，由于原始内容和副本都是存储实际值，并且是在不同的栈区，因此形参的操作，不影响原始内容。</strong></p>
<p><strong>如果是对引用类型的数据进行操作，分两种情况，一种是形参和实参保持指向同一个对象地址，则形参的操作，会影响实参指向的对象的内容。一种是形参被改动指向新的对象地址（如重新赋值引用），则形参的操作，不会影响实参指向的对象的内容。</strong></p>
<p>以上为小编关于“值传递和引用传递”问题的思考和论证，对于这个问题，历来都是多有争论，在此希望和读者一起探讨和学习，有不同意见或者建议请假小编微信：sisi-ceo。理性评论，不喜勿喷。</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集简述</title>
    <url>/2020/02/10/34.%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> par[MAX_N];</span><br><span class="line"><span class="keyword">int</span> rank[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化n个元素 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		par[i] = i;</span><br><span class="line">		rank[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询树的根 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(par[x] == x)&#123;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> par[x] = <span class="built_in">find</span>(par[x]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并x和y所属的集合 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	x = <span class="built_in">find</span>(x);</span><br><span class="line">	y = <span class="built_in">find</span>(y);</span><br><span class="line">	<span class="keyword">if</span>(x == y) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(rank[x] &lt; rank[y])&#123;</span><br><span class="line">		par[x] = y;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		par[y] = x;</span><br><span class="line">		<span class="keyword">if</span>(rank[x] == rank[y]) rank[x]++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断x和y是否属于同一个集合</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>Eratosthenes 素数筛选</title>
    <url>/2020/02/10/33.Eratosthenes%20%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89/</url>
    <content><![CDATA[<h3 id="Eratosthenes-素数筛选"><a href="#Eratosthenes-素数筛选" class="headerlink" title="Eratosthenes 素数筛选"></a>Eratosthenes 素数筛选</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    is_prime[i] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_prime[i]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt;= n; j +=i) &#123;</span><br><span class="line">             is_prime[j] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化后时间复杂度比O(NloglogN)还要低</p>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>ETL简述</title>
    <url>/2020/02/09/31.ETL%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<p><img src="/images/31/31_1.png" alt="31_1"></p>
<h2 id="为什么要进行ETL"><a href="#为什么要进行ETL" class="headerlink" title="为什么要进行ETL"></a>为什么要进行ETL</h2><p>我们使用Flume采集数据到HDFS，从系统架构图来看现在要进行数据的ETL操作，ETL进程对数据进行规范化、验证、清洗，并最终装载进入数据仓库</p>
<h2 id="什么是ETL"><a href="#什么是ETL" class="headerlink" title="什么是ETL"></a>什么是ETL</h2><p>ETL 即 Extract Transform Load的首字母 ==&gt; 抽取、转换、加载</p>
<h2 id="ETL该怎么做"><a href="#ETL该怎么做" class="headerlink" title="ETL该怎么做"></a>ETL该怎么做</h2><p>数据采集到HDFS上指定的目录下，通过MR写入数据，进行ETL操作，并写出到指定的目录下，ETL操作包括定义数据字段的序列化类，把时间解析出年月日，把URL解析为http、domain和path、对异常值进行处理(try/catch)，使用计数器。</p>
<h2 id="ETL在服务器上运行需要解决的问题"><a href="#ETL在服务器上运行需要解决的问题" class="headerlink" title="ETL在服务器上运行需要解决的问题"></a>ETL在服务器上运行需要解决的问题</h2><p>在本地测试好代码后，上传Jar包到服务器上，跑HDFS上的数据</p>
<p>首先创建三个文件夹lib、data、script放ETL相关的文件，运行脚本的shell文件就在script目录下</p>
<p>由于我们把ETL打的瘦包，所以很多数据需要的依赖Jar包得不到，还有解析库的数据库也需要上传到本地文件下</p>
<p>思路是:</p>
<ol>
<li>把解析库放到项目的resources目录下</li>
<li>把需要的依赖上传到lib目录下</li>
<li>在<code>~/.bash_profile</code>文件下导入LIBJARS路径用来指向lib目录下的依赖</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>ETL</tag>
      </tags>
  </entry>
  <entry>
    <title>maven安装</title>
    <url>/2020/02/09/32.maven%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="linux上安装maven"><a href="#linux上安装maven" class="headerlink" title="linux上安装maven"></a>linux上安装maven</h2><p>官网下载链接：<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p>
<p>下载后我放置在服务器用户根目录的software文件夹下，现在我们解压到app下面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -zxvf apache-maven-3.6.3-bin.tar.gz -C ~&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure>

<p>在app文件夹下，开始操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进入maven文件夹</span><br><span class="line"># cd apache-maven-3.6.3&#x2F;</span><br><span class="line">pwd获取当前的路径</span><br><span class="line"># vi ~&#x2F;.bash_profile</span><br><span class="line">export MAVEN_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;apache-maven-3.6.3</span><br><span class="line">export PATH&#x3D;$MAVEN_HOME&#x2F;bin:$PATH</span><br><span class="line"># source ~&#x2F;.bash_profile</span><br><span class="line"></span><br><span class="line">可以通过mvn -v检查是否生效</span><br></pre></td></tr></table></figure>



<p>完成后，conf内有些数据建议更改一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd conf</span><br><span class="line"># vi settings.xml</span><br><span class="line">  &lt;!-- localRepository</span><br><span class="line">   | The path to the local repository maven will use to store artifacts.</span><br><span class="line">   |</span><br><span class="line">   | Default: $&#123;user.home&#125;&#x2F;.m2&#x2F;repository</span><br><span class="line">  &lt;localRepository&gt;&#x2F;path&#x2F;to&#x2F;local&#x2F;repo&lt;&#x2F;localRepository&gt;</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;localRepository&gt;&#x2F;home&#x2F;pearfl&#x2F;maven_repos&#x2F;&lt;&#x2F;localRepository&gt;</span><br></pre></td></tr></table></figure>

<p>/root/maven_repos/ 位置存放你下载的包，这个根据个人需求修改</p>
<h2 id="win下配置maven"><a href="#win下配置maven" class="headerlink" title="win下配置maven"></a>win下配置maven</h2><p>新建系统M2_HOME变量，并把安装maven路径拷贝上去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\Programme\apache\apache-maven-3.6.3</span><br></pre></td></tr></table></figure>

<p>配置path变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\Programme\apache\apache-maven-3.6.3\bin</span><br></pre></td></tr></table></figure>

<p>测试maven环境是否配置成功，输入mvn -v</p>
]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-962（单调栈）</title>
    <url>/2020/02/09/30.leetcode-962%EF%BC%88%E5%8D%95%E8%B0%83%E6%A0%88%EF%BC%89/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个整数数组 A，坡是元组 (i, j)，其中  i &lt; j 且 A[i] &lt;&#x3D; A[j]。这样的坡的宽度为 j - i。</span><br><span class="line"></span><br><span class="line">找出 A 中的坡的最大宽度，如果不存在，返回 0 。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;maximum-width-ramp</span><br><span class="line"></span><br><span class="line">实例1：</span><br><span class="line">输入：[6,0,8,2,1,5]</span><br><span class="line">输出：4</span><br><span class="line">解释：</span><br><span class="line">最大宽度的坡为 (i, j) &#x3D; (1, 5): A[1] &#x3D; 0 且 A[5] &#x3D; 5.</span><br><span class="line"></span><br><span class="line">实例2：</span><br><span class="line">输入：[9,8,1,0,1,9,4,0,4,1]</span><br><span class="line">输出：7</span><br><span class="line">解释：</span><br><span class="line">最大宽度的坡为 (i, j) &#x3D; (2, 9): A[2] &#x3D; 1 且 A[9] &#x3D; 1.</span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line">1.	2 &lt;&#x3D; A.length &lt;&#x3D; 50000</span><br><span class="line">2.	0 &lt;&#x3D; A[i] &lt;&#x3D; 50000</span><br></pre></td></tr></table></figure>



<p>思路：找到当前元素左边第一个比它小的元素，很明显采用单调栈的方法</p>
<p>单调栈应用范围：<br>求解数组中元素右边第一个比它小的元素的下标，从前往后，构造单调递增栈；<br>求解数组中元素右边第一个比它大的元素的下标，从前往后，构造单调递减栈；<br>求解数组中元素左边第一个比它小的元素的下标，从后往前，构造单调递减栈；<br>求解数组中元素左边第一个比它小的元素的下标，从后往前，构造单调递增栈。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxWidthRamp</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stacks = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stacks.push(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> length = A.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &lt;= A[stacks.peek()]) &#123;</span><br><span class="line">                stacks.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stacks.isEmpty() &amp;&amp; A[i] &gt;= A[stacks.peek()]) &#123;</span><br><span class="line">                max = Math.max(max, i - stacks.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>mapreduce解析json数据</title>
    <url>/2020/02/09/29.mapreduce%E8%A7%A3%E6%9E%90json%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入数据</span><br><span class="line">&#123;&quot;status&quot;:&quot;0&quot;,&quot;message&quot;:&quot;成功&quot;,&quot;data&quot;:&#123;&quot;name&quot;:&quot;mxh&quot; , &quot;age&quot;:22 , &quot;cars&quot;:[&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;Porsche&quot;&#125;,&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;BMW&quot;&#125;]&#125;&#125;</span><br><span class="line">&#123;&quot;status&quot;:&quot;0&quot;,&quot;message&quot;:&quot;成功&quot;,&quot;data&quot;:&#123;&quot;name&quot;:&quot;mxh&quot; , &quot;age&quot;:22 , &quot;cars&quot;:[ &quot;Porsche&quot;, &quot;BMW&quot;, &quot;Volvo&quot; ]&#125;&#125;</span><br><span class="line">&#123;&quot;status&quot;:&quot;0&quot;,&quot;message&quot;:&quot;成功&quot;,&quot;data&quot;:&#123;&quot;name&quot;:&quot;mxh&quot; , &quot;age&quot;:22 , &quot;male&quot;:true&#125;&#125;</span><br><span class="line"></span><br><span class="line">输出数据</span><br><span class="line">0	成功	mxh	22	1	Porsche	2	BMW	</span><br><span class="line">0	成功	mxh	22	Porsche	BMW	Volvo	</span><br><span class="line">0	成功	mxh	22	true</span><br></pre></td></tr></table></figure>

<p>解析采用jackson</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String input = <span class="string">"data/json/data.txt"</span>;</span><br><span class="line">        String output = <span class="string">"out"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1:获取job对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(configuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除已存在目录</span></span><br><span class="line">        FileUtils.deleteOutput(configuration,output);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2：本job对应执行的主类</span></span><br><span class="line">        job.setJarByClass(JsonDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3）设置Mapper</span></span><br><span class="line">        job.setMapperClass(MyMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4）设置Mapper阶段输出数据的类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5）设置输入和输出路径</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(input));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(output));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6）提交作业</span></span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>,<span class="title">Text</span>,<span class="title">Text</span>,<span class="title">NullWritable</span>&gt;</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key,Text values,Context context)</span> <span class="keyword">throws</span> IOException,InterruptedException</span>&#123;</span><br><span class="line">            String str = values.toString();</span><br><span class="line">            String out = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            JsonNode root = mapper.readTree(str);</span><br><span class="line"></span><br><span class="line">            Iterator&lt;JsonNode&gt; elements = root.elements();</span><br><span class="line">            out = dfs(elements, out);</span><br><span class="line">            out = out.replace(<span class="string">"\""</span>,<span class="string">""</span>);</span><br><span class="line">            context.write(<span class="keyword">new</span> Text(out),NullWritable.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dfs</span><span class="params">(Iterator&lt;JsonNode&gt; elements, String out)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(elements.hasNext())&#123;</span><br><span class="line">            JsonNode node = elements.next();</span><br><span class="line">            <span class="keyword">if</span>(node.isObject())&#123;</span><br><span class="line">                Iterator&lt;JsonNode&gt; e = node.elements();</span><br><span class="line">                out = dfs(e, out);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(node.isArray())&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;node.size();i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(node.get(i).isObject())&#123;</span><br><span class="line">                        Iterator&lt;JsonNode&gt; e2 = node.elements();</span><br><span class="line">                        out = dfs(e2, out);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        out = out + node.get(i) + <span class="string">'\t'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                out = out + node.toString() + <span class="string">'\t'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>mapreduce</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈jackson</title>
    <url>/2020/02/08/28.%E6%B5%85%E8%B0%88jackson/</url>
    <content><![CDATA[<p>官方文档：<a href="https://github.com/FasterXML/jackson-docs" target="_blank" rel="noopener">https://github.com/FasterXML/jackson-docs</a></p>
<p>Jackson是当前用的比较广泛的，用来序列化和反序列化json的Java开源框架。Jackson社区相对比较活跃，更新速度也比较快， 从Github中的统计来看，Jackson是最流行的json解析器之一，Spring MVC的默认json解析器便是Jackson。</p>
<p>Jackson优点很多：</p>
<ol>
<li><p>Jackson 所依赖的jar包较少，简单易用。</p>
</li>
<li><p>与其他 Java 的 json 的框架 Gson 等相比，Jackson 解析大的 json 文件速度比较快。</p>
</li>
<li><p>Jackson 运行时占用内存比较低，性能比较好</p>
</li>
<li><p>Jackson 有灵活的 API，可以很容易进行扩展和定制。</p>
</li>
</ol>
<p>Jackson 的核心模块由三部分组成：</p>
<ol>
<li>jackson-core 核心包，提供基于”流模式”解析的相关 API，它包括 JsonPaser 和 JsonGenerator。Jackson 内部实现正是通过高性能的流模式 API 的 JsonGenerator 和 JsonParser 来生成和解析 json。</li>
<li>jackson-annotations 注解包，提供标准注解功能；</li>
<li>jackson-databind 数据绑定包，提供基于”对象绑定” 解析的相关 API（ ObjectMapper ）和”树模型” 解析的相关 API（JsonNode）；基于”对象绑定” 解析的 API 和”树模型”解析的 API 依赖基于”流模式”解析的 API。</li>
</ol>
]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊正则表达式</title>
    <url>/2020/02/07/27.%E8%81%8A%E8%81%8A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>正则学习文章推荐（本篇博文为转载）：<a href="https://github.com/cdoco/learn-regex-zh" target="_blank" rel="noopener">https://github.com/cdoco/learn-regex-zh</a></p>
<p>正则表达式测试工具：<a href="https://c.runoob.com/front-end/854" target="_blank" rel="noopener">https://c.runoob.com/front-end/854</a></p>
<h2 id="1-基本匹配"><a href="#1-基本匹配" class="headerlink" title="1. 基本匹配"></a>1. 基本匹配</h2><p>正则表达式只是我们用于在文本中检索字母和数字的模式。例如正则表达式 <code>cat</code>，表示: 字母 <code>c</code> 后面跟着一个字母 <code>a</code>，再后面跟着一个字母 <code>t</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;cat&quot; &#x3D;&gt; The cat sat on the mat</span><br></pre></td></tr></table></figure>

<p>正则表达式 <code>123</code> 会匹配字符串 “123”。通过将正则表达式中的每个字符逐个与要匹配的字符串中的每个字符进行比较，来完成正则匹配。 正则表达式通常区分大小写，因此正则表达式 <code>Cat</code> 与字符串 “cat” 不匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;Cat&quot; &#x3D;&gt; The cat sat on the Cat</span><br></pre></td></tr></table></figure>

<h2 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2. 元字符"></a>2. 元字符</h2><p>元字符是正则表达式的基本组成元素。元字符在这里跟它通常表达的意思不一样，而是以某种特殊的含义去解释。有些元字符写在方括号内的时候有特殊含义。 元字符如下:</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>匹配除换行符以外的任意字符。</td>
</tr>
<tr>
<td>[ ]</td>
<td>字符类，匹配方括号中包含的任意字符。</td>
</tr>
<tr>
<td>[^ ]</td>
<td>否定字符类。匹配方括号中不包含的任意字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>花括号，匹配前面字符至少 n 次，但是不超过 m 次。</td>
</tr>
<tr>
<td>(xyz)</td>
<td>字符组，按照确切的顺序匹配字符xyz。</td>
</tr>
<tr>
<td>|</td>
<td>分支结构，匹配符号之前的字符或后面的字符。</td>
</tr>
<tr>
<td>\</td>
<td>转义符，它可以还原元字符原来的含义，允许你匹配保留字符 `[ ] ( ) { } . * + ? ^ $ \</td>
</tr>
<tr>
<td>^</td>
<td>匹配行的开始</td>
</tr>
<tr>
<td>$</td>
<td>匹配行的结束</td>
</tr>
</tbody></table>
<h2 id="2-1-英文句号"><a href="#2-1-英文句号" class="headerlink" title="2.1 英文句号"></a>2.1 英文句号</h2><p>英文句号 <code>.</code> 是元字符的最简单的例子。元字符 <code>.</code> 可以匹配任意单个字符。它不会匹配换行符和新行的字符。例如正则表达式 <code>.ar</code>，表示: 任意字符后面跟着一个字母 <code>a</code>， 再后面跟着一个字母 <code>r</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;.ar&quot; &#x3D;&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure>

<h2 id="2-2-字符集"><a href="#2-2-字符集" class="headerlink" title="2.2 字符集"></a>2.2 字符集</h2><p>字符集也称为字符类。方括号被用于指定字符集。使用字符集内的连字符来指定字符范围。方括号内的字符范围的顺序并不重要。 例如正则表达式 <code>[Tt]he</code>，表示: 大写 <code>T</code> 或小写 <code>t</code> ，后跟字母 <code>h</code>，再后跟字母 <code>e</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;[Tt]he&quot; &#x3D;&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure>

<p>然而，字符集中的英文句号表示它字面的含义。正则表达式 <code>ar[.]</code>，表示小写字母 <code>a</code>，后面跟着一个字母 <code>r</code>，再后面跟着一个英文句号 <code>.</code> 字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;ar[.]&quot; &#x3D;&gt; A garage is a good place to park a car.</span><br></pre></td></tr></table></figure>

<h3 id="2-2-1-否定字符集"><a href="#2-2-1-否定字符集" class="headerlink" title="2.2.1 否定字符集"></a>2.2.1 否定字符集</h3><p>一般来说插入字符 <code>^</code> 表示一个字符串的开始，但是当它在方括号内出现时，它会取消字符集。例如正则表达式 <code>[^c]ar</code>，表示: 除了字母 <code>c</code> 以外的任意字符，后面跟着字符 <code>a</code>， 再后面跟着一个字母 <code>r</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;[^c]ar&quot; &#x3D;&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure>

<h2 id="2-3-重复"><a href="#2-3-重复" class="headerlink" title="2.3 重复"></a>2.3 重复</h2><p>以下元字符 <code>+</code>，<code>*</code> 或 <code>?</code> 用于指定子模式可以出现多少次。这些元字符在不同情况下的作用不同。</p>
<h3 id="2-3-1-星号"><a href="#2-3-1-星号" class="headerlink" title="2.3.1 星号"></a>2.3.1 星号</h3><p>该符号 <code>*</code> 表示匹配上一个匹配规则的零次或多次。正则表达式 <code>a*</code> 表示小写字母 <code>a</code> 可以重复零次或者多次。但是它如果出现在字符集或者字符类之后，它表示整个字符集的重复。 例如正则表达式 <code>[a-z]*</code>，表示: 一行中可以包含任意数量的小写字母。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;[a-z]*&quot; &#x3D;&gt; The car parked in the garage #21.</span><br></pre></td></tr></table></figure>

<p>该 <code>*</code> 符号可以与元符号 <code>.</code> 用在一起，用来匹配任意字符串 <code>.*</code>。该 <code>*</code> 符号可以与空格符 <code>\s</code> 一起使用，用来匹配一串空格字符。 例如正则表达式 <code>\s*cat\s*</code>，表示: 零个或多个空格，后面跟小写字母 <code>c</code>，再后面跟小写字母 <code>a</code>，再再后面跟小写字母 <code>t</code>，后面再跟零个或多个空格。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;\s*cat\s*&quot; &#x3D;&gt; The fat cat sat on the cat.</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-加号"><a href="#2-3-2-加号" class="headerlink" title="2.3.2 加号"></a>2.3.2 加号</h3><p>该符号 <code>+</code> 匹配上一个字符的一次或多次。例如正则表达式 <code>c.+t</code>，表示: 一个小写字母 <code>c</code>，后跟任意数量的字符，后跟小写字母 <code>t</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;c.+t&quot; &#x3D;&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>

<h3 id="2-3-3-问号"><a href="#2-3-3-问号" class="headerlink" title="2.3.3 问号"></a>2.3.3 问号</h3><p>在正则表达式中，元字符 <code>?</code> 用来表示前一个字符是可选的。该符号匹配前一个字符的零次或一次。 例如正则表达式 <code>[T]?he</code>，表示: 可选的大写字母 <code>T</code>，后面跟小写字母 <code>h</code>，后跟小写字母 <code>e</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;[T]he&quot; &#x3D;&gt; The car is parked in the garage.</span><br><span class="line">&quot;[T]?he&quot; &#x3D;&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>

<h2 id="2-4-花括号"><a href="#2-4-花括号" class="headerlink" title="2.4 花括号"></a>2.4 花括号</h2><p>在正则表达式中花括号(也被称为量词 ?)用于指定字符或一组字符可以重复的次数。例如正则表达式 <code>[0-9]{2,3}</code>，表示: 匹配至少2位数字但不超过3位(0到9范围内的字符)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;[0-9]&#123;2,3&#125;&quot; &#x3D;&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure>

<p>我们可以省略第二个数字。例如正则表达式 <code>[0-9]{2,}</code>，表示: 匹配2个或更多个数字。如果我们也删除逗号，则正则表达式 <code>[0-9]{2}</code>，表示: 匹配正好为2位数的数字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;[0-9]&#123;2,&#125;&quot; &#x3D;&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br><span class="line">&quot;[0-9]&#123;2&#125;&quot; &#x3D;&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure>

<h2 id="2-5-字符组"><a href="#2-5-字符组" class="headerlink" title="2.5 字符组"></a>2.5 字符组</h2><p>字符组是一组写在圆括号内的子模式 <code>(...)</code>。正如我们在正则表达式中讨论的那样，如果我们把一个量词放在一个字符之后，它会重复前一个字符。 但是，如果我们把量词放在一个字符组之后，它会重复整个字符组。 例如正则表达式 <code>(ab)*</code> 表示匹配零个或多个的字符串 “ab”。我们还可以在字符组中使用元字符 <code>|</code>。例如正则表达式 <code>(c|g|p)ar</code>，表示: 小写字母 <code>c</code>、<code>g</code> 或 <code>p</code> 后面跟字母 <code>a</code>，后跟字母 <code>r</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;(c|g|p)ar&quot; &#x3D;&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>

<h2 id="2-6-分支结构"><a href="#2-6-分支结构" class="headerlink" title="2.6 分支结构"></a>2.6 分支结构</h2><p>在正则表达式中垂直条 <code>|</code> 用来定义分支结构，分支结构就像多个表达式之间的条件。现在你可能认为这个字符集和分支机构的工作方式一样。 但是字符集和分支结构巨大的区别是字符集只在字符级别上有作用，然而分支结构在表达式级别上依然可以使用。 例如正则表达式 <code>(T|t)he|car</code>，表示: 大写字母 <code>T</code> 或小写字母 <code>t</code>，后面跟小写字母 <code>h</code>，后跟小写字母 <code>e</code> 或小写字母 <code>c</code>，后跟小写字母 <code>a</code>，后跟小写字母 <code>r</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he|car&quot; &#x3D;&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>

<h2 id="2-7-转义特殊字符"><a href="#2-7-转义特殊字符" class="headerlink" title="2.7 转义特殊字符"></a>2.7 转义特殊字符</h2><p>正则表达式中使用反斜杠 <code>\</code> 来转义下一个字符。这将允许你使用保留字符来作为匹配字符 <code>{ } [ ] / \ + * . $ ^ | ?</code>。在特殊字符前面加 <code>\</code>，就可以使用它来做匹配字符。 例如正则表达式 <code>.</code> 是用来匹配除了换行符以外的任意字符。现在要在输入字符串中匹配 <code>.</code> 字符，正则表达式 <code>(f|c|m)at\.?</code>，表示: 小写字母 <code>f</code>、<code>c</code> 或者 <code>m</code> 后跟小写字母 <code>a</code>，后跟小写字母 <code>t</code>，后跟可选的 <code>.</code> 字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;(f|c|m)at\.?&quot; &#x3D;&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>

<h2 id="2-8-定位符"><a href="#2-8-定位符" class="headerlink" title="2.8 定位符"></a>2.8 定位符</h2><p>在正则表达式中，为了检查匹配符号是否是起始符号或结尾符号，我们使用定位符。 定位符有两种类型: 第一种类型是 <code>^</code> 检查匹配字符是否是起始字符，第二种类型是 <code>$</code>，它检查匹配字符是否是输入字符串的最后一个字符。</p>
<h3 id="2-8-1-插入符号"><a href="#2-8-1-插入符号" class="headerlink" title="2.8.1 插入符号"></a>2.8.1 插入符号</h3><p>插入符号 <code>^</code> 符号用于检查匹配字符是否是输入字符串的第一个字符。如果我们使用正则表达式 <code>^a</code> (如果a是起始符号)匹配字符串 <code>abc</code>，它会匹配到 <code>a</code>。 但是如果我们使用正则表达式 <code>^b</code>，它是匹配不到任何东西的，因为在字符串 <code>abc</code> 中 “b” 不是起始字符。 让我们来看看另一个正则表达式 <code>^(T|t)he</code>，这表示: 大写字母 <code>T</code> 或小写字母 <code>t</code> 是输入字符串的起始符号，后面跟着小写字母 <code>h</code>，后跟小写字母 <code>e</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he&quot; &#x3D;&gt; The car is parked in the garage.</span><br><span class="line">&quot;^(T|t)he&quot; &#x3D;&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>

<h3 id="2-8-2-美元符号"><a href="#2-8-2-美元符号" class="headerlink" title="2.8.2 美元符号"></a>2.8.2 美元符号</h3><p>美元 <code>$</code> 符号用于检查匹配字符是否是输入字符串的最后一个字符。例如正则表达式 <code>(at\.)$</code>，表示: 小写字母 <code>a</code>，后跟小写字母 <code>t</code>，后跟一个 <code>.</code> 字符，且这个匹配器必须是字符串的结尾。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;(at\.)&quot; &#x3D;&gt; The fat cat. sat. on the mat.</span><br><span class="line">&quot;(at\.)$&quot; &#x3D;&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>

<h2 id="3-简写字符集"><a href="#3-简写字符集" class="headerlink" title="3. 简写字符集"></a>3. 简写字符集</h2><p>正则表达式为常用的字符集和常用的正则表达式提供了简写。简写字符集如下:</p>
<table>
<thead>
<tr>
<th>简写</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配所有字母和数字的字符: <code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td>\W</td>
<td>匹配非字母和数字的字符: <code>[^\w]</code></td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字: <code>[0-9]</code></td>
</tr>
<tr>
<td>\D</td>
<td>匹配非数字: <code>[^\d]</code></td>
</tr>
<tr>
<td>\s</td>
<td>匹配空格符: <code>[\t\n\f\r\p{Z}]</code></td>
</tr>
<tr>
<td>\S</td>
<td>匹配非空格符: <code>[^\s]</code></td>
</tr>
</tbody></table>
<h2 id="4-断言"><a href="#4-断言" class="headerlink" title="4. 断言"></a>4. 断言</h2><p>后行断言和先行断言有时候被称为断言，它们是特殊类型的 <strong><em>非捕获组</em></strong> (用于匹配模式，但不包括在匹配列表中)。当我们在一种特定模式之前或者之后有这种模式时，会优先使用断言。 例如我们想获取输入字符串 <code>$4.44 and $10.88</code> 中带有前缀 <code>$</code> 的所有数字。我们可以使用这个正则表达式 <code>(?&lt;=\$)[0-9\.]*</code>，表示: 获取包含 <code>.</code> 字符且前缀为 <code>$</code> 的所有数字。 以下是正则表达式中使用的断言:</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>?=</td>
<td>正向先行断言</td>
</tr>
<tr>
<td>?!</td>
<td>负向先行断言</td>
</tr>
<tr>
<td>?&lt;=</td>
<td>正向后行断言</td>
</tr>
<tr>
<td>?&lt;!</td>
<td>负向后行断言</td>
</tr>
</tbody></table>
<h3 id="4-1-正向先行断言"><a href="#4-1-正向先行断言" class="headerlink" title="4.1 正向先行断言"></a>4.1 正向先行断言</h3><p>正向先行断言认为第一部分的表达式必须是先行断言表达式。返回的匹配结果仅包含与第一部分表达式匹配的文本。 要在一个括号内定义一个正向先行断言，在括号中问号和等号是这样使用的 <code>(?=...)</code>。先行断言表达式写在括号中的等号后面。 例如正则表达式 <code>(T|t)he(?=\sfat)</code>，表示: 匹配大写字母 <code>T</code> 或小写字母 <code>t</code>，后面跟字母 <code>h</code>，后跟字母 <code>e</code>。 在括号中，我们定义了正向先行断言，它会引导正则表达式引擎匹配 <code>The</code> 或 <code>the</code> 后面跟着 <code>fat</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he(?&#x3D;\sfat)&quot; &#x3D;&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>

<h3 id="4-2-负向先行断言"><a href="#4-2-负向先行断言" class="headerlink" title="4.2 负向先行断言"></a>4.2 负向先行断言</h3><p>当我们需要从输入字符串中获取不匹配表达式的内容时，使用负向先行断言。负向先行断言的定义跟我们定义的正向先行断言一样， 唯一的区别是不是等号 <code>=</code>，我们使用否定符号 <code>!</code>，例如 <code>(?!...)</code>。 我们来看看下面的正则表达式 <code>(T|t)he(?!\sfat)</code>，表示: 从输入字符串中获取全部 <code>The</code> 或者 <code>the</code> 且不匹配 <code>fat</code> 前面加上一个空格字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he(?!\sfat)&quot; &#x3D;&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>

<h3 id="4-3-正向后行断言"><a href="#4-3-正向后行断言" class="headerlink" title="4.3 正向后行断言"></a>4.3 正向后行断言</h3><p>正向后行断言是用于获取在特定模式之前的所有匹配内容。正向后行断言表示为 <code>(?&lt;=...)</code>。例如正则表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code>，表示: 从输入字符串中获取在单词 <code>The</code> 或 <code>the</code> 之后的所有 <code>fat</code> 和 <code>mat</code> 单词。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;(?&lt;&#x3D;(T|t)he\s)(fat|mat)&quot; &#x3D;&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>

<h3 id="4-4-负向后行断言"><a href="#4-4-负向后行断言" class="headerlink" title="4.4 负向后行断言"></a>4.4 负向后行断言</h3><p>负向后行断言是用于获取不在特定模式之前的所有匹配的内容。负向后行断言表示为 <code>(?。例如正则表达式</code>(?，表示: 在输入字符中获取所有不在 <code>The</code> 或 <code>the</code> 之后的所有单词 <code>cat</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;(?&lt;!(T|t)he\s)(cat)&quot; &#x3D;&gt; The cat sat on cat.</span><br></pre></td></tr></table></figure>

<h2 id="5-标记"><a href="#5-标记" class="headerlink" title="5. 标记"></a>5. 标记</h2><p>标记也称为修饰符，因为它会修改正则表达式的输出。这些标志可以以任意顺序或组合使用，并且是正则表达式的一部分。</p>
<table>
<thead>
<tr>
<th>标记</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>不区分大小写: 将匹配设置为不区分大小写。</td>
</tr>
<tr>
<td>g</td>
<td>全局搜索: 搜索整个输入字符串中的所有匹配。</td>
</tr>
<tr>
<td>m</td>
<td>多行匹配: 会匹配输入字符串每一行。</td>
</tr>
</tbody></table>
<h3 id="5-1-不区分大小写"><a href="#5-1-不区分大小写" class="headerlink" title="5.1 不区分大小写"></a>5.1 不区分大小写</h3><p><code>i</code> 修饰符用于执行不区分大小写匹配。例如正则表达式 <code>/The/gi</code>，表示: 大写字母 <code>T</code>，后跟小写字母 <code>h</code>，后跟字母 <code>e</code>。 但是在正则匹配结束时 <code>i</code> 标记会告诉正则表达式引擎忽略这种情况。正如你所看到的，我们还使用了 <code>g</code> 标记，因为我们要在整个输入字符串中搜索匹配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;The&quot; &#x3D;&gt; The fat cat sat on the mat.</span><br><span class="line">&quot;&#x2F;The&#x2F;gi&quot; &#x3D;&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>

<h3 id="5-2-全局搜索"><a href="#5-2-全局搜索" class="headerlink" title="5.2 全局搜索"></a>5.2 全局搜索</h3><p><code>g</code> 修饰符用于执行全局匹配 (会查找所有匹配，不会在查找到第一个匹配时就停止)。 例如正则表达式 <code>/.(at)/g</code>，表示: 除换行符之外的任意字符，后跟小写字母 <code>a</code>，后跟小写字母 <code>t</code>。 因为我们在正则表达式的末尾使用了 <code>g</code> 标记，它会从整个输入字符串中找到每个匹配项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;.(at)&quot; &#x3D;&gt; The fat cat sat on the mat.</span><br><span class="line">&quot;&#x2F;.(at)&#x2F;g&quot; &#x3D;&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>

<h3 id="5-3-多行匹配"><a href="#5-3-多行匹配" class="headerlink" title="5.3 多行匹配"></a>5.3 多行匹配</h3><p><code>m</code> 修饰符被用来执行多行的匹配。正如我们前面讨论过的 <code>(^, $)</code>，使用定位符来检查匹配字符是输入字符串开始或者结束。但是我们希望每一行都使用定位符，所以我们就使用 <code>m</code> 修饰符。 例如正则表达式 <code>/at(.)?$/gm</code>，表示: 小写字母 <code>a</code>，后跟小写字母 <code>t</code>，匹配除了换行符以外任意字符零次或一次。而且因为 <code>m</code> 标记，现在正则表达式引擎匹配字符串中每一行的末尾。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&#x2F;.at(.)?$&#x2F;&quot; &#x3D;&gt; The fat</span><br><span class="line">                cat sat</span><br><span class="line">                on the mat.</span><br><span class="line">&quot;&#x2F;.at(.)?$&#x2F;gm&quot; &#x3D;&gt; The fat</span><br><span class="line">                  cat sat</span><br><span class="line">                  on the mat.</span><br></pre></td></tr></table></figure>

<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><ul>
<li><strong>正整数</strong>: <code>^\d+$</code></li>
<li><strong>负整数</strong>: <code>^-\d+$</code></li>
<li><strong>电话号码</strong>: <code>^+?[\d\s]{3,}$</code></li>
<li><strong>电话代码</strong>: <code>^+?[\d\s]+(?[\d\s]{10,}$</code></li>
<li><strong>整数</strong>: <code>^-?\d+$</code></li>
<li><strong>用户名</strong>: <code>^[\w\d_.]{4,16}$</code></li>
<li><strong>字母数字字符</strong>: <code>^[a-zA-Z0-9]*$</code></li>
<li><strong>带空格的字母数字字符</strong>: <code>^[a-zA-Z0-9 ]*$</code></li>
<li><strong>密码</strong>: <code>^(?=^.{6,}$)((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.*$</code></li>
<li><strong>电子邮件</strong>: <code>^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4})*$</code></li>
<li><strong>IPv4 地址</strong>: <code>^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$</code></li>
<li><strong>小写字母</strong>: <code>^([a-z])*$</code></li>
<li><strong>大写字母</strong>: <code>^([A-Z])*$</code></li>
<li><strong>网址</strong>: <code>^(((http|https|ftp):\/\/)?([[a-zA-Z0-9]\-\.])+(\.)([[a-zA-Z0-9]]){2,4}([[a-zA-Z0-9]\/+=%&amp;_\.~?\-]*))*$</code></li>
<li><strong>VISA 信用卡号码</strong>: <code>^(4[0-9]{12}(?:[0-9]{3})?)*$</code></li>
<li><strong>日期 (MM/DD/YYYY)</strong>: <code>^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]{2}$</code></li>
<li><strong>日期 (YYYY/MM/DD)</strong>: <code>^(19|20)?[0-9]{2}[- /.](0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])$</code></li>
<li><strong>万事达信用卡号码</strong>: <code>^(5[1-5][0-9]{14})*$</code></li>
</ul>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-java基础技巧</title>
    <url>/2020/02/06/%EF%BC%8126.leetcode-java%E5%9F%BA%E7%A1%80%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>之前打算法竞赛一直是用C+STL，包括牛客网上写题练习也是用这个方式来解决的，长期习惯了以后，开始对java刷题甚至产生了排斥……但鉴于java以后肯定是要常用的，因此必须矫正这个问题</p>
<p>本篇博文讲述刷leetcode过程中采用java语言遇到的坑，明明一眼就知道该怎么写但不能用其他语言写出来就是不行啊！</p>
<p>根据自己经验，有竞赛基础的建议直接从周赛题开始摸坑=3=（倒着刷）</p>
<p>（本文长期更新）</p>
<h2 id="1-String转int、long"><a href="#1-String转int、long" class="headerlink" title="1.String转int、long"></a>1.String转int、long</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">"123"</span></span><br><span class="line"><span class="keyword">int</span> n1 = Integer.parseInt(s);</span><br><span class="line"><span class="keyword">long</span> n2 = Long.parseLong(s);</span><br></pre></td></tr></table></figure>



<h2 id="2-StringBuffer"><a href="#2-StringBuffer" class="headerlink" title="2.StringBuffer"></a>2.StringBuffer</h2><p>StringBuffer类和String一样，也用来代表字符串，只是由于StringBuffer的内部实现方式和String不同，所以StringBuffer在进行字符串处理时，不生成新的对象，在内存使用上要优于String类。所以在实际使用时，如果经常需要对一个字符串进行修改，例如插入、删除等操作，使用StringBuffer要更加适合一些.</p>
<p>StringBuffer与String有一个显著的区别：<strong>StringBuffer对象的每次修改都会改变对象自身</strong></p>
<p>StringBuffer是线程安全的，所以在多线程程序中也可以很方便的进行使用，但是程序的执行效率相对来说就要稍微慢一些</p>
<p>1.String转StringBuffer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer s = <span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure>

<p>2.append方法，将内容追加到StringBuffer末尾</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer s = <span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>);</span><br><span class="line">s.append(<span class="string">"efg"</span>);</span><br><span class="line">System.out.println(s.toString());</span><br></pre></td></tr></table></figure>

<p>3.delete方法</p>
<p>deleteCharAt(int index)<br>该方法的作用是删除指定位置的字符，然后将剩余的内容形成新的字符串。第一位为0<br>s.delete(int start,int end)<br>该方法的作用是删除指定区间以内的所有字符，包含start，不包含end索引值的区间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer s = <span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>);</span><br><span class="line">s.append(<span class="string">"efg"</span>);</span><br><span class="line">s.deleteCharAt(<span class="number">2</span>);</span><br><span class="line">s.delete(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">System.out.println(s.toString());</span><br></pre></td></tr></table></figure>

<p>4.insert方法</p>
<p>StringBuffer insert(int offset, String str)<br>该方法的作用是在StringBuffer对象中插入内容，然后形成新的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"TestString"</span>);</span><br><span class="line">sb.insert(<span class="number">4</span>,<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure>

<p>5.reverse方法</p>
<p>StringBuffer reverse()<br>该方法的作用是将StringBuffer对象中的内容反转，然后形成新的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"TestString"</span>);</span><br><span class="line">sb.reverse();</span><br><span class="line">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure>

<p>6.setCharAt方法</p>
<p>setCharAt(int index, char ch)<br>该方法的作用是修改对象中索引值为index位置的字符为新的字符ch</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"bc"</span>);</span><br><span class="line">sb.setCharAt(<span class="number">1</span>,<span class="string">'D'</span>);</span><br></pre></td></tr></table></figure>



<h2 id="3-数组排序"><a href="#3-数组排序" class="headerlink" title="3.数组排序"></a>3.数组排序</h2><p>Arrays.Sort() 快排</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Arrays.sort(arys[])</span><br><span class="line">Arrays.sort(arys[],int from,int to) &#x2F;&#x2F; 排序范围:from--&gt;to-1</span><br><span class="line">Arrays.sort(arys[],new MyComparator())</span><br><span class="line">Arrays.sort(arys[],int from,int to,new MyComparator())</span><br></pre></td></tr></table></figure>

<p>Arrays.sort()方法可对任何实现compareble接口的对象数组排序, 像Integer,String这两种引用类型都实现了compareble接口，所以这两种类型的数组都可直接使用Arrays.sort()进行排序。</p>
<p>1.数字排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArray = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, -<span class="number">23</span> &#125;;</span><br><span class="line">Arrays.sort(intArray);</span><br><span class="line"></span><br><span class="line">输出： [-<span class="number">23</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>



<p>2.字符串排序，先大写后小写 String[] strArray = new String[] { “z”, “a”, “C” };</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] strArray = <span class="keyword">new</span> String[] &#123; <span class="string">"z"</span>, <span class="string">"a"</span>, <span class="string">"C"</span> &#125;;</span><br><span class="line">Arrays.sort(strArray);</span><br><span class="line"></span><br><span class="line">输出： [C, a, z]</span><br></pre></td></tr></table></figure>



<p>3.严格按字母表顺序排序，也就是忽略大小写排序 Case-insensitive sort</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(strArray, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line"></span><br><span class="line">输出： [a, C, z]</span><br></pre></td></tr></table></figure>



<p>4.反向排序,Reverse-order sort</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(strArray, Collections.reverseOrder());</span><br><span class="line"></span><br><span class="line">输出：[z, a, C]</span><br></pre></td></tr></table></figure>



<p>5.忽略大小写反向排序 Case-insensitive reverse-order sort</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(strArray, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">Collections.reverse(Arrays.asList(strArray));</span><br><span class="line"></span><br><span class="line">输出： [z, C, a]</span><br></pre></td></tr></table></figure>



<p>Collections.sort模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String str1, String str2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">　　　　　　* 升序排的话就是第一个参数.compareTo(第二个参数);</span></span><br><span class="line"><span class="comment">　　　　　　* 降序排的话就是第二个参数.compareTo(第一个参数);</span></span><br><span class="line"><span class="comment">　　　　　　*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按首字母升序排</span></span><br><span class="line">        <span class="comment">// return str1.compareTo(str2);</span></span><br><span class="line">        <span class="comment">// 按第二个字母升序排</span></span><br><span class="line">        <span class="keyword">char</span> c1 = str1.charAt(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">char</span> c2 = str2.charAt(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> c1 - c2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop之jps详解</title>
    <url>/2020/02/06/25.hadoop%E4%B9%8Bjps%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p><strong>jps最主要的功能使查看java接口的进程号</strong></p>
<p>jps(Java Virtual Machine Process Status Tool)是JDK 1.5提供的一个显示当前所有 java 进程 pid 的命令，简单实用，非常适合在 linux/unix 平台上简单察看当前java进程的一些简单情况。</p>
<p>注：jps命令有个地方很不好，似乎只能显示当前用户的java进程，要显示其他用户的还是只能用unix/linux的ps命令</p>
<h2 id="jps常用参数"><a href="#jps常用参数" class="headerlink" title="jps常用参数"></a>jps常用参数</h2><p>1.命令jps类似于Linux下的ps，但它只用于列出Java的进程。直接运行jps不加任何参数，可以列出Java程序的进程ID以及Main函数等名称。</p>
<p>其中一个输出jps就是jps命令本身，这更加证明此命令的本质也是一个Java程序</p>
<p>2.参数-q 指定jps只输出进程ID，而不输出类的短名称</p>
<p>3.参数-m 用于输出传递给Java进程（主函数）的参数</p>
<p>4.参数-l 输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名</p>
<p>5.参数-v 可以显示传递给JVM的参数</p>
<h2 id="问题：process-information-unavailable"><a href="#问题：process-information-unavailable" class="headerlink" title="问题：process information unavailable"></a>问题：process information unavailable</h2><p>1.找到进程号jps</p>
<p>2.ps -ef|grep pid是否存在（这步很关键要做判断查看进程是否存在）</p>
<p>3.假如进程不存在，我们可以去该/tmp/hsperfdata_xxx去删除</p>
<p>4.如果存在千万别删，自己查看是不可以的，其他用户查看是可用的。</p>
<p>5不存在举例：我不知道是这个进程是属于哪个用户的我们怎么操作呢？ps -ef|grep pid查看进程号属于哪个目录删除就可了</p>
<p>6.如果存在ps -ef |grep pid 看到了用户名，su 切换过去jps一下就好了</p>
<h2 id="关于jps的一些总结"><a href="#关于jps的一些总结" class="headerlink" title="关于jps的一些总结"></a>关于jps的一些总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop用户启动的 .&#x2F;start-dfs.sh  jps后可以看到进程,</span><br><span class="line">root用户看到的就是5235 -- process information unavailable,</span><br><span class="line">ps -ef| grep 5235 看的到是hadoop用户的这个进程还在,</span><br><span class="line">那这个状态就是假死,因为进程还在,所以说root用户是看不到hadoop启动的jps进程,</span><br><span class="line">只有root用户启动hdfs才能看到jps下的三个进程,</span><br><span class="line"></span><br><span class="line">root 使用jps只有两种情况：</span><br><span class="line"></span><br><span class="line">第一种: 查看正常信息</span><br><span class="line">第二种: - process information unavailable</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS最常用命令及快捷键整理</title>
    <url>/2020/02/06/24.Centos%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd &#x2F;home					进入 &#39;&#x2F;home&#39; 目录</span><br><span class="line"># cd ..						返回上一级目录</span><br><span class="line"># cd ..&#x2F;..					返回上两级目录</span><br><span class="line"># cd -						返回上次所在目录</span><br><span class="line"># cp file1 file2			将file1复制为file2</span><br><span class="line"># cp -a dir1 dir2			复制一个目录</span><br><span class="line"># cp -a &#x2F;tmp&#x2F;dir1 .			复制一个目录到当前工作目录（.代表当前目录）</span><br><span class="line"># ls						查看目录中的文件</span><br><span class="line"># ls -a						显示隐藏文件</span><br><span class="line"># ls -l						显示详细信息</span><br><span class="line"># ls -lrt					按时间显示文件（l表示详细列表，r表示反向排序，t表示按时间排序）</span><br><span class="line"># pwd						显示工作路径</span><br><span class="line"># mkdir dir1				创建 &#39;dir1&#39; 目录</span><br><span class="line"># mkdir dir1 dir2			同时创建两个目录</span><br><span class="line"># mkdir -p &#x2F;tmp&#x2F;dir1&#x2F;dir2	创建一个目录树</span><br><span class="line"># mv dir1 dir2				移动&#x2F;重命名一个目录</span><br><span class="line"># rm -f file1				删除 &#39;file1&#39;</span><br><span class="line"># rm -rf dir1				删除 &#39;dir1&#39; 目录及其子目录内容</span><br></pre></td></tr></table></figure>



<h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat file1					从第一个字节开始正向查看文件的内容</span><br><span class="line"># head -2 file1				查看一个文件的前两行</span><br><span class="line"># more file1				查看一个长文件的内容</span><br><span class="line"># tac file1					从最后一行开始反向查看一个文件的内容</span><br><span class="line"># tail -3 file1				查看一个文件的最后三行</span><br></pre></td></tr></table></figure>



<h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># grep str &#x2F;tmp&#x2F;test		在文件 &#39;&#x2F;tmp&#x2F;test&#39; 中查找 &quot;str&quot;</span><br><span class="line"># grep ^str &#x2F;tmp&#x2F;test		在文件 &#39;&#x2F;tmp&#x2F;test&#39; 中查找以 &quot;str&quot; 开始的行</span><br><span class="line"># grep [0-9] &#x2F;tmp&#x2F;test		查找 &#39;&#x2F;tmp&#x2F;test&#39; 文件中所有包含数字的行</span><br><span class="line"># grep str -r &#x2F;tmp&#x2F;*		在目录 &#39;&#x2F;tmp&#39; 及其子目录中查找 &quot;str&quot;</span><br><span class="line"># diff file1 file2			找出两个文件的不同处</span><br><span class="line"># sdiff file1 file2			以对比的方式显示两个文件的不同</span><br></pre></td></tr></table></figure>



<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># find &#x2F; -name file1				从 &#39;&#x2F;&#39; 开始进入根文件系统查找文件和目录</span><br><span class="line"># find &#x2F; -user user1				查找属于用户 &#39;user1&#39; 的文件和目录</span><br><span class="line"># find &#x2F;home&#x2F;user1 -name \*.bin		在目录 &#39;&#x2F; home&#x2F;user1&#39; 中查找以 &#39;.bin&#39; 结尾的文件</span><br><span class="line"># find &#x2F;usr&#x2F;bin -type f -atime +100	查找在过去100天内未被使用过的执行文件</span><br><span class="line"># find &#x2F;usr&#x2F;bin -type f -mtime -10	查找在10天内被创建或者修改过的文件</span><br><span class="line"># locate \*.ps						寻找以 &#39;.ps&#39; 结尾的文件，先运行 &#39;updatedb&#39; 命令</span><br><span class="line"># find -name &#39;*.[ch]&#39; | xargs grep -E &#39;expr&#39;	在当前目录及其子目录所有.c和.h文件中查找 &#39;expr&#39;</span><br><span class="line"># find -type f -print0 | xargs -r0 grep -F &#39;expr&#39;	在当前目录及其子目录的常规文件中查找 &#39;expr&#39;</span><br><span class="line"># find -maxdepth 1 -type f | xargs grep -F &#39;expr&#39;	在当前目录中查找 &#39;expr&#39;</span><br></pre></td></tr></table></figure>



<h2 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bzip2 file1							压缩 file1</span><br><span class="line"># bunzip2 file1.bz2						解压 file1.bz2</span><br><span class="line"># gzip file1							压缩 file1</span><br><span class="line"># gzip -9 file1							最大程度压缩 file1</span><br><span class="line"># gunzip file1.gz						解压 file1.gz</span><br><span class="line"># tar -cvf archive.tar file1			把file1打包成 archive.tar</span><br><span class="line">（-c: 建立压缩档案；-v: 显示所有过程；-f: 使用档案名字，是必须的，是最后一个参数）</span><br><span class="line"># tar -cvf archive.tar file1 dir1		把 file1，dir1 打包成 archive.tar</span><br><span class="line"># tar -tf archive.tar					显示一个包中的内容</span><br><span class="line"># tar -xvf archive.tar					释放一个包</span><br><span class="line"># tar -xvf archive.tar -C &#x2F;tmp			把压缩包释放到 &#x2F;tmp目录下</span><br><span class="line"># zip file1.zip file1					创建一个zip格式的压缩包</span><br><span class="line"># zip -r file1.zip file1 dir1			把文件和目录压缩成一个zip格式的压缩包</span><br><span class="line"># unzip file1.zip						解压一个zip格式的压缩包到当前目录</span><br><span class="line"># unzip test.zip -d &#x2F;tmp&#x2F;				解压一个zip格式的压缩包到 &#x2F;tmp 目录</span><br></pre></td></tr></table></figure>



<h2 id="yum工具"><a href="#yum工具" class="headerlink" title="yum工具"></a>yum工具</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum -y install [package]				下载并安装一个rpm包</span><br><span class="line"># yum localinstall [package.rpm]		安装一个rpm包，使用你自己的软件仓库解决所有依赖关系</span><br><span class="line"># yum -y update							更新当前系统中安装的所有rpm包</span><br><span class="line"># yum update [package]					更新一个rpm包</span><br><span class="line"># yum remove [package]					删除一个rpm包</span><br><span class="line"># yum list								列出当前系统中安装的所有包</span><br><span class="line"># yum search [package]					在rpm仓库中搜寻软件包</span><br><span class="line"># yum clean [package]					清除缓存目录（&#x2F;var&#x2F;cache&#x2F;yum）下的软件包</span><br><span class="line"># yum clean headers						删除所有头文件</span><br><span class="line"># yum clean all							删除所有缓存的包和头文件</span><br></pre></td></tr></table></figure>



<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ifconfig eth0										显示一个以太网卡的配置</span><br><span class="line"># ifconfig eth0 192.168.1.1 netmask 255.255.255.0	配置网卡的IP地址</span><br><span class="line"># ifdown eth0										禁用 &#39;eth0&#39; 网络设备</span><br><span class="line"># ifup eth0											启用 &#39;eth0&#39; 网络设备</span><br><span class="line"># iwconfig eth1										显示一个无线网卡的配置</span><br><span class="line"># iwlist scan										显示无线网络</span><br><span class="line"># ip addr show										显示网卡的IP地址</span><br></pre></td></tr></table></figure>



<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># su -						切换到root权限（与su有区别）</span><br><span class="line"># shutdown -h now			关机</span><br><span class="line"># shutdown -r now			重启</span><br><span class="line"># top						罗列使用CPU资源最多的linux任务 （输入q退出）</span><br><span class="line"># pstree					以树状图显示程序</span><br><span class="line"># man ping					查看参考手册（例如ping 命令）</span><br><span class="line"># passwd					修改密码</span><br><span class="line"># df -h						显示磁盘的使用情况</span><br><span class="line"># cal -3					显示前一个月，当前月以及下一个月的月历</span><br><span class="line"># cal 10 1988				显示指定月，年的月历</span><br><span class="line"># date --date &#39;1970-01-01 UTC 1427888888 seconds&#39;	把一相对于1970-01-01 00:00的秒数转换成时间</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive之UDF函数</title>
    <url>/2020/02/05/23.Hive%E4%B9%8BUDF%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>官方文档：<a href="https://cwiki.apache.org/confluence/display/Hive/HivePlugins" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/Hive/HivePlugins</a></p>
<p>中文整理稍等~</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>数据倾斜解决方案</title>
    <url>/2020/02/04/22.%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="数据倾斜"><a href="#数据倾斜" class="headerlink" title="数据倾斜"></a>数据倾斜</h2><p>1.数据倾斜怎么造成的</p>
<p>mapreduce计算是将map相同的key丢到reduce，在reduce中进行聚合操作,在map和reduce中间有个shuffle操作，shuffle会将map阶段相同的key划分到reduce阶段中的一个reduce中去，数据倾斜就是数据的key 的分化严重不均，造成一部分数据很多，一部分数据很少的局面。</p>
<p>2.数据倾斜产生的问题</p>
<ul>
<li>有一个或多个reduce卡住</li>
<li>各种container报错OOM</li>
<li>读写的数据量极大，至少远远超过其它正常的reduce</li>
<li>伴随着数据倾斜，会出现任务被kill等各种诡异的表现。</li>
</ul>
<p>3.原因和解决方法</p>
<p>原因：</p>
<ul>
<li>单个值有大量记录(1.内存的限制存在，2.可能会对集群其他任务的运行产生不稳定的影响)</li>
<li>唯一值较多(单个唯一值的记录数占用内存不会超过分配给reduce的内存)</li>
</ul>
<p>解决办法:</p>
<ul>
<li><p>增加reduce个数</p>
</li>
<li><p>使用自定义partitioner</p>
</li>
<li><p>增加reduce 的jvm内存（效果不好）</p>
</li>
<li><p>map 阶段将造成倾斜的key 先分成多组加随机数并且在reduce阶段去除随机数</p>
</li>
<li><p>从业务和数据上解决数据倾斜</p>
<p>我们通过设计的角度尝试解决它</p>
<ul>
<li>数据预处理，过滤掉异常值</li>
<li>将数据打散让它的并行度变大，再汇集</li>
</ul>
</li>
</ul>
<p>平台的优化方法</p>
<ul>
<li>join 操作中，使用 map join 在 map 端就先进行 join ，免得到reduce 时卡住</li>
<li>能先进行 group 操作的时候先进行 group 操作，把 key 先进行一次 reduce,之后再进行 count 或者 distinct count 操作</li>
<li>设置map端输出、中间结果压缩</li>
</ul>
<h2 id="MRchain解决数据倾斜"><a href="#MRchain解决数据倾斜" class="headerlink" title="MRchain解决数据倾斜"></a>MRchain解决数据倾斜</h2><p>核心思想: 第一个mapredue把具有数据倾斜特性的数据加盐(随机数)，进行聚合；第二个mapreduce把第一个mapreduce的加盐结果进行去盐，再聚合，问题是两个MR IO高。</p>
<p>mr</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainFirstDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String input = <span class="string">"data/chain/data.txt"</span>;</span><br><span class="line">        String output = <span class="string">"data/chain/first"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1:获取job对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(configuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除已存在目录</span></span><br><span class="line">        FileUtils.deleteOutput(configuration,output);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2：本job对应执行的主类</span></span><br><span class="line">        job.setJarByClass(ChainFirstDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3）设置Mapper和Reducer</span></span><br><span class="line">        job.setMapperClass(MyMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setReducerClass(MyReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        job.setNumReduceTasks(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4）设置Mapper阶段输出数据的类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5）设置Reducer阶段输出数据的类型</span></span><br><span class="line">        job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6）设置输入和输出路径</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(input));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(output));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7）提交作业</span></span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>,<span class="title">Text</span>,<span class="title">Text</span>,<span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key,Text values,Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            String[] splits = values.toString().split(<span class="string">"\t"</span>);</span><br><span class="line">            <span class="keyword">int</span> r = random.nextInt(<span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">            context.write(<span class="keyword">new</span> Text(splits[<span class="number">0</span>].trim() + <span class="string">"_"</span> + r), <span class="keyword">new</span> IntWritable(Integer.parseInt(splits[<span class="number">1</span>])));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>,<span class="title">Text</span>,<span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key,Iterable&lt;IntWritable&gt;values,Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(IntWritable value:values)&#123;</span><br><span class="line">                sum+=value.get();</span><br><span class="line">            &#125;</span><br><span class="line">            context.write(key,<span class="keyword">new</span> IntWritable(sum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>第二个mr</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainSecondDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        String input = <span class="string">"data/chain/first"</span>;</span><br><span class="line">        String output = <span class="string">"data/chain/second"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1:获取job对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(configuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除已存在目录</span></span><br><span class="line">        FileUtils.deleteOutput(configuration,output);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2：本job对应执行的主类</span></span><br><span class="line">        job.setJarByClass(ChainFirstDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3）设置Mapper和Reducer</span></span><br><span class="line">        job.setMapperClass(MyMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setReducerClass(MyReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4）设置Mapper阶段输出数据的类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5）设置Reducer阶段输出数据的类型</span></span><br><span class="line">        job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6）设置输入和输出路径</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(input));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(output));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7）提交作业</span></span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>,<span class="title">Text</span>,<span class="title">Text</span>,<span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key,Text values,Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            String[] splits = values.toString().split(<span class="string">"\t"</span>);</span><br><span class="line">            <span class="keyword">int</span> index = splits[<span class="number">0</span>].lastIndexOf(<span class="string">"_"</span>);</span><br><span class="line">            String result = splits[<span class="number">0</span>].substring(<span class="number">0</span>, index);</span><br><span class="line">            context.write(<span class="keyword">new</span> Text(result),<span class="keyword">new</span> IntWritable(Integer.parseInt(splits[<span class="number">1</span>])));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">IntWritable</span>,<span class="title">Text</span>,<span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key,Iterable&lt;IntWritable&gt; values,Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(IntWritable value:values)&#123;</span><br><span class="line">                sum+=value.get();</span><br><span class="line">            &#125;</span><br><span class="line">            context.write(key,<span class="keyword">new</span> IntWritable(sum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>FileUtils补充</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteOutput</span><span class="params">(Configuration configuration, String output)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        FileSystem fileSystem = FileSystem.get(configuration);</span><br><span class="line">        Path path = <span class="keyword">new</span> Path(output);</span><br><span class="line">        <span class="keyword">if</span>(fileSystem.exists(path))&#123;</span><br><span class="line">            fileSystem.delete(path, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive之Join详解</title>
    <url>/2020/02/03/21.Hive%E4%B9%8BJoin%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reduce&#x2F;Shuffle&#x2F;Common Join</span><br><span class="line">	join操作是在reduce端完成的</span><br><span class="line">Map Join</span><br><span class="line">	join操作是在map端完成的</span><br></pre></td></tr></table></figure>

<p>Map Join</p>
<p>join操作是在map端完成的，无Shuffle和Reduce</p>
<p>思路：小表加载到内存中，读取大表时，读一条和内存中的数据匹配一下</p>
<p>缺点：没办法处理大数据量的表，适合打表join小表</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的字典、集合</title>
    <url>/2020/02/02/20.Python%E7%9A%84%E5%AD%97%E5%85%B8%E3%80%81%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典是一种用来存放若干键值对的数据类型。</p>
<p>什么是键值对呢？<strong>键值对</strong>就是两个对象，其中一个是用来做定位的数据，叫做<strong>键</strong>（Key），另一个是要存放的数据，叫做<strong>值</strong>（Value）。在字典中，键值对作为一个整体被存放，我们可以通过键来快速获取到对应的值。</p>
<p>在 Python 中字典用花括号（<code>{}</code>）来表示，键值对以 <code>键:值</code> 的方式写入花括号中，有多个键值对时用逗号分隔。</p>
<p>如 <code>{&#39;010&#39;: &#39;beijing&#39;, &#39;021&#39;: &#39;shanghai&#39;}</code> 便是一个字典，其中包含两个键值对。</p>
<p>使用时，我们可以通过 <code>&#39;010&#39;</code> 快速查询到其对应的值是 <code>&#39;beijing&#39;</code>。这就好比现实中的一本字典一样，通过拼音或偏旁来映射一个具体的字词，以此来实现字词的快速查找，而这个拼音或偏旁就相当于 Python 字典的键，而字词就相当于 Python 字典的值，它们在字典中是映射关系。</p>
<p>Python 字典中的键是有要求的，需要是不可变的类型，如元组、字符串、数字。而字典中的值可以是任意类型。字典本身是可变的，我们可以向其中添加、删除、修改键值对。</p>
<p>因为字典不是序列，更不是有序的，所有它没有列表那样的索引，也不能保证每个键值对的存放次序。</p>
<h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><p>1.创建空的字典</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字典 &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; empty_dict &#x3D; &#123;&#125;</span><br><span class="line">&gt;&gt;&gt; empty_dict</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>



<p>2.创建包含键值对的字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字典 = &#123;键<span class="number">1</span>:值<span class="number">1</span>, 键<span class="number">2</span>:值<span class="number">2</span>, ..., 键N:值N&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes</span><br><span class="line">&#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br></pre></td></tr></table></figure>



<h3 id="字典键值对的添加"><a href="#字典键值对的添加" class="headerlink" title="字典键值对的添加"></a>字典键值对的添加</h3><p>1.向字典中增加键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字典[键] = 值</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes[‘tianjin’] = <span class="string">'022’</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; codes</span></span><br><span class="line"><span class="string">&#123;‘beijing’: ‘010’, ‘shanghai’: ‘021’, ‘tianjin’: ‘022’&#125;</span></span><br></pre></td></tr></table></figure>

<p>使用这种方式时，若字典中没有这个键，则会创建这个键值对；若字典中原本已有这个键，则是修改键所对应的值。</p>
<h3 id="键值对的获取"><a href="#键值对的获取" class="headerlink" title="键值对的获取"></a>键值对的获取</h3><p>1.通过键获取值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">值 = 字典[键]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes[‘beijing’]</span><br><span class="line">‘<span class="number">010</span>’</span><br></pre></td></tr></table></figure>

<p>注意若键不存在则将抛出 <code>KeyError</code> 异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes[‘a’]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">     File “”, line <span class="number">1</span>, <span class="keyword">in</span></span><br><span class="line">KeyError: ‘a’</span><br></pre></td></tr></table></figure>



<p>2.通过键获取值（ <code>get</code> 方法）</p>
<p>如果通过键获取值时不希望 <code>KeyError</code> 异常抛出，可以使用 <code>get</code> 方法，若键不存在，则直接返回 <code>None</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">值 = 字典.get(键)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes.get(‘a’)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>返回的 <code>None</code> 代表什么都没有，所以没有任何值显示</p>
<p>也可以给 <code>get</code> 方法传递第二个参数作为默认值，使得键不存在时直接返回默认值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">值 = 字典.get(键, 默认值)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes.get(‘a’, ‘<span class="number">000</span>’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>‘<span class="number">000</span>’</span><br></pre></td></tr></table></figure>



<p>3.判断字典中是否包含某个键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">布尔值 = 键 <span class="keyword">in</span> 字典</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>‘beijing’ <span class="keyword">in</span> codes</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>‘guangzhou’ <span class="keyword">in</span> codes</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>



<p>4.获取所有键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">键的列表 = 字典.keys()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes.keys()</span><br><span class="line">dict_keys([‘beijing’, ‘shanghai’])</span><br></pre></td></tr></table></figure>

<p>获取到的所有键是以迭代器的形式存在,在这里我们可以用 <code>list()</code> 函数将迭代器转换为列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(codes.keys())</span><br><span class="line">[‘beijing’, ‘shanghai’]</span><br></pre></td></tr></table></figure>



<p>5.获取所有值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">值的列表 = 字典.values()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes.values()</span><br><span class="line">dict_values([‘<span class="number">010</span>’, ‘<span class="number">021</span>’])</span><br></pre></td></tr></table></figure>

<p>获取到的所有值是以迭代器的形式存在，我们用 <code>list()</code> 函数将迭代器转换为列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(codes.values())</span><br><span class="line">[‘<span class="number">010</span>’, ‘<span class="number">021</span>’]</span><br></pre></td></tr></table></figure>



<p>6.获取所有键值对的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">值的列表 = 字典.items()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes.items()</span><br><span class="line">dict_items([(‘beijing’, ‘<span class="number">010</span>’), (‘shanghai’, ‘<span class="number">021</span>’)])</span><br></pre></td></tr></table></figure>

<p>获取到的所有键值对是以迭代器的形式存在，我们用 <code>list()</code> 函数将迭代器转换为列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(codes.items())</span><br><span class="line">[(‘beijing’, ‘<span class="number">010</span>’), (‘shanghai’, ‘<span class="number">021</span>’)]</span><br></pre></td></tr></table></figure>

<p>列表中的每一个元素是都是二元组（即包含两个元素的元组），每个二元组的第一个元素是键，第二个元素是值</p>
<h3 id="字典键值对的删除"><a href="#字典键值对的删除" class="headerlink" title="字典键值对的删除"></a>字典键值对的删除</h3><p>1.通过键删除键值对</p>
<p>可以使用 <code>pop</code> 方法删除一个键值对，并将值返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">值 = 字典.pop(键)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes.pop(‘beijing’)</span><br><span class="line">’<span class="number">010</span>’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes</span><br><span class="line">&#123;‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br></pre></td></tr></table></figure>

<p>如果 <code>pop</code> 一个不存在的键，则会抛出 <code>KeyError</code> 异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes.pop(‘a’)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">     File “”, line <span class="number">1</span>, <span class="keyword">in</span></span><br><span class="line">KeyError: ‘a’</span><br></pre></td></tr></table></figure>

<p>如果你不希望异常抛出，可以传递 <code>pop</code> 方法的第二个参数作为默认值。默认值仅在键不存在时生效，此时方法将直接返回这个默认值，且跳过删除操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">值 = 字典.pop(键, 默认值)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes.pop(‘guangzhou’, ‘<span class="number">000</span>’)</span><br><span class="line">’<span class="number">000</span>’</span><br></pre></td></tr></table></figure>



<p>2.通过键删除键值对（<code>del</code> 方法）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> 字典[键]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> codes[‘beijing’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes</span><br><span class="line">&#123;‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br></pre></td></tr></table></figure>



<p>3.随机删除一个键值对</p>
<p>使用 <code>popitem</code> 随机删除一个键值对，并返回这个键值对的二元组，二元组的第一个元素是键，第二个元素是值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">键值二元组 = 字典.popitem()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes.popitem()</span><br><span class="line">(‘shanghai’, ‘<span class="number">021</span>’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes</span><br><span class="line">&#123;‘beijing’: ‘<span class="number">010</span>’&#125;</span><br></pre></td></tr></table></figure>



<p>4.清空所有键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">键值二元组 = 字典.clear()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="字典中键值对修改"><a href="#字典中键值对修改" class="headerlink" title="字典中键值对修改"></a>字典中键值对修改</h3><p>1.修改键对应的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字典[键] = 值</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes[‘beijing’] = <span class="string">'021’</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; codes</span></span><br><span class="line"><span class="string">&#123;‘beijing’: ‘021’&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果键不存在，则创建键值对</p>
<p>2.用字典批量更新键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字典.update(另一字典)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes = &#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">021</span>’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes.update(&#123;‘guangzhou’: ‘<span class="number">020</span>’, ‘shanghai’: ‘<span class="number">000</span>’&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>codes</span><br><span class="line">&#123;‘beijing’: ‘<span class="number">010</span>’, ‘shanghai’: ‘<span class="number">000</span>’, ‘guangzhou’: ‘<span class="number">020</span>’&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到字典中新增了 <code>&#39;guangzhou&#39;: &#39;020&#39;</code> 这个键值对，同时将 <code>&#39;shanghai&#39;: &#39;021&#39;</code> 修改为 <code>&#39;shanghai&#39;: &#39;000&#39;</code></p>
<h3 id="什么时候用字典"><a href="#什么时候用字典" class="headerlink" title="什么时候用字典"></a>什么时候用字典</h3><p>字典的显著优势是可以通过键快速地查询数据。字典中的元素以键值对的形式存在，使用时通过键来获取和修改值，由于字典内部的特殊实现，字典通过键获取值的效率非常高。</p>
<p>如果我们希望将批量的数据存放起来，并且在需要时能以很高的执行效率来获取其中某个指定的数据，这时就可以使用字典。除此之外，如果我们想在程序中暂时维护一个映射关系，也可以使用字典，因为字典本质上就是一个映射关系。</p>
<p>如，我们可以将城市名和对应的区号保存在字典中，这样就可以通过城市名快速地查询到其区号，而不需要进行遍历。</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合是一个用于存放批量元素的数据类型，它不是有序的，其中的元素<strong>没有顺序</strong>关系。集合中的元素<strong>没有重复</strong>，重复的元素将被自动剔除最终只留下一个。</p>
<p>集合也是用花括号（<code>{}</code>）来表示，不同于字典的是，花括号中放的是一个个数据，而不是键值对。</p>
<p>集合是可变的，我们可以向其中添加、删除、修改元素。</p>
<h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p>1.创建包含元素的集合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">集合 = &#123;元素<span class="number">1</span>, 元素<span class="number">2</span>, 元素N&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>



<p>2.创建空集合</p>
<p>注意创建空集合不能直接使用 <code>{}</code>，那样是表示空字典，而是使用 <code>set()</code>，这才表示空集合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">集合 = set()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty_set = set()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty_set</span><br><span class="line">set()</span><br></pre></td></tr></table></figure>



<h3 id="集合元素的添加"><a href="#集合元素的添加" class="headerlink" title="集合元素的添加"></a>集合元素的添加</h3><p>1.向集合中添加一个元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">集合.add(元素)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.add(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p>向集合中添加重复元素时，会被去重处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.add(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>



<p>2.从另一集合中批量添加元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">集合.update(另一集合)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1 = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1.update(numbers_2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，集合<code>numbers_2</code> 中的所有元素被添加到了集合 <code>numbers_1</code> 中，并且其中重复的元素被剔除仅保留一份</p>
<h3 id="集合元素的获取"><a href="#集合元素的获取" class="headerlink" title="集合元素的获取"></a>集合元素的获取</h3><p>集合不能像列表那样通过索引来获取元素，也不能像字典那样通过键来获取值，集合没法直接获取到某个指定的元素。想要获取元素，只能通过遍历的方式。</p>
<p>虽然集合不能直接获取到元素，但是我们依然可以用 <code>in</code> 关键字来判断元素是否存在于集合中。</p>
<p>1.查看元素是否存在于集合中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">布尔值 = 元素 <span class="keyword">in</span> 集合</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = &#123;‘a’, ‘b’, ‘c’&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>‘a’ <span class="keyword">in</span> letters</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>‘z’ <span class="keyword">in</span> letters</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>



<h3 id="集合元素的删除"><a href="#集合元素的删除" class="headerlink" title="集合元素的删除"></a>集合元素的删除</h3><p>1.随机删除一个元素，并返回这个元素</p>
<p>使用 <code>pop</code> 方法随机删除一个元素的时候，这个元素会被返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">元素 = 集合.pop()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.pop()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.pop()</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers</span><br><span class="line">&#123;<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>



<p>2.删除一个指定的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">集合.remove(元素)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.remove(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p>如果要删除的元素不存在，则抛出 <code>KeyError</code> 异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.remove(<span class="number">4</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">     File “”, line <span class="number">1</span>, <span class="keyword">in</span></span><br><span class="line">KeyError: <span class="number">4</span></span><br></pre></td></tr></table></figure>



<p>3.删除一个指定的元素，且不抛出 <code>KeyError</code> 异常</p>
<p>使用 <code>remove</code> 方法删除一个不存在的元素时，会抛出 <code>KeyError</code> 异常，如果我们不想让异常抛出，可以使用 <code>discard</code> 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">集合.discard(元素)</span><br><span class="line">           </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.discard(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>



<p>4.清空所有元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">集合.clear()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers</span><br><span class="line">set()</span><br></pre></td></tr></table></figure>

<p>为什么元组没有这个方法？因为元组是不可变的！我们不能删除元组的元素，也不能添加和修改元素。</p>
<h3 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h3><p>Python 中的集合和数学中的集合颇为相似，首先集合的所有元素都是唯一的，不存在重复；此外集合有子集、超集的概念，也可以进行交集、并集、差集的运算</p>
<p>1.求交集</p>
<p>可以通过 <code>intersection</code> 方法求多个集合的交集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">交集 = 集合<span class="number">1.</span>intersection(集合<span class="number">2</span>, 集合<span class="number">3</span>, 集合N)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_3 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1.intersection(numbers_2, numbers_3)</span><br><span class="line">&#123;<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p>也可以直接使用<strong>与运算符</strong> <code>&amp;</code> 来代替，完全等效</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">交集 = 集合<span class="number">1</span> &amp; 集合<span class="number">2</span> &amp; 集合N</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1 &amp; numbers_2 &amp; numbers_3</span><br><span class="line">&#123;<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>



<p>2.求并集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">交集 = 集合<span class="number">1.</span>union(集合<span class="number">2</span>, 集合<span class="number">3</span>, 集合N)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_3 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1.union(numbers_2, numbers_3)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>

<p>也可以直接使用<strong>或运算符</strong> <code>|</code> 来代替，完全等效</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">交集 = 集合<span class="number">1</span> | 集合<span class="number">2</span> | 集合N</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1 | numbers_2 | numbers_3</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>



<p>3.求差集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">交集 = 集合<span class="number">1.</span>difference(集合<span class="number">2</span>, 集合<span class="number">3</span>, 集合N)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_3 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1.difference(numbers_2, numbers_3)</span><br><span class="line">&#123;<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>

<p>也可以直接使用运算符 <code>-</code> 来代替，完全等效</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">交集 = 集合<span class="number">1</span> - 集合<span class="number">2</span> - 集合N</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1 - numbers_2 - numbers_3</span><br><span class="line">&#123;<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>



<p>4.判断是否为子集</p>
<p>判断 <code>集合1</code> 是否为 <code>集合2</code> 的子集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">布尔值 = 集合<span class="number">1.</span>issubset(集合<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1 = &#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1.issubset(numbers_2)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_3 = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1.issubset(numbers_3)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>



<p>5.判断是否为超集</p>
<p>判断 <code>集合1</code> 是否为 <code>集合2</code> 的超集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">布尔值 = 集合<span class="number">1.</span>issuperset(集合<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_2 = &#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1.issuperset(numbers_2)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_3 = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers_1.issuperset(numbers_3)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>



<h3 id="什么时候用集合"><a href="#什么时候用集合" class="headerlink" title="什么时候用集合"></a>什么时候用集合</h3><p>集合非常重要的一个特性是元素无重复，每个元素都是唯一的，重复的元素将被自动剔除（去重）。</p>
<p>所以如果我们需要存放一系列的数据，并且不希望其中出现重复，那么就可以使用集合。</p>
<p>另外如果想计算两个数据集的交集、并集、差集，使用集合来承载数据再合适不过了，集合自带的集合运算能轻松解决这些问题。</p>
<h3 id="获取字典和集合中的元素数量"><a href="#获取字典和集合中的元素数量" class="headerlink" title="获取字典和集合中的元素数量"></a>获取字典和集合中的元素数量</h3><p>我们可以通过 <code>len()</code> 函数来获取字典中的键值对数量和集合中的元素数量</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>字典是一种用来存放若干键值对的数据类型，可通过键来快速查找值。</p>
<p>字典的键需要是不可变的类型，如数字，字符串和元组。字典的值可以是任意类型。字典本身是可变的，所以可向其中添加、修改、删除键值对。</p>
<p>集合是一个用于存放批量元素的序列。它不是有序的，且元素<strong>不会有重复</strong>。集合也是可变的，我们可以向其中添加、删除、修改元素。</p>
]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的列表、元组、字符串</title>
    <url>/2020/02/02/19.Python%E7%9A%84%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%A5%96%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表是用于存放若干元素的<strong>有序序列</strong>。列表使用方括号（<code>[]</code>）来表示，其中的元素写入方括号中，多个元素时用逗号分隔，如 <code>[1, &#39;go&#39;, [0.1, 0.2]]</code>。它的元素可以是任意数据类型，甚至也可以是个列表。</p>
<p>元素之间有顺序关系，每个元素都有自己的位置，每个位置从 0 开始依次标号，这个表示位置的数字叫作<strong>索引</strong>。</p>
<p>列表被创建之后，我们可以对它做很多操作，包括添加元素，删除元素，修改元素，查找元素等。</p>
<h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><p>1.创建空的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表 = []</span><br><span class="line"></span><br><span class="line">items = []</span><br></pre></td></tr></table></figure>



<p>2.创建包含元素的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表 = [元素<span class="number">1</span>, 元素<span class="number">2</span>, ..., 元素N]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>



<h3 id="列表元素的获取"><a href="#列表元素的获取" class="headerlink" title="列表元素的获取"></a>列表元素的获取</h3><p>1.通过索引获取元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">元素 = 列表[索引]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters[<span class="number">2</span>]</span><br><span class="line">’c’</span><br></pre></td></tr></table></figure>



<p>2.通过元素获取索引</p>
<p>这种方式和上面相反，首先在列表中寻找元素，然后返回元素对应的索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">索引 = 列表.index(元素)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [‘a’, ‘b’, ‘c’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.index(‘c’)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>



<p>3.查看元素是否存在于列表中</p>
<p>要想查看元素是否存在于列表中，需要借助 Python 的关键字 <code>in</code>，使用如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">布尔值 = 元素 <span class="keyword">in</span> 列表</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [‘a’, ‘b’, ‘c’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>‘a’ <span class="keyword">in</span> letters</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>‘z’ <span class="keyword">in</span> letters</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>



<p>4.统计元素在列表中的个数</p>
<p>统计元素在列表中的个数，或者说是元素在列表中出现的次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">个数 = 列表.count(元素)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.count(<span class="number">5</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>



<h3 id="列表元素的添加"><a href="#列表元素的添加" class="headerlink" title="列表元素的添加"></a>列表元素的添加</h3><p>我们可以很灵活地向列表添加元素，如以追加的形式向列表末尾添加一个元素；以插入的形式向列表的任意位置插入元素；或者将一个列表中的所有元素批量的添加到另一个列表中。</p>
<p>1.向列表末尾追加元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表.append(元素)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [‘a’, ‘b’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.append(‘c’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[‘a’, ‘b’, ‘c’]</span><br></pre></td></tr></table></figure>



<p>2.向列表的任意位置插入元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表.insert(索引, 元素)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [‘a’, ‘b’]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.insert(<span class="number">0</span>, ‘c’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[‘c’, ‘a’, ‘b’]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.insert(<span class="number">2</span>, ‘d’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[‘c’, ‘a’, ‘d’, ‘b’]</span><br></pre></td></tr></table></figure>



<p>3.列表末尾追加另一个列表的所有元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表.extend(另一列表)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [‘a’, ‘b’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.extend([‘c’, ‘d’, ‘e’])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[‘a’, ‘b’, ‘c’, ‘d’, ‘e’]</span><br></pre></td></tr></table></figure>



<h3 id="列表元素的删除"><a href="#列表元素的删除" class="headerlink" title="列表元素的删除"></a>列表元素的删除</h3><p>1.按索引删除元素</p>
<p><strong>pop(索引)</strong> 会将索引对应的元素从列表中删除，同时返回这个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">元素 = 列表.pop(索引)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [‘a’, ‘b’, ‘c’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.pop(<span class="number">0</span>)</span><br><span class="line">’a’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[‘b’, ‘c’]</span><br></pre></td></tr></table></figure>

<p>也可以不传递索引，这样的话默认删除并返回最后一个元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [‘a’, ‘b’, ‘c’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.pop()</span><br><span class="line">’c’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[‘a’, ‘b’]</span><br></pre></td></tr></table></figure>



<p>2.按索引删除元素（<code>del</code> 方法)</p>
<p>删除一个列表元素也可以使用 Python 中的 <code>del</code> 关键字，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> 列表[索引]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [‘a’, ‘b’, ‘c’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> letters[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[‘b’, ‘c’]</span><br></pre></td></tr></table></figure>



<p>3.直接删除元素</p>
<p>直接删除元素时，Python 会先在列表中遍历该元素，然后将匹配到的第一个元素删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表.remove(元素)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [‘a’, ‘b’, ‘c’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.remove(‘b’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[‘a’, ‘c’]</span><br></pre></td></tr></table></figure>



<p>4.清空所有元素</p>
<p>清空所有元素即是把列表元素全部删除，最后仅为列表仅为 <code>[]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表.clear()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [‘a’, ‘b’, ‘c’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>



<h3 id="列表元素的修改"><a href="#列表元素的修改" class="headerlink" title="列表元素的修改"></a>列表元素的修改</h3><p>1.通过赋值修改列表元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表[索引] = 新元素</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [‘a’, ‘b’, ‘c’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters[<span class="number">2</span>] = <span class="string">'d’</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; letters</span></span><br><span class="line"><span class="string">[‘a’, ‘b’, ‘d’]</span></span><br></pre></td></tr></table></figure>



<p>2.反转整个列表</p>
<p>反转整个列表会将所有的元素倒序排列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表.reverse()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [‘a’, ‘b’, ‘c’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[‘c’, ‘b’, ‘a’]</span><br></pre></td></tr></table></figure>



<p>3.列表元素排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表.sort()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure>

<p>也可以通过指定 <code>sort</code> 方法的 <code>reverse</code> 参数来倒序排列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers</span><br><span class="line">[<span class="number">7</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>



<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组和列表非常相似，也是用于存放元素的有序序列。它用的圆括号（<code>()</code>）表示，元素写入圆括号中，多个元素时用逗号分隔，如 <code>(1, 2, 3)</code>。</p>
<p>元组同样具有索引，索引使用方式与列表一致。其元素同样可以是任意类型。</p>
<p>看起来元组就是披着圆括号外衣的列表嘛！有什么区别？</p>
<p>元组创建完成后，便不能向其中添加元素，也不能修改和删除其中的任何一个元素。所以它与列表相比，只能查找元素，也就是说只具备读的功能，不具备写的功能。元组的这一特性叫作<strong>不可变（性）</strong>（Immutable），而列表是<strong>可变的</strong>（Mutable）。</p>
<h3 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h3><p>1.创建空的元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">元组 = ()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items</span><br><span class="line">()</span><br></pre></td></tr></table></figure>



<p>2.创建包含多个元素的元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">元组 = (元素<span class="number">1</span>, 元素<span class="number">2</span>, ..., 元素N)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>



<p>3.创建只包含一个元素的元组</p>
<p>只包含一个元素的情况需要单独说明一下，因为它的形式与直觉不相符。</p>
<p>创建只包含一个元素的元组，需要在唯一的那个元素后面<strong>加上逗号</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">元组 = (元素,)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = (<span class="number">1</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items</span><br><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure>

<p>这是因为，如果括号中只有一个元素，那么 Python 会将这个括号当作优先级符号进行处理（像数学中的那样），而不是当作元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = (<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(items)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> ‘<span class="title">int</span>’&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="元组元素的获取"><a href="#元组元素的获取" class="headerlink" title="元组元素的获取"></a>元组元素的获取</h3><p>1.通过索引获取元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">元素 = 元组[索引]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = (‘a’, ‘b’, ‘c’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters[<span class="number">2</span>]</span><br><span class="line">’c’</span><br></pre></td></tr></table></figure>



<p>2.通过元素获取索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">索引 = 元组.index(元素)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = (‘a’, ‘b’, ‘c’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.index(‘c’)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>



<p>3.查看元素是否存在于元组中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">布尔值 = 元素 <span class="keyword">in</span> 元组</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = (‘a’, ‘b’, ‘c’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>‘a’ <span class="keyword">in</span> letters</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>‘z’ <span class="keyword">in</span> letters</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>



<p>4.统计元素在元组中出现的个数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">个数 = 元组.count(元素)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.count(<span class="number">5</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>



<h2 id="元组和列表的差别"><a href="#元组和列表的差别" class="headerlink" title="元组和列表的差别"></a>元组和列表的差别</h2><p>我们可以看到，元组所具有的操作在使用方式上与和列表非常相似，甚至在一定程度上可以将元组看作是列表的精简版，但它们之间也有明显的差别。</p>
<ul>
<li>元组是不可变的（Immutable），列表是可变的（Mutable），元组在被创建之后，就不能添加、删除和修改元素，而列表可以</li>
<li>一般情况下元组的性能在略高于列表</li>
</ul>
<p>我们在什么时候用列表，什么时候用元组？</p>
<p>列表还是元组，通常性能不是从它们中做选择的主要考虑因素，因为它们之间的性能差异不是很大。我们的选择通常围绕着可变和不可变的特性进行，当我们需要添加元素或修改元素时，使用列表；当我们希望所有元素在创建之后便不再改变，可使用元组。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是 Python 中用来存放字符序列的数据类型，其中的元素只能是字符。字符串使用单引号或双引号来表示，如 <code>&#39;pick&#39;</code>，<code>&quot;cherry&quot;</code>，通常我们首先使用单引号。</p>
<p>字符串是有序序列，可以使用索引来获取其中某个位置的元素。它是不可变的，被创建之后其中的元素（也就是字符）不能被修改和删除。</p>
<h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><p>1.创建空字符串（即不包含字符的字符串）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串 = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string</span><br><span class="line">’’</span><br></pre></td></tr></table></figure>



<p>2.创建包含元素的字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串 = <span class="string">'若干字符'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">'happy’</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; string</span></span><br><span class="line"><span class="string">’happy’</span></span><br></pre></td></tr></table></figure>



<h3 id="字符的获取"><a href="#字符的获取" class="headerlink" title="字符的获取"></a>字符的获取</h3><ol>
<li>通过索引获取字符<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符 = 字符串[索引]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = ‘happy’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">2</span>]</span><br><span class="line">’p’</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>2.通过子串获取索引</p>
<p>所谓子串就是从字符串中截取下来的一部分，可以是一个字符，一部分字符、全部字符、或空字符串，如 <code>&#39;a&#39;</code>、<code>&#39;ppy&#39;</code>、<code>&#39;happy&#39;</code>、<code>&#39;&#39;</code> 都是 ‘happy’ 的子串。查找子串时，返回的是子串的第一个字符的索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">索引 = 字符串.index(字符)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = ‘happy’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.index(‘p’)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = ‘happy’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.index(‘app’)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>当字符或子串不存在时，<code>index</code> 方法将抛出 <code>ValueError</code> 错误。</p>
<p>也可采用字符串的 <code>find</code> 方法来查找子串，使用方式与 <code>index</code> 一致，不同点在于 <code>find</code> 方法未找到子串时返回数字 <code>-1</code>，而不抛异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = ‘happy’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.find(‘app’)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.find(‘z’)</span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure>



<p>3.查看字符是否存在于字符串中</p>
<p>查看字符是否存在于字符串中，需要借助 Python 的关键字 <code>in</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">布尔值 = 字符 <span class="keyword">in</span> 字符串</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = ‘happy’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>‘a’ <span class="keyword">in</span> string</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>‘z’ <span class="keyword">in</span> string</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>



<p>4.统计字符在字符串中的个数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">个数 = 字符串.count(字符)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = ‘happy’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.count(‘p’)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>



<h3 id="字符串的处理"><a href="#字符串的处理" class="headerlink" title="字符串的处理"></a>字符串的处理</h3><p>字符串自带的方法非常多，除了上面介绍的几个之外还有四十多个，这是因为字符处理是编程时的一项高频工作。Python 将这些字符处理相关的功能以方法的形式集成在字符串里。这里列举几个常见的方法</p>
<p>1.startswith：判断字符串是否以某个子串开头，返回布尔值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = ‘happy’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.startswith(‘ha’)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>



<p>2.endswith：判断字符串是否以某个子串结尾，返回布尔值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = ‘happy’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.endswith(‘y’)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>



<p>3.replace：将字符串的子串用一个另一个字符串替换，返回一个新的字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = ‘happy’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.replace(‘y’, ‘iness’)</span><br><span class="line">’happiness’</span><br></pre></td></tr></table></figure>



<p>4.strip：去除字符串前后的空白符号，如空格、换行符、制表符，返回一个新的字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = ’ \t happy \n’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.strip()</span><br><span class="line">’happy’</span><br></pre></td></tr></table></figure>



<p>5.split：将字符串用某个子串分隔开，分隔后的各个部分放入列表中，并返回这个列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = ‘I am happy’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.split(’ <span class="string">')</span></span><br><span class="line"><span class="string">[‘I’, ‘am’, ‘happy’]</span></span><br></pre></td></tr></table></figure>



<p>6.join：将一个序列中的元素用某个字符（串）拼接，组成一个大的字符串，并返回这个字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>words = [‘I’, ‘am’, ‘happy’]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>’ <span class="string">'.join(words)</span></span><br><span class="line"><span class="string">’I am happy’</span></span><br></pre></td></tr></table></figure>



<p>7.upper：将字符串转化为大写字母形式，返回一个新的字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = ‘happy’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.upper()</span><br><span class="line">’HAPPY’</span><br></pre></td></tr></table></figure>



<p>8.lower：将字符串转化为小写字母形式，返回一个新的字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = ‘HAPPY’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.lower()</span><br><span class="line">’happy’</span><br></pre></td></tr></table></figure>

<p>注意上面的这些字符处理功能，对字符串作处理后都是返回一个新的字符串，而不会直接修改原有的字符串。为什么呢？<strong>字符串不可变呀！</strong></p>
<h2 id="列表、元组、字符串的通用操作"><a href="#列表、元组、字符串的通用操作" class="headerlink" title="列表、元组、字符串的通用操作"></a>列表、元组、字符串的通用操作</h2><p>我们把列表、元组、字符串统称为<strong>序列</strong></p>
<p>1.使用 <code>len()</code> 函数获取序列长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = (‘a’, ‘b’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(letters)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = ‘abcd’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(letters)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>



<p>2.获取序列中的一个子序列</p>
<p>获取序列中的子序列可以使用<strong>切片</strong>，以 <code>[起始索引:结束索引]</code> 表示。切片其实代表一个索引区间，这个区间是一个<strong>左开右闭区间</strong>，该区间内的所有元素作为子序列被返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = ‘abcd’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">’bcd’</span><br></pre></td></tr></table></figure>



<p>3.使用 <code>+</code> 符号来拼接两个序列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters_1 = (‘a’, ‘b’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters_2 = (‘c’, ‘d’, ‘e’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters_1 + letters_2</span><br><span class="line">(‘a’, ‘b’, ‘c’, ‘d’, ‘e’)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters_1 = ‘ab’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters_2 = ‘cde’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters_1 + letters_2</span><br><span class="line">’abcde’</span><br></pre></td></tr></table></figure>



<p>4.使用 <code>*</code> 符号来重复序列中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = (‘a’, ‘b’)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters * <span class="number">3</span></span><br><span class="line">(‘a’, ‘b’, ‘a’, ‘b’, ‘a’, ‘b’)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = ‘abcd’</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters * <span class="number">2</span></span><br><span class="line">’abcdabcd’</span><br></pre></td></tr></table></figure>

<p>注意上面的操作结果都是返回一个新的序列，不会对修改序列的内部元素</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>列表、元组、字符串都是有序序列，都可以使用索引。</p>
<p>列表和元组中可以存放任意数据类型的元素，而字符串中只能存放字符。</p>
<p>列表是可变的，而元组和字符串是不可变的。</p>
]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo d部署后需要在github上重新保存域名的问题</title>
    <url>/2020/02/01/18.hexo%20d%E9%83%A8%E7%BD%B2%E5%90%8E%E9%9C%80%E8%A6%81%E5%9C%A8github%E4%B8%8A%E9%87%8D%E6%96%B0%E4%BF%9D%E5%AD%98%E5%9F%9F%E5%90%8D%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>1.在根目录的source文件夹下新建一个CNAME文件（无后缀），内容就写自己的域名</p>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.maxinhong.com</span><br></pre></td></tr></table></figure>

<p>2.hexo g重新生成一下静态文件</p>
<p>3.hexo d部署</p>
]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive DDL之数据库操作</title>
    <url>/2020/01/30/17.Hive%20DDL%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p><strong>官方文档</strong>：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL</a></p>
<p>详情请看官方文档，本文只记录部分关键字便于回忆查询</p>
<p>DDL：Hive Data Definition Language</p>
<p>&emsp;&emsp;create、delete、alter…</p>
<p>Hive数据抽象/结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">database     HDFS一个目录</span><br><span class="line">	table    HDFS一个目录</span><br><span class="line">		data  文件 </span><br><span class="line">		partition 分区表  HDFS一个目录</span><br><span class="line">			data  文件 </span><br><span class="line">			bucket  分桶   HDFS一个文件</span><br></pre></td></tr></table></figure>



<p>创建数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE (DATABASE|SCHEMA) [IF NOT EXISTS] database_name</span><br><span class="line">  [COMMENT database_comment]</span><br><span class="line">  [LOCATION hdfs_path]</span><br><span class="line">  [WITH DBPROPERTIES (property_name&#x3D;property_value, ...)];</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">CREATE DATABASE IF NOT EXISTS hive;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE IF NOT EXISTS hive2 LOCATION &#39;&#x2F;test&#x2F;location&#39;;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE IF NOT EXISTS hive3 WITH DBPROPERTIES(&#39;creator&#39;&#x3D;&#39;pearfl&#39;);</span><br></pre></td></tr></table></figure>

<p>/usr/hive/warehouse是Hive默认的存储在HDFS上的路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD DATA LOCAL INPATH &#39;&#x2F;home&#x2F;hadoop&#x2F;data&#x2F;emp.txt&#39; OVERWRITE INTO TABLE emp;</span><br><span class="line"></span><br><span class="line">LOAD DATA [LOCAL] INPATH &#39;filepath&#39; [OVERWRITE] INTO TABLE tablename [PARTITION (partcol1&#x3D;val1, partcol2&#x3D;val2 ...)]</span><br><span class="line"></span><br><span class="line">LOCAL：本地系统，如果没有local那么就是指的HDFS的路径</span><br><span class="line">OVERWRITE：是否数据覆盖，如果没有那么就是数据追加</span><br><span class="line"></span><br><span class="line">LOAD DATA LOCAL INPATH &#39;&#x2F;home&#x2F;hadoop&#x2F;data&#x2F;emp.txt&#39; OVERWRITE INTO TABLE emp;</span><br><span class="line"></span><br><span class="line">LOAD DATA INPATH &#39;hdfs:&#x2F;&#x2F;hadoop000:8020&#x2F;data&#x2F;emp.txt&#39; INTO TABLE emp;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT OVERWRITE LOCAL DIRECTORY &#39;&#x2F;tmp&#x2F;hive&#x2F;&#39;</span><br><span class="line">ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;\t&#39;</span><br><span class="line">select empno,ename,sal,deptno from emp;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive部署</title>
    <url>/2020/01/28/16.Hive%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="Hive部署"><a href="#Hive部署" class="headerlink" title="Hive部署"></a>Hive部署</h2><p>1）下载</p>
<p>2）解压</p>
<p>3）添加HIVE_HOME到系统环境变量</p>
<p>4）修改配置 hive-env.sh</p>
<p>5）拷贝MySQL驱动包到$HIVE_HOME/lib</p>
<p>6）前提是要安装一个MySQL数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf hive-1.1.0-cdh5.16.2.tar.gz -C ~&#x2F;app&#x2F;</span><br><span class="line"></span><br><span class="line">配置.bash_profile</span><br><span class="line">export HIVE_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;apache-hive-1.1.0-cdh5.16.2-bin</span><br><span class="line">export PATH&#x3D;$HIVE_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>



<p>在hive文件夹的conf文件夹内进行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cp hive-env.sh.template hive-env.sh</span><br></pre></td></tr></table></figure>

<p>若hadoop没有配置进环境变量，需要再hive-env.sh内配置HADOOP_HOME</p>
<p>配置hive-site.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type&#x3D;&quot;text&#x2F;xsl&quot; href&#x3D;&quot;configuration.xsl&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionURL&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;jdbc:mysql:&#x2F;&#x2F;hadoop000:3306&#x2F;hadoop_hive?createDatabaseIfNotExist&#x3D;true&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;com.mysql.jdbc.Driver&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;hadoop&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;hadoop&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hive.cli.print.current.db&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hive.cli.print.header&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<p>javax.jdo.option.ConnectionUserName对应mysql中的账号</p>
<p>javax.jdo.option.ConnectionPassword对应mysql中的密码</p>
<p>拷贝mysql的架包到hive文件夹下的lib文件夹中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp ~&#x2F;lib&#x2F;mysql-connector-java-5.1.47.jar &#x2F;home&#x2F;pearfl&#x2F;app&#x2F;apache-hive-1.1.0-cdh5.16.2-bin&#x2F;lib&#x2F;mysql-connector-java-5.1.47.jar</span><br></pre></td></tr></table></figure>



<h2 id="hive编译安装"><a href="#hive编译安装" class="headerlink" title="hive编译安装"></a>hive编译安装</h2><p>hive-1.1.0-cdh5.16.2-src.tar.gz已下载在~/tmp下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd &#x2F;tmp&#x2F;</span><br><span class="line"># tar -xf hive-1.1.0-cdh5.16.2-src.tar.gz</span><br><span class="line"># cd &#x2F;hive-1.1.0-cdh5.16.2</span><br><span class="line"># mvn clean package -DskipTests -Phadoop-2 -Pdist</span><br></pre></td></tr></table></figure>

<p>之后会有一个比较长时间的等待</p>
<p>编译生成的包在以下位置：</p>
<p>packaging/target/apache-hive-1.1.0-cdh5.7.1-bin.tar.gz，之后就是像之前博客一样配置环境变量</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>log4j相关配置</title>
    <url>/2020/01/27/15.log4j%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>log4j.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log4j.rootCategory&#x3D;info, console</span><br><span class="line">log4j.appender.console&#x3D;org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.target&#x3D;System.err</span><br><span class="line">log4j.appender.console.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern&#x3D;%p %c&#123;1&#125;: %m%n</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路径算法</title>
    <url>/2020/01/26/14.%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="最短路径算法"><a href="#最短路径算法" class="headerlink" title="最短路径算法"></a>最短路径算法</h2><h3 id="1-Dijkstra-算法"><a href="#1-Dijkstra-算法" class="headerlink" title="1.$Dijkstra$算法"></a>1.$Dijkstra$算法</h3><p>解决单源最短路径问题常用 Dijkstra 算法，用于计算一个顶点到其他所有顶点的最短路径。Dijkstra 算法的主要特点是以起点为中心，逐层向外扩展（这一点类似于 bfs，但是不同的是，bfs 每次扩展一个层，但是 Dijkstra 每次只会扩展一个点），每次都会取一个最近点继续扩展，直到取完所有点为止。 </p>
<p>注意：Dijkstra 算法要求图中不能出现负权边。</p>
<h4 id="①、-Dijkstra-算法流程"><a href="#①、-Dijkstra-算法流程" class="headerlink" title="①、$Dijkstra$算法流程"></a>①、$Dijkstra$算法流程</h4><p>我们定义带权图$ G $所有顶点的集合为$ V$，接着我们再定义已确定从源点出发的最短路径的顶点集合为$ U$，初始集合 $U $为空，记从源点$ s $出发到每个顶点$ v $的距离为 $dist_v $，初始 $dist_s$=0。接着执行以下操作： </p>
<ol>
<li><p>从 $V−U $中找出一个距离源点最近的顶点$v$，将$v$加入集合$ U$。</p>
</li>
<li><p>并用 $dist_v$和顶点 $v $连出的边来更新和 $v $相邻的、不在集合 $U$中的顶点的 $dist$，这一步称为松弛操作。  </p>
</li>
<li><p>重复步骤 1 和 2，直到 $V=U$或找不出一个从$ s$ 出发有路径到达的顶点，算法结束。  </p>
</li>
</ol>
<p>如果最后 $V \neq U$，说明有顶点无法从源点到达；否则每个$ dist_i$表示从 $s$ 出发到顶点$ i $的最短距离。  </p>
<p>Dijkstra 算法的时间复杂度为$ \mathcal{O}(V^2)$，其中 $V$ 表示顶点的数量。</p>
<p>Dijkstra 是解决无负边权的图的单源最短路问题，经常使用邻接表存储。</p>
<p>不优化的时间复杂度是 $O(V^2 + E)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e4</span> + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, fail;</span><br><span class="line">    edge() &#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _v, <span class="keyword">int</span> _w, <span class="keyword">int</span> _fail) &#123;</span><br><span class="line">        v = _v;</span><br><span class="line">        w = _w;</span><br><span class="line">        fail = _fail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], len;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[len] = edge(v, w, head[u]);</span><br><span class="line">    head[u] = len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    add(u, v, w);</span><br><span class="line">    add(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    dis[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> mi = inf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; dis[j] &lt; mi) &#123;</span><br><span class="line">                mi = dis[u = j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mi == inf) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = head[u]; ~j; j = e[j].fail) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[j].v;</span><br><span class="line">            <span class="keyword">int</span> w = e[j].w;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp; dis[v] &gt; dis[u] + w) &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        add2(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    dijkstra(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dis[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="②、基于小根堆优化的-Dijkstra-算法"><a href="#②、基于小根堆优化的-Dijkstra-算法" class="headerlink" title="②、基于小根堆优化的$Dijkstra$算法"></a>②、基于小根堆优化的$Dijkstra$算法</h4><p>用一个set来维护点的集合，这样的时间复杂度就优化到了 $\mathcal{O}((V+E)\log V)$，对于稀疏图的优化效果非常好</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, next;</span><br><span class="line">&#125; e[MAX_M];</span><br><span class="line"><span class="keyword">int</span> p[MAX_N], eid, n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mapinit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">-1</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">    eid = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;  <span class="comment">// 插入带权有向边</span></span><br><span class="line">    e[eid].v = v;</span><br><span class="line">    e[eid].w = w;</span><br><span class="line">    e[eid].next = p[u];</span><br><span class="line">    p[u] = eid++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;  <span class="comment">// 插入带权双向边</span></span><br><span class="line">    insert(u, v, w);</span><br><span class="line">    insert(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="built_in">set</span>&lt;PII, less&lt;PII&gt; &gt; min_heap;</span><br><span class="line"><span class="keyword">int</span> dist[MAX_N];  <span class="comment">// 存储单源最短路的结果</span></span><br><span class="line"><span class="keyword">bool</span> vst[MAX_N];  <span class="comment">// 标记每个顶点是否在集合 U 中</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化 dist、小根堆和集合 U</span></span><br><span class="line">    <span class="built_in">memset</span>(vst, <span class="number">0</span>, <span class="keyword">sizeof</span>(vst));</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line">    min_heap.insert(make_pair(<span class="number">0</span>, s));</span><br><span class="line">    dist[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (min_heap.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;  <span class="comment">// 如果小根堆中没有可用顶点，说明有顶点无法从源点到达，算法结束</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取堆顶元素，并将堆顶元素从堆中删除</span></span><br><span class="line">        <span class="built_in">set</span>&lt;PII, less&lt;PII&gt; &gt;::iterator iter = min_heap.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">int</span> v = iter-&gt;second;</span><br><span class="line">        min_heap.erase(*iter);</span><br><span class="line">        vst[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 进行和普通 dijkstra 算法类似的松弛操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = p[v]; j != <span class="number">-1</span>; j = e[j].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = e[j].v;</span><br><span class="line">            <span class="keyword">if</span> (!vst[x] &amp;&amp; dist[v] + e[j].w &lt; dist[x]) &#123;</span><br><span class="line">                <span class="comment">// 先将对应的 pair 从堆中删除，再将更新后的 pair 插入堆</span></span><br><span class="line">                min_heap.erase(make_pair(dist[x], x));</span><br><span class="line">                dist[x] = dist[v] + e[j].w;</span><br><span class="line">                min_heap.insert(make_pair(dist[x], x));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 存储单源最短路的结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="③、基于优先队列优化的-Dijkstra-算法"><a href="#③、基于优先队列优化的-Dijkstra-算法" class="headerlink" title="③、基于优先队列优化的$Dijkstra$算法"></a>③、基于优先队列优化的$Dijkstra$算法</h4><p>我们在 $node $节点里面记录对应的点的最短路，然后每次更新一个点的最短路后都把这个点压入到优先队列里面（不管之前有没有被压入到队列里面），这样就一定能够保证优先队列对的性质不会改变</p>
<p>这个代码的时间复杂度实际上会比用真正的堆要慢一点，因为有的点可能会入队多次，但是每一条边最多导致一次入队，所以这个算法的时间复杂度为 $\mathcal{O}(E\log E)$。其中$ E $为边的数量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, next;</span><br><span class="line">&#125; e[MAX_M];</span><br><span class="line"><span class="keyword">int</span> p[MAX_N], eid, n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mapinit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">-1</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">    eid = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;  <span class="comment">// 插入带权有向边</span></span><br><span class="line">    e[eid].v = v;</span><br><span class="line">    e[eid].w = w;</span><br><span class="line">    e[eid].next = p[u];</span><br><span class="line">    p[u] = eid++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;  <span class="comment">// 插入带权双向边</span></span><br><span class="line">    insert(u, v, w);</span><br><span class="line">    insert(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dist[MAX_N];  <span class="comment">// 存储单源最短路的结果</span></span><br><span class="line"><span class="keyword">bool</span> vst[MAX_N];  <span class="comment">// 标记每个顶点是否在集合 U 中</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">  <span class="keyword">int</span> dist;</span><br><span class="line">    node(<span class="keyword">int</span> _u, <span class="keyword">int</span> _dist) : u(_u), dist(_dist) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dist &gt; x.dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; <span class="comment">// 记录点的结构体</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化 dist、小根堆和集合 U</span></span><br><span class="line">    <span class="built_in">memset</span>(vst, <span class="number">0</span>, <span class="keyword">sizeof</span>(vst));</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line">    priority_queue&lt;node&gt; min_heap;</span><br><span class="line">    dist[s] = <span class="number">0</span>;</span><br><span class="line">    min_heap.push(node(s, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> (!min_heap.empty())</span><br><span class="line">        <span class="comment">// 获取堆顶元素，并将堆顶元素从堆中删除</span></span><br><span class="line">        <span class="keyword">int</span> v = min_heap.top().u;</span><br><span class="line">        min_heap.pop();</span><br><span class="line">        <span class="keyword">if</span> (vst[v]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vst[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 进行和普通 dijkstra 算法类似的松弛操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = p[v]; j != <span class="number">-1</span>; j = e[j].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = e[j].v;</span><br><span class="line">            <span class="keyword">if</span> (!vst[x] &amp;&amp; dist[v] + e[j].w &lt; dist[x]) &#123;</span><br><span class="line">                dist[x] = dist[v] + e[j].w;</span><br><span class="line">                min_heap.push(node(x, dist[x]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-SPFA-算法"><a href="#2-SPFA-算法" class="headerlink" title="2.$SPFA$算法"></a>2.$SPFA$算法</h3><p>SPFA（Shortest Path Faster Algorithm）算法是单源最短路径的一种算法，通常被认为是 Bellman-ford 算法的队列优化，在代码形式上接近于宽度优先搜索 BFS，是一个在实践中非常高效的单源最短路算法。</p>
<h4 id="①、-SPFA-算法流程"><a href="#①、-SPFA-算法流程" class="headerlink" title="①、$SPFA$算法流程"></a>①、$SPFA$算法流程</h4><p>在 $SPFA$ 算法中，使用 $d_i$表示从源点到顶点$i$的最短路，额外用一个队列来保存即将进行拓展的顶点列表，并用 $inq_i$来标识顶点$i$是不是在队列中。</p>
<p>1.初始队列中仅包含源点，且源点 $s$ 的 $d_s=0$。</p>
<p>2.取出队列头顶点 $u$，扫描从顶点 $u$ 出发的每条边，设每条边的另一端为 $v$，边$&lt;u,v&gt;$ 权值为 $w$，若 $d_u+w&lt;d_v$，则 </p>
<ul>
<li><p>将 $d_v$修改为 $d_u+w$</p>
</li>
<li><p>若 $v$ 不在队列中，则 </p>
</li>
<li><p>将 $v $入队 </p>
</li>
</ul>
<p>3.重复步骤 2 直到队列为空 </p>
<p>最终$ d$ 数组就是从源点出发到每个顶点的最短路距离。如果一个顶点从没有入队，则说明没有从源点到该顶点的路径。</p>
<p>$SPFA$ 的空间复杂度为$ \mathcal{O}(V)$。如果顶点的平均入队次数为 $k$，则 $SPFA $的时间复杂度为 $\mathcal{O}(kE)$O，对于较为随机的稀疏图，根据经验 $k$ 一般不超过 4。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e4</span> + <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, fail;</span><br><span class="line">    edge()&#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _v, <span class="keyword">int</span> _w, <span class="keyword">int</span> _fail)&#123;</span><br><span class="line">        v = _v;</span><br><span class="line">        w = _w;</span><br><span class="line">        fail = _fail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], len;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    e[len] = edge(v, w, head[u]);</span><br><span class="line">    head[u] = len++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    add(u, v, w);</span><br><span class="line">    add(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    dis[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(u);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = head[u];~j;j = e[j].fail)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[j].v;</span><br><span class="line">            <span class="keyword">int</span> w = e[j].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[u] + w)&#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                    vis[v] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        add2(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    spfa(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dis[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="②、-SPFA-判断负环"><a href="#②、-SPFA-判断负环" class="headerlink" title="②、$SPFA$判断负环"></a>②、$SPFA$判断负环</h4><p>$Dijkstra$不能处理有负权的图，而 $SPFA$ 可以处理任意不含负环（负环是指总边权和为负数的环）的图的最短路，并能判断图中是否存在负环</p>
<p>但是 $SPFA $可以用来判断负环，在进行 $SPFA $时，用一个数组 $cnt_i$来标记每个顶点入队次数。如果一个顶点入队次数 $cnt_i$大于顶点总数 n，则表示该图中包含负环。一般情况下，$SPFA$ 判负环都只用在有向图上，因为在无向图上，一条负边权的边就是一个负环了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in);</span><br><span class="line">in[u] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 修改入队部分的操作</span></span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">    q.push(v);</span><br><span class="line">    vis[v] = <span class="literal">true</span>;</span><br><span class="line">    ++in[v];</span><br><span class="line">    <span class="keyword">if</span>(in[v] &gt; n)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3、-floyd-多源最短路算法"><a href="#3、-floyd-多源最短路算法" class="headerlink" title="3、$floyd$多源最短路算法"></a>3、$floyd$多源最短路算法</h3><p>$∀1≤k≤n,dp [i] [j] = min（dp[i] [j]，dp[i][k]+ dp [k][j]）$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> g[N][N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                g[i][j] = <span class="built_in">min</span>(g[i][j], g[i][k] + g[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL创建用户与授权</title>
    <url>/2020/01/24/13.MySQL%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E4%B8%8E%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<h2 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1.创建用户"></a>1.创建用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;</span><br></pre></td></tr></table></figure>

<p>username：你将创建的用户名<br>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%<br>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &#39;dog&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">CREATE USER &#39;pig&#39;@&#39;192.168.1.101_&#39; IDENDIFIED BY &#39;123456&#39;;</span><br><span class="line">CREATE USER &#39;pig&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">CREATE USER &#39;pig&#39;@&#39;%&#39; IDENTIFIED BY &#39;&#39;;</span><br><span class="line">CREATE USER &#39;pig&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>





<h2 id="2-授权"><a href="#2-授权" class="headerlink" title="2.授权"></a>2.授权</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39;</span><br></pre></td></tr></table></figure>

<p>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL<br>databasename：数据库名<br>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示，如</em>.*</p>
<p>用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:<br>GRANT privileges ON databasename.tablename TO ‘username’@’host’ WITH GRANT OPTION;</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT SELECT, INSERT ON test.user TO &#39;pig&#39;@&#39;%&#39;;</span><br><span class="line">GRANT ALL ON *.* TO &#39;pig&#39;@&#39;%&#39;;</span><br><span class="line">GRANT ALL ON maindataplus.* TO &#39;pig&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>



<h2 id="3-设置与更改用户密码"><a href="#3-设置与更改用户密码" class="headerlink" title="3.设置与更改用户密码"></a>3.设置与更改用户密码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR &#39;username&#39;@&#39;host&#39; &#x3D; PASSWORD(&#39;newpassword&#39;);</span><br></pre></td></tr></table></figure>

<p>如果是当前登陆用户用:<br>SET PASSWORD = PASSWORD(“newpassword”);</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR &#39;pig&#39;@&#39;%&#39; &#x3D; PASSWORD(&quot;123456&quot;);</span><br></pre></td></tr></table></figure>



<h2 id="4-撤销用户权限"><a href="#4-撤销用户权限" class="headerlink" title="4.撤销用户权限"></a>4.撤销用户权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REVOKE privilege ON databasename.tablename FROM &#39;username&#39;@&#39;host&#39;;</span><br></pre></td></tr></table></figure>

<p>privilege, databasename, tablename：同授权部分</p>
<p>假如你在给用户‘pig’@’%’授权的时候是这样的（或类似的）：GRANT SELECT ON test.user TO ‘pig’@’%’，则在使用REVOKE SELECT ON <em>.</em> FROM ‘pig’@’%’;命令并不能撤销该用户对test数据库中user表的SELECT 操作。</p>
<p>相反，如果授权使用的是GRANT SELECT ON <em>.</em> TO ‘pig’@’%’;则REVOKE SELECT ON test.user FROM ‘pig’@’%’;命令也不能撤销该用户对test数据库中user表的Select权限。</p>
<p>具体信息可以用命令SHOW GRANTS FOR ‘pig’@’%’; 查看。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REVOKE SELECT ON *.* FROM &#39;pig&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>



<h2 id="5-删除用户"><a href="#5-删除用户" class="headerlink" title="5.删除用户"></a>5.删除用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP USER &#39;username&#39;@&#39;host&#39;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7使用firewalld打开关闭防火墙与端口</title>
    <url>/2020/01/23/12.CentOS7%E4%BD%BF%E7%94%A8firewalld%E6%89%93%E5%BC%80%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%8E%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="CentOS7使用firewalld打开关闭防火墙与端口"><a href="#CentOS7使用firewalld打开关闭防火墙与端口" class="headerlink" title="CentOS7使用firewalld打开关闭防火墙与端口"></a>CentOS7使用firewalld打开关闭防火墙与端口</h2><p>1、firewalld的基本使用</p>
<p>启动： systemctl start firewalld</p>
<p>关闭： systemctl stop firewalld</p>
<p>查看状态： systemctl status firewalld </p>
<p>开机禁用 ： systemctl disable firewalld</p>
<p>开机启用 ： systemctl enable firewalld</p>
<p>2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</p>
<p>启动一个服务：systemctl start firewalld.service<br>关闭一个服务：systemctl stop firewalld.service<br>重启一个服务：systemctl restart firewalld.service<br>显示一个服务的状态：systemctl status firewalld.service<br>在开机时启用一个服务：systemctl enable firewalld.service<br>在开机时禁用一个服务：systemctl disable firewalld.service<br>查看服务是否开机启动：systemctl is-enabled firewalld.service<br>查看已启动的服务列表：systemctl list-unit-files|grep enabled<br>查看启动失败的服务列表：systemctl –failed</p>
<p>3.配置firewalld-cmd</p>
<p>查看版本： firewall-cmd –version</p>
<p>查看帮助： firewall-cmd –help</p>
<p>显示状态： firewall-cmd –state</p>
<p>查看所有打开的端口： firewall-cmd –zone=public –list-ports</p>
<p>更新防火墙规则： firewall-cmd –reload</p>
<p>查看区域信息:  firewall-cmd –get-active-zones</p>
<p>查看指定接口所属区域： firewall-cmd –get-zone-of-interface=eth0</p>
<p>拒绝所有包：firewall-cmd –panic-on</p>
<p>取消拒绝状态： firewall-cmd –panic-off</p>
<p>查看是否拒绝： firewall-cmd –query-panic</p>
<p>那怎么开启一个端口呢</p>
<p>添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent   （--permanent永久生效，没有此参数重启后失效）</span><br></pre></td></tr></table></figure>

<p>重新载入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D; public --query-port&#x3D;80&#x2F;tcp</span><br></pre></td></tr></table></figure>

<p>删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D; public --remove-port&#x3D;80&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>firewalld</tag>
      </tags>
  </entry>
  <entry>
    <title>pip源</title>
    <url>/2020/01/22/11.pip%E6%BA%90/</url>
    <content><![CDATA[<h2 id="pip源修改"><a href="#pip源修改" class="headerlink" title="pip源修改"></a>pip源修改</h2><p>国内源：<br>新版ubuntu要求使用https源，要注意。</p>
<p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a></p>
<p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a></p>
<p>华中理工大学：<a href="http://pypi.hustunique.com/" target="_blank" rel="noopener">http://pypi.hustunique.com/</a></p>
<p>山东理工大学：<a href="http://pypi.sdutlinux.org/" target="_blank" rel="noopener">http://pypi.sdutlinux.org/</a></p>
<p>豆瓣：<a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a></p>
<p>临时使用：<br>可以在使用pip的时候加参数-i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>例如：pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> pyspider，这样就会从清华这边的镜像去安装pyspider库。</p>
<p>永久修改，一劳永逸：<br>Linux下，修改 ~/.pip/pip.conf (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹)</p>
<p>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host&#x3D;mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<p>windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini。内容同上。</p>
]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>无法停止hadoop集群</title>
    <url>/2020/01/20/10.%E6%97%A0%E6%B3%95%E5%81%9C%E6%AD%A2hadoop%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p>问题描述：</p>
<p>执行 ./bin/stop-all.sh 脚本一直提示没有可停止的namenode、datanode、secondarynode。</p>
<p>可是输入 jps 命令，发现hadoop 已经启动。</p>
<p>原因：</p>
<p>hadoop在stop的时候依据的是datanode上的mapred和dfs进程号。而默认的进程号保存在/tmp下，linux默认会每 隔一段时间（一般是一个月或者7天左右）去删除这个目录下的文件。因此删掉hadoop-hadoop-jobtracker.pid和hadoop- hadoop-namenode.pid两个文件后，namenode自然就找不到datanode上的这两个进程了。</p>
<p>解决方法：</p>
<p>jps查看所有进程的pid，手动杀死进程 kill -9 pid，多个节点都需要操作！<br>为了避免下次也出现问题，在配置文件中$HADOOP_HOME/etc/hadoop/hadoop-env.sh中添加如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export HADOOP_PID_DIR&#x3D;$&#123;HADOOP_HOME&#125;&#x2F;pids</span><br></pre></td></tr></table></figure>

<p>重启Hadoop集群，即可</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>DBWritable与Writable的坑</title>
    <url>/2020/01/18/9.DBWritable%E4%B8%8EWritable%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:~/lib/mysql-connector-java-5.1.28-bin.jar</p>
<h2 id="本地运行，从mysql读取数据跑mapreduce"><a href="#本地运行，从mysql读取数据跑mapreduce" class="headerlink" title="本地运行，从mysql读取数据跑mapreduce"></a>本地运行，从mysql读取数据跑mapreduce</h2><p><strong>接口实现不仅仅要实现DBWritable，还应当实现Writable！！！**</strong></p>
<p>DeptWritable.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.apache.hadoop.io.Writable;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.db.DBWritable;</span><br><span class="line"></span><br><span class="line">import java.io.DataInput;</span><br><span class="line">import java.io.DataOutput;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * author：若泽数据-PK哥</span><br><span class="line"> * 交流群：545916944</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class DeptWritable implements Writable, DBWritable &#123;</span><br><span class="line">    private int deptid;</span><br><span class="line">    private int deptno;</span><br><span class="line">    private String dname;</span><br><span class="line">    private String loc;</span><br><span class="line"></span><br><span class="line">    public DeptWritable()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public DeptWritable(int deptid, int deptno,String dname,String loc)&#123;</span><br><span class="line">        this.deptid &#x3D; deptid;</span><br><span class="line">        this.deptno &#x3D; deptno;</span><br><span class="line">        this.dname &#x3D; dname;</span><br><span class="line">        this.loc &#x3D; loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getDeptid() &#123;</span><br><span class="line">        return deptid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDeptid(int deptid) &#123;</span><br><span class="line">        this.deptid &#x3D; deptid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getDeptno() &#123;</span><br><span class="line">        return deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDeptno(int deptno) &#123;</span><br><span class="line">        this.deptno &#x3D; deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDname() &#123;</span><br><span class="line">        return dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDname(String dname) &#123;</span><br><span class="line">        this.dname &#x3D; dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getLoc() &#123;</span><br><span class="line">        return loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLoc(String loc) &#123;</span><br><span class="line">        this.loc &#x3D; loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void write(PreparedStatement statement) throws SQLException &#123;</span><br><span class="line">        statement.setInt(1,deptid);</span><br><span class="line">        statement.setInt(2,deptno);</span><br><span class="line">        statement.setString(3,dname);</span><br><span class="line">        statement.setString(4,loc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void readFields(ResultSet resultSet) throws SQLException &#123;</span><br><span class="line">        deptid &#x3D; resultSet.getInt(1);</span><br><span class="line">        deptno &#x3D; resultSet.getInt(2);</span><br><span class="line">        dname &#x3D; resultSet.getString(3);</span><br><span class="line">        loc &#x3D; resultSet.getString(4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void write(DataOutput out) throws IOException &#123;</span><br><span class="line">        out.writeInt(deptid);</span><br><span class="line">        out.writeInt(deptno);</span><br><span class="line">        out.writeUTF(dname);</span><br><span class="line">        out.writeUTF(loc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void readFields(DataInput in) throws IOException &#123;</span><br><span class="line">        this.deptid &#x3D; in.readInt();</span><br><span class="line">        this.deptno &#x3D; in.readInt();</span><br><span class="line">        this.dname &#x3D; in.readUTF();</span><br><span class="line">        this.loc &#x3D; in.readUTF();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return deptid + &quot;\t&quot;</span><br><span class="line">                + &quot;\t&quot; + deptno</span><br><span class="line">                + &quot;\t&quot; + dname</span><br><span class="line">                + &quot;\t&quot; + loc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>MySQLReadDriver.java（该方案可以在本地运行，但打成瘦包后在服务器上不能运行）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ruozedata.bigdata.hadoop.utils.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.db.DBConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.db.DBInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLReadDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String output = <span class="string">"out"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1）获取Job对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line"><span class="comment">//        configuration.set(DBConfiguration.DRIVER_CLASS_PROPERTY, "com.mysql.jdbc.Driver");</span></span><br><span class="line">        DBConfiguration.configureDB(configuration, <span class="string">"com.mysql.jdbc.Driver"</span>, <span class="string">"jdbc:mysql://hadoop000:3306/sqoop"</span>, <span class="string">"hadoop"</span>, <span class="string">"hadoop"</span>);</span><br><span class="line"></span><br><span class="line">        Job job = Job.getInstance(configuration);</span><br><span class="line">        FileUtils.deleteOutput(configuration, output);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2）本job对应要执行的主类是哪个</span></span><br><span class="line">        job.setJarByClass(MySQLReadDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3）设置Mapper和Reducer</span></span><br><span class="line">        job.setMapperClass(MyMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4）设置Mapper阶段输出数据的类型</span></span><br><span class="line">        job.setMapOutputKeyClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(DeptWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6）设置输入和输出路径</span></span><br><span class="line">        String[] fields = &#123;<span class="string">"id"</span>, <span class="string">"deptno"</span>, <span class="string">"dname"</span>, <span class="string">"loc"</span>&#125;;</span><br><span class="line">        DBInputFormat.setInput(job, DeptWritable.class, "dept", null, null, fields);</span><br><span class="line"></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(output));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7）提交作业</span></span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">DeptWritable</span>, <span class="title">NullWritable</span>, <span class="title">DeptWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, DeptWritable value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            context.write(NullWritable.get(), value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>MySQLReadDriverv2.java（该方案打成瘦包后可以在服务器上运行）</p>
<p><strong>extends Configured implements Tool</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ruozedata.bigdata.hadoop.utils.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configured;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.db.DBConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.db.DBInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.Tool;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.ToolRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLReadDriverV2</span> <span class="keyword">extends</span> <span class="title">Configured</span> <span class="keyword">implements</span> <span class="title">Tool</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="keyword">int</span> run = ToolRunner.run(configuration, <span class="keyword">new</span> MySQLReadDriverV2(), args);</span><br><span class="line">        System.exit(run);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String output = <span class="string">"out"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1）获取Job对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">super</span>.getConf();</span><br><span class="line"><span class="comment">//        configuration.set(DBConfiguration.DRIVER_CLASS_PROPERTY, "com.mysql.jdbc.Driver");</span></span><br><span class="line">        DBConfiguration.configureDB(configuration, <span class="string">"com.mysql.jdbc.Driver"</span>, <span class="string">"jdbc:mysql://hadoop000:3306/sqoop"</span>, <span class="string">"hadoop"</span>, <span class="string">"4WOzuishuai"</span>);</span><br><span class="line"></span><br><span class="line">        Job job = Job.getInstance(configuration);</span><br><span class="line">        FileUtils.deleteOutput(configuration, output);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2）本job对应要执行的主类是哪个</span></span><br><span class="line">        job.setJarByClass(MySQLReadDriverV2<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3）设置Mapper和Reducer</span></span><br><span class="line">        job.setMapperClass(MyMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4）设置Mapper阶段输出数据的类型</span></span><br><span class="line">        job.setMapOutputKeyClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(DeptWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6）设置输入和输出路径</span></span><br><span class="line">        String[] fields = &#123;<span class="string">"id"</span>, <span class="string">"deptno"</span>, <span class="string">"dname"</span>, <span class="string">"loc"</span>&#125;;</span><br><span class="line">        DBInputFormat.setInput(job, DeptWritable.class, "dept", null, null, fields);</span><br><span class="line"></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(output));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7）提交作业</span></span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">DeptWritable</span>, <span class="title">NullWritable</span>, <span class="title">DeptWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, DeptWritable value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            context.write(NullWritable.get(), value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql5.6安装</title>
    <url>/2020/01/15/8.mysql5.6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>本次操作在centos7.2版本的服务器上成功实现，本文不涉及rpm和源码安装2种方式，本文采用二进制安装</p>
<h2 id="1-首先我们需要卸载内置的mariadb"><a href="#1-首先我们需要卸载内置的mariadb" class="headerlink" title="1.首先我们需要卸载内置的mariadb"></a>1.首先我们需要卸载内置的mariadb</h2><p>原因是以前的Linux系统中数据库大部分是mysql，不过自从被sun收购之后，就没用集成在centos这些开源Linux系统中了，那么如果想用的话就需要自己安装了，首先centos7 已经不支持mysql，因为收费了你懂得，所以内部集成了mariadb，而安装mysql的话会和mariadb的文件冲突，所以需要先卸载掉mariadb</p>
<p>操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum search mysql &#x2F;&#x2F;检查是否有mariadb.x86_64</span><br><span class="line"># yum remove mariadb-libs.x86_64</span><br></pre></td></tr></table></figure>



<h2 id="2-下载mysql"><a href="#2-下载mysql" class="headerlink" title="2.下载mysql"></a>2.下载mysql</h2><p>安装包：mysql-5.6.47-linux-glibc2.12-x86_64.tar.gz</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 下载</span><br><span class="line"># wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;Downloads&#x2F;MySQL-5.6&#x2F;mysql-5.6.47-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">&#x2F;&#x2F; 解压</span><br><span class="line"># tar -zxvf mysql-5.6.47-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">&#x2F;&#x2F; 复制解压后的mysql目录</span><br><span class="line"># cp -r mysql-5.6.47-linux-glibc2.12-x86_64 &#x2F;usr&#x2F;local&#x2F;mysql</span><br></pre></td></tr></table></figure>



<h2 id="3-添加用户组和用户"><a href="#3-添加用户组和用户" class="headerlink" title="3.添加用户组和用户"></a>3.添加用户组和用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;添加用户组</span><br><span class="line"># groupadd mysql</span><br><span class="line">&#x2F;&#x2F;添加用户mysql 到用户组mysql</span><br><span class="line"># useradd -g mysql mysql</span><br></pre></td></tr></table></figure>



<h2 id="4-安装"><a href="#4-安装" class="headerlink" title="4.安装"></a>4.安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;</span><br><span class="line"># mkdir .&#x2F;data&#x2F;mysql</span><br><span class="line"># chown -R mysql:mysql .&#x2F;</span><br><span class="line"># .&#x2F;scripts&#x2F;mysql_install_db --user&#x3D;mysql --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;mysql</span><br><span class="line"># cp support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysqld</span><br><span class="line"># chmod 755 &#x2F;etc&#x2F;init.d&#x2F;mysqld</span><br><span class="line"># cp support-files&#x2F;my-default.cnf &#x2F;etc&#x2F;my.cnf</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;修改启动脚本</span><br><span class="line"># vi &#x2F;etc&#x2F;init.d&#x2F;mysqld</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;修改项：</span><br><span class="line">basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;</span><br><span class="line">datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;mysql</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;启动服务</span><br><span class="line"># service mysqld start</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;加入环境变量，编辑 &#x2F;etc&#x2F;profile，这样可以在任何地方用mysql命令了</span><br><span class="line"># export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;&#x2F;bin&lt;br&gt;source &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;启动mysql</span><br><span class="line"># service mysqld start</span><br><span class="line">&#x2F;&#x2F;关闭mysql</span><br><span class="line"># service mysqld stop</span><br><span class="line">&#x2F;&#x2F;查看运行状态</span><br><span class="line"># service mysqld status</span><br></pre></td></tr></table></figure>



<p>可能出现的问题↓</p>
<p>问题1:：FATAL ERROR: please install the following Perl modules before executing</p>
<p>问题原因：缺少autoconf库</p>
<p>解决方案：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install autoconf</span><br></pre></td></tr></table></figure>



<p>问题2：Installing MySQL system tables…./bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</p>
<p>问题原因：缺少libaio库文件</p>
<p>解决方案：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install libaio*</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>手机流量统计-自定义序列化类</title>
    <url>/2020/01/14/7.%E6%89%8B%E6%9C%BA%E6%B5%81%E9%87%8F%E7%BB%9F%E8%AE%A1-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB/</url>
    <content><![CDATA[<p>Access.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义序列化类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Access</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> up;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> down;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sum;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone + <span class="string">'\t'</span> + up + <span class="string">'\t'</span> + down + <span class="string">'\t'</span> + sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Access</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Access</span><span class="params">(String phone, <span class="keyword">long</span> up, <span class="keyword">long</span> down)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">        <span class="keyword">this</span>.up = up;</span><br><span class="line">        <span class="keyword">this</span>.down = down;</span><br><span class="line">        <span class="keyword">this</span>.sum = up + down;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        dataOutput.writeUTF(phone);</span><br><span class="line">        dataOutput.writeLong(up);</span><br><span class="line">        dataOutput.writeLong(down);</span><br><span class="line">        dataOutput.writeLong(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = dataInput.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.up = dataInput.readLong();</span><br><span class="line">        <span class="keyword">this</span>.down = dataInput.readLong();</span><br><span class="line">        <span class="keyword">this</span>.sum = dataInput.readLong();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> up;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">(<span class="keyword">long</span> up)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.up = up;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> down;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDown</span><span class="params">(<span class="keyword">long</span> down)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.down = down;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSum</span><span class="params">(<span class="keyword">long</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sum = sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>SerDriver.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ruozedata.bigdata.hadoop.utils.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 千篇一律</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1) 获取Job对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(configuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2) 本job对应要执行的主类是哪个</span></span><br><span class="line">        job.setJarByClass(SerDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3) 设置Mapper和Reducer</span></span><br><span class="line">        job.setMapperClass(MyMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setReducerClass(MyReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4) 设置Mapper阶段输出数据的类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(Access<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5) 设置Reducer阶段输出数据的类型</span></span><br><span class="line">        job.setOutputKeyClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputValueClass(Access<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6) 设置输入和输出路径</span></span><br><span class="line">        String input = <span class="string">"data/access.log"</span>;</span><br><span class="line">        String output = <span class="string">"out"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        FileUtils.deleteOutput(configuration, output);</span><br><span class="line"></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(input));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(output));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7) 提交作业</span></span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Access</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            String[] splits = value.toString().split(<span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 手机号</span></span><br><span class="line">            String phone = splits[<span class="number">1</span>]; <span class="comment">//index是从0开始的</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 上行流量</span></span><br><span class="line">            <span class="keyword">long</span> up = Long.parseLong(splits[splits.length - <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下行流量</span></span><br><span class="line">            <span class="keyword">long</span> down = Long.parseLong(splits[splits.length - <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写出去</span></span><br><span class="line"><span class="comment">//            Access access = new Access();</span></span><br><span class="line"><span class="comment">//            access.setPhone(phone);</span></span><br><span class="line"><span class="comment">//            access.setUp(up);</span></span><br><span class="line"><span class="comment">//            access.setDown(down);</span></span><br><span class="line"><span class="comment">//            access.setSum(up + down);</span></span><br><span class="line"></span><br><span class="line">            context.write(<span class="keyword">new</span> Text(phone), <span class="keyword">new</span> Access(phone, up, down));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">Access</span>, <span class="title">NullWritable</span>, <span class="title">Access</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text phone, Iterable&lt;Access&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> ups = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> downs = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            Iterator&lt;Access&gt; iterator = values.iterator();</span></span><br><span class="line"><span class="comment">//            while(iterator.hasNext())&#123;</span></span><br><span class="line"><span class="comment">//                Access next = iterator.next();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(Access access : values)&#123;</span><br><span class="line">                ups += access.getUp();</span><br><span class="line">                downs += access.getDown();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            context.write(NullWritable.get(), <span class="keyword">new</span> Access(phone.toString(), ups, downs));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>hdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>hdfs简单API编程</title>
    <url>/2020/01/07/6.hdfs%E7%AE%80%E5%8D%95API%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.permission.FsPermission;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSAPITest2</span> </span>&#123;</span><br><span class="line">    FileSystem fileSystem;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        URI uri = <span class="keyword">new</span> URI(<span class="string">"hdfs://hadoop:8020"</span>);</span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">        configuration.set(<span class="string">"dfs.client.use.datanode.hostname"</span>, <span class="string">"true"</span>);</span><br><span class="line">        configuration.set(<span class="string">"dfs.replication"</span>, <span class="string">"1"</span>);</span><br><span class="line">        <span class="comment">// 1) 获取HDFS客户端</span></span><br><span class="line">        fileSystem = FileSystem.get(uri, configuration, <span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 3) 关闭资源</span></span><br><span class="line">        <span class="keyword">if</span>(fileSystem != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fileSystem.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mkdir</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        fileSystem.mkdirs(<span class="keyword">new</span> Path(<span class="string">"hdfs://hadoop:8020/hdfstest0"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFromLocalFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Path src = <span class="keyword">new</span> Path(<span class="string">"data/ruozedata.txt"</span>);</span><br><span class="line">        Path dst = <span class="keyword">new</span> Path(<span class="string">"/hdfstest"</span>);</span><br><span class="line">        fileSystem.copyFromLocalFile(src, dst);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyToLocalFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Path src = <span class="keyword">new</span> Path(<span class="string">"/20201011/146.txt"</span>);</span><br><span class="line">        Path dst = <span class="keyword">new</span> Path(<span class="string">"output/146.txt"</span>);</span><br><span class="line">        fileSystem.copyToLocalFile(src, dst);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rename</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Path src = <span class="keyword">new</span> Path(<span class="string">"/20201011/20201011-0.txt"</span>);</span><br><span class="line">        Path dst = <span class="keyword">new</span> Path(<span class="string">"/20201011/146.txt"</span>);</span><br><span class="line">        fileSystem.rename(src, dst);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listFiles</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        RemoteIterator&lt;LocatedFileStatus&gt; files = fileSystem.listFiles(<span class="keyword">new</span> Path(<span class="string">"/20201011"</span>), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(files.hasNext())&#123;</span><br><span class="line">            LocatedFileStatus fileStatus = files.next();</span><br><span class="line">            String path = fileStatus.getPath().toString();</span><br><span class="line">            <span class="keyword">long</span> len = fileStatus.getLen();</span><br><span class="line">            <span class="keyword">short</span> replication = fileStatus.getReplication();</span><br><span class="line">            FsPermission permission = fileStatus.getPermission();</span><br><span class="line">            String isDir = fileStatus.isDirectory()? <span class="string">"文件夹"</span> : <span class="string">"文件"</span>;</span><br><span class="line"></span><br><span class="line">            System.out.println(path + <span class="string">"\t"</span> + len + <span class="string">"\t"</span> + replication + <span class="string">"\t"</span> + permission + <span class="string">"\t"</span> + isDir);</span><br><span class="line"></span><br><span class="line">            BlockLocation[] blockLocations = fileStatus.getBlockLocations();</span><br><span class="line">            <span class="keyword">for</span>(BlockLocation location : blockLocations)&#123;</span><br><span class="line">                String[] hosts = location.getHosts();</span><br><span class="line">                <span class="keyword">for</span>(String host : hosts)&#123;</span><br><span class="line">                    System.out.println(host + <span class="string">"........"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        fileSystem.delete(<span class="keyword">new</span> Path(<span class="string">"/hdfstest"</span>), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>hdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop单结点集群搭建</title>
    <url>/2020/01/06/5.hadoop%E5%8D%95%E7%BB%93%E7%82%B9%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>官网描述:<a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html" target="_blank" rel="noopener">https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html</a></p>
<p>本文在官网描述的基础上做翻译和细节补充</p>
<h2 id="hadoop部署"><a href="#hadoop部署" class="headerlink" title="hadoop部署"></a>hadoop部署</h2><p>类似于前一篇章的jdk部署</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-2.6.0-cdh5.16.2.tar.gz -C ~&#x2F;app&#x2F;</span><br><span class="line"></span><br><span class="line">hadoop软件包常见目录说明</span><br><span class="line">	bin: hadoop客户端命令</span><br><span class="line">	etc: hadoop相关的配置文件存放目录</span><br><span class="line">	sbin:启动hadoop相关进程的脚本</span><br><span class="line">	share:常用例子</span><br><span class="line"></span><br><span class="line">配置.bash_profile</span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;hadoop-2.6.0-cdh5.16.2</span><br><span class="line">export PATH&#x3D;$HADOOP_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>



<p>修改相关的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop-env.sh内需要配置JAVA_HOME</span><br><span class="line">localhost:8020中的localhost需要修改</span><br><span class="line"></span><br><span class="line">core-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;hdfs:&#x2F;&#x2F;hadoop000:8020&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line"></span><br><span class="line">hdfs-site.xml</span><br><span class="line">其中hadoop.tmp.dir修改是因为机器每次重启时候会清空tmp目录</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;tmp&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line"></span><br><span class="line">slaves</span><br><span class="line">	mxh(设置成你喜欢的就行了，注意需要与hostname一致)</span><br></pre></td></tr></table></figure>



<p>启动HDFS：第一次执行的时候一定要格式化文件系统，不要重复执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>


<p>启动集群</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$HADOOP_HOME&#x2F;sbin&#x2F;start-dfs.sh</span><br><span class="line">验证:</span><br><span class="line">#jps</span><br><span class="line">8148 NameNode</span><br><span class="line">8245 DataNode</span><br><span class="line">8540 SecondaryNameNode</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop学习前置部署</title>
    <url>/2020/01/04/4.hadoop%E5%AD%A6%E4%B9%A0%E5%89%8D%E6%9C%9F%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="jdk部署"><a href="#jdk部署" class="headerlink" title="jdk部署"></a>jdk部署</h2><p><strong>Hadoop安装前置要求Java版本在1.8+</strong></p>
<p>安装过程（本过程在root用户下进行，非root用户目录有轻微变动）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拷贝本地软件包到服务器（wget等方法均可）</span><br><span class="line"></span><br><span class="line">解压jdk:</span><br><span class="line"># tar -zvxf jdk-8u231-linux-x64.tar.gz -C ~&#x2F;app&#x2F;</span><br><span class="line"># 解压的包放置在app文件夹内，根据个人需要选择</span><br><span class="line"></span><br><span class="line">把jdk配置在系统环境变量中: ~&#x2F;.bash_profile</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;jdk1.8.0_231</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">之后source一下使其生效:source .bash_profile</span><br><span class="line">可以通过echo $JAVA_HOME检查是否生效</span><br><span class="line">提示：此处&#x3D;左右不可有空格</span><br></pre></td></tr></table></figure>



<h2 id="ssh免密登录"><a href="#ssh免密登录" class="headerlink" title="ssh免密登录"></a>ssh免密登录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ssh-keygen -t rsa  #一路回车</span><br><span class="line">此时.ssh文件夹下有3个新文件</span><br><span class="line">id_rsa          # 私钥</span><br><span class="line">id_rsa.pub      # 公钥</span><br><span class="line">known_hosts     # </span><br><span class="line"></span><br><span class="line"># cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"># chmod 600 authorized_keys</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>linux用户管理</title>
    <url>/2019/12/30/3.linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="简易命令"><a href="#简易命令" class="headerlink" title="简易命令"></a>简易命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd testuser  创建用户testuser</span><br><span class="line">passwd testuser  给已创建的用户testuser设置密码</span><br><span class="line">说明：新创建的用户会在&#x2F;home下创建一个用户目录testuser</span><br><span class="line">usermod --help  修改用户这个命令的相关参数</span><br><span class="line">userdel testuser  删除用户testuser</span><br><span class="line">rm -rf testuser  删除用户testuser所在目录</span><br></pre></td></tr></table></figure>



<h2 id="给用户添加root权限"><a href="#给用户添加root权限" class="headerlink" title="给用户添加root权限"></a>给用户添加root权限</h2><p>使用Linux系统时，经常会被要求使用超级权限，但是root的权限太过大了，一般慎用！！！因此可以通过给普通用户添加sudo权限，平常用普通用户进行操作，当需要root权限的时候进行sudo操作。以下为解决办法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 进入超级用户模式，也就是输入”su root”，系统会让你输入超级用户密码，输入密码后就进入了超级用户模式。（当然，你也可以直接用root进入修改）</span><br><span class="line">2. 添加文件的写权限，也就是输入命令”chmod u+w &#x2F;etc&#x2F;sudoers”。</span><br><span class="line">3. 编辑&#x2F;etc&#x2F;sudoers文件，也就是输入命令”vim &#x2F;etc&#x2F;sudoers”，进入编辑模式，找到这一 行：”root ALL&#x3D;(ALL) ALL”（会用vim编辑器的可以使用“&#x2F;root ALL&#x3D;(ALL)ALL”定位）在其下面添加”xxx ALL&#x3D;(ALL) ALL”(这里的xxx是你的用户名)，然后保存退出。</span><br><span class="line">4. 撤销文件的写权限，也就是输入命令”chmod u-w &#x2F;etc&#x2F;sudoers”。</span><br></pre></td></tr></table></figure>



<h2 id="修改hostname"><a href="#修改hostname" class="headerlink" title="修改hostname"></a>修改hostname</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo hostnamectl set-hostname &lt;newhostname&gt;</span><br></pre></td></tr></table></figure>





<h2 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h2><p>用户：使用操作系统的人</p>
<p>用户组：具有相同系统权限的一组用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;group 存储当前系统中所有用户组信息</span><br><span class="line">- Group:     x    : 123 : abc,def,xyz</span><br><span class="line">- 组名称:组密码占位符:组编号:组中用户列表名</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;gshadow 存储当前系统中用户组的密码信息</span><br><span class="line">- Group:  *  :       :abc,def,xyz</span><br><span class="line">- 组名称:组密码:组管理者:组中用户列表名</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;passwd 存储当前系统中所有用户的信息</span><br><span class="line">- user :    x   :   123 :   456   : xxxxxxx : &#x2F;home&#x2F;user : &#x2F;bin&#x2F;bash</span><br><span class="line">- 用户名:密码占位符:用户编号:用户组编号:用户注释信息: 用户主目录  : shell类型</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;shadow 存储当前系统中所有用户的密码信息</span><br><span class="line">- user : xxx :::::</span><br><span class="line">- 用户名: 密码 ::::</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一套样例</span><br><span class="line"></span><br><span class="line"># groupadd sexy 创建sexy用户组</span><br><span class="line"># groupadd -n market sexy 用sexy组名改为market</span><br><span class="line"># groupmod -g 668 market 修改market用户组编号</span><br><span class="line"># groupadd -g 888 boss 创建boss用户组，编号为888</span><br><span class="line"># groupdel market 删除market用户组</span><br><span class="line"># useradd -g sexy sdf 添加用户</span><br><span class="line"># useradd -g sexy jzmb</span><br><span class="line"># useradd -d &#x2F;home&#x2F;xxx imooc 添加用户并指定用户文件夹所在位置</span><br><span class="line"># usermod -c dgdzmx sdf 修改sdf注释</span><br><span class="line"># usermod -l cls sdf 用户名sdf更改为cls</span><br><span class="line"># usermod -d &#x2F;home&#x2F;cls cls 修改cls文件夹路径</span><br><span class="line"># usermod -g sexy imooc imooc切换进sexy用户组</span><br><span class="line"># userdel jzmb 删除jzmb账号</span><br><span class="line"># userdel -r jzmb 删除jzmb用户文件夹</span><br><span class="line"></span><br><span class="line">touch &#x2F;etc&#x2F;nologin 禁止root以外的其他账户登录</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># passwd -l cls 锁定cls</span><br><span class="line"># passwd -u cls 解锁cls</span><br><span class="line"># passwd -d cls cls账户无密码登录</span><br></pre></td></tr></table></figure>



<h2 id="主要组和附属组"><a href="#主要组和附属组" class="headerlink" title="主要组和附属组"></a>主要组和附属组</h2><p>用户可以同时属于多个组</p>
<ul>
<li>一个主要组</li>
<li>多个附属组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一套样例</span><br><span class="line"></span><br><span class="line"># gpasswd -a cls boss boss组变为cls的附属组,用逗号可以添加多个附属组</span><br><span class="line"># newgrp boss （cls自己执行，切换到boss组）</span><br><span class="line"># gpasswd -a cls boss cls不在是boss组的附属组</span><br></pre></td></tr></table></figure>







<p>&emsp;&emsp;</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>权限</tag>
        <tag>用户</tag>
      </tags>
  </entry>
  <entry>
    <title>frp实现内网穿透</title>
    <url>/2019/12/29/%EF%BC%812.frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;对于没有公网ip的内网用户来说，远程管理或在外网访问内网机器上的服务是一个比较麻烦的问题，为了解决这个问题，我介绍一款相当好用的内网穿透工具frp。<br>&emsp;&emsp;frp 是一个使用 Go 语言开发的高性能的反向代理应用，可以帮助您轻松地进行内网穿透，对外网提供服务。FRP 支持 TCP、UDP、HTTP、HTTPS等协议类型，并且支持 Web 服务根据域名进行路由转发。<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">frp项目地址: https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp</span><br></pre></td></tr></table></figure>



<h1 id="frp的作用"><a href="#frp的作用" class="headerlink" title="frp的作用"></a>frp的作用</h1><p>1.利用处于内网或防火墙后的机器，对外网环境提供 HTTP 或 HTTPS 服务。</p>
<p>2.对于 HTTP, HTTPS 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个 80 端口。</p>
<p>3.利用处于内网或防火墙后的机器，对外网环境提供 TCP 和 UDP 服务，例如在家里通过 SSH 访问处于公司内网环境内的主机。</p>
<h1 id="frp安装"><a href="#frp安装" class="headerlink" title="frp安装"></a>frp安装</h1><p>FRP 采用 Go 语言开发，支持 Windows、Linux、MacOS、ARM等多平台部署。FRP 安装非常容易，只需下载对应系统平台的软件包，并解压就可用。</p>
<p>这里以 Linux 为例，为了方便管理我们把解压后的目录重命名为 frp ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases&#x2F;download&#x2F;v0.30.0&#x2F;frp_0.30.0_linux_amd64.tar.gz</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>随笔分享</category>
      </categories>
      <tags>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>新篇章，新世界</title>
    <url>/2019/12/23/1.hello-world/</url>
    <content><![CDATA[<p>&emsp;&emsp;我在之前的hexo博客中写了50+篇文章，但质量都不太让我满意，解决问题的效率甚至比不上百度，恰巧之前的文档因操作失误丢失了，于是我就重置了整个博客内容从零开始</p>
<p>&emsp;&emsp;今后的每一篇文章我都会尽心尽力而为，不灌水，如果对文章有问题或者想要交流的小伙伴，可以加我的qq或给我发送邮件进行联系。</p>
<p>&emsp;&emsp;那么，加油！</p>
<p>hexo搭建及相关教程可参考这→ <a href="https://io-oi.me/tech/hexo-next-optimization/" target="_blank" rel="noopener">https://io-oi.me/tech/hexo-next-optimization/</a></p>
<p>在线工具合集→<a href="https://tool.lu/" target="_blank" rel="noopener">https://tool.lu/</a></p>
<p>个人大数据配置留存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PATH&#x3D;$PATH:$HOME&#x2F;.local&#x2F;bin:$HOME&#x2F;bin</span><br><span class="line"></span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">export HADOOP_CLASSPATH&#x3D;$&#123;HADOOP_CLASSPATH&#125;:&#x2F;home&#x2F;pearfl&#x2F;lib&#x2F;*</span><br><span class="line"></span><br><span class="line">export MYSQL_HOME&#x3D;$PATH:&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;mysql-5.6.47</span><br><span class="line">export PATH&#x3D;$MYSQL_HOME&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;jdk1.8.0_231</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;hadoop-2.6.0-cdh5.16.2</span><br><span class="line">export PATH&#x3D;$HADOOP_HOME&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">export HIVE_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;apache-hive-1.1.0-cdh5.16.2-bin</span><br><span class="line">export PATH&#x3D;$HIVE_HOME&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">export MAVEN_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;apache-maven-3.6.3</span><br><span class="line">export PATH&#x3D;$MAVEN_HOME&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">export ZOOKEEPER_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;zookeeper-3.4.5-cdh5.16.2</span><br><span class="line">export PATH&#x3D;$ZOOKEEPER_HOME&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">export HUE_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;hue-3.9.0-cdh5.16.2</span><br><span class="line">export PATH&#x3D;$HUE_HOME&#x2F;build&#x2F;env&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">export FLUME_HOME&#x3D;&#x2F;home&#x2F;pearfl&#x2F;app&#x2F;apache-flume-1.6.0-cdh5.16.2-bin</span><br><span class="line">export PATH&#x3D;$FLUME_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>个人感想</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
